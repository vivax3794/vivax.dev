{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/components/fab/QFabAction.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h, computed, inject, getCurrentInstance } from 'vue'\n\nimport QBtn from '../btn/QBtn.js'\nimport QIcon from '../icon/QIcon.js'\n\nimport useFab, { useFabProps } from './use-fab.js'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { fabKey } from '../../utils/private/symbols.js'\nimport { hMergeSlot } from '../../utils/private/render.js'\nimport { noop } from '../../utils/event.js'\n\nconst anchorMap = {\n  start: 'self-end',\n  center: 'self-center',\n  end: 'self-start'\n}\n\nconst anchorValues = Object.keys(anchorMap)\n\nexport default createComponent({\n  name: 'QFabAction',\n\n  props: {\n    ...useFabProps,\n\n    icon: {\n      type: String,\n      default: ''\n    },\n\n    anchor: {\n      type: String,\n      validator: v => anchorValues.includes(v)\n    },\n\n    to: [ String, Object ],\n    replace: Boolean\n  },\n\n  emits: [ 'click' ],\n\n  setup (props, { slots, emit }) {\n    const $fab = inject(fabKey, () => ({\n      showing: { value: true },\n      onChildClick: noop\n    }))\n\n    const { formClass, labelProps } = useFab(props, $fab.showing)\n\n    const classes = computed(() => {\n      const align = anchorMap[ props.anchor ]\n      return formClass.value + (align !== void 0 ? ` ${ align }` : '')\n    })\n\n    const isDisabled = computed(() =>\n      props.disable === true\n      || $fab.showing.value !== true\n    )\n\n    function click (e) {\n      $fab.onChildClick(e)\n      emit('click', e)\n    }\n\n    function getContent () {\n      const child = []\n\n      if (slots.icon !== void 0) {\n        child.push(slots.icon())\n      }\n      else if (props.icon !== '') {\n        child.push(\n          h(QIcon, { name: props.icon })\n        )\n      }\n\n      if (props.label !== '' || slots.label !== void 0) {\n        child[ labelProps.value.action ](\n          h('div', labelProps.value.data, slots.label !== void 0 ? slots.label() : [ props.label ])\n        )\n      }\n\n      return hMergeSlot(slots.default, child)\n    }\n\n    // expose public methods\n    const vm = getCurrentInstance()\n    Object.assign(vm.proxy, { click })\n\n    return () => h(QBtn, {\n      class: classes.value,\n      ...props,\n      noWrap: true,\n      stack: props.stacked,\n      icon: void 0,\n      label: void 0,\n      noCaps: true,\n      fabMini: true,\n      disable: isDisabled.value,\n      onClick: click\n    }, getContent)\n  }\n})\n",
      "start": 1703982896258,
      "end": 1703982896344,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896344,
      "end": 1703982896344,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896344,
      "end": 1703982896344,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896344,
      "end": 1703982896344,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896344,
      "end": 1703982896344,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896344,
      "end": 1703982896344,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896345,
      "end": 1703982896345,
      "order": "normal"
    }
  ]
}
