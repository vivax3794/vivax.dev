{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/components/icon/QIcon.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h, computed, getCurrentInstance } from 'vue'\n\nimport useSize, { useSizeProps } from '../../composables/private/use-size.js'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { hSlot, hMergeSlot } from '../../utils/private/render.js'\n\nconst defaultViewBox = '0 0 24 24'\n\nconst sameFn = i => i\nconst ionFn = i => `ionicons ${ i }`\n\nconst libMap = {\n  'mdi-': i => `mdi ${ i }`,\n  'icon-': sameFn, // fontawesome equiv\n  'bt-': i => `bt ${ i }`,\n  'eva-': i => `eva ${ i }`,\n  'ion-md': ionFn,\n  'ion-ios': ionFn,\n  'ion-logo': ionFn,\n  'iconfont ': sameFn,\n  'ti-': i => `themify-icon ${ i }`,\n  'bi-': i => `bootstrap-icons ${ i }`\n}\n\nconst matMap = {\n  o_: '-outlined',\n  r_: '-round',\n  s_: '-sharp'\n}\n\nconst symMap = {\n  sym_o_: '-outlined',\n  sym_r_: '-rounded',\n  sym_s_: '-sharp'\n}\n\nconst libRE = new RegExp('^(' + Object.keys(libMap).join('|') + ')')\nconst matRE = new RegExp('^(' + Object.keys(matMap).join('|') + ')')\nconst symRE = new RegExp('^(' + Object.keys(symMap).join('|') + ')')\nconst mRE = /^[Mm]\\s?[-+]?\\.?\\d/\nconst imgRE = /^img:/\nconst svgUseRE = /^svguse:/\nconst ionRE = /^ion-/\nconst faRE = /^(fa-(sharp|solid|regular|light|brands|duotone|thin)|[lf]a[srlbdk]?) /\n\nexport default createComponent({\n  name: 'QIcon',\n\n  props: {\n    ...useSizeProps,\n\n    tag: {\n      type: String,\n      default: 'i'\n    },\n\n    name: String,\n    color: String,\n    left: Boolean,\n    right: Boolean\n  },\n\n  setup (props, { slots }) {\n    const { proxy: { $q } } = getCurrentInstance()\n    const sizeStyle = useSize(props)\n\n    const classes = computed(() =>\n      'q-icon'\n      + (props.left === true ? ' on-left' : '') // TODO Qv3: drop this\n      + (props.right === true ? ' on-right' : '')\n      + (props.color !== void 0 ? ` text-${ props.color }` : '')\n    )\n\n    const type = computed(() => {\n      let cls\n      let icon = props.name\n\n      if (icon === 'none' || !icon) {\n        return { none: true }\n      }\n\n      if ($q.iconMapFn !== null) {\n        const res = $q.iconMapFn(icon)\n        if (res !== void 0) {\n          if (res.icon !== void 0) {\n            icon = res.icon\n            if (icon === 'none' || !icon) {\n              return { none: true }\n            }\n          }\n          else {\n            return {\n              cls: res.cls,\n              content: res.content !== void 0\n                ? res.content\n                : ' '\n            }\n          }\n        }\n      }\n\n      if (mRE.test(icon) === true) {\n        const [ def, viewBox = defaultViewBox ] = icon.split('|')\n\n        return {\n          svg: true,\n          viewBox,\n          nodes: def.split('&&').map(path => {\n            const [ d, style, transform ] = path.split('@@')\n            return h('path', { style, d, transform })\n          })\n        }\n      }\n\n      if (imgRE.test(icon) === true) {\n        return {\n          img: true,\n          src: icon.substring(4)\n        }\n      }\n\n      if (svgUseRE.test(icon) === true) {\n        const [ def, viewBox = defaultViewBox ] = icon.split('|')\n\n        return {\n          svguse: true,\n          src: def.substring(7),\n          viewBox\n        }\n      }\n\n      let content = ' '\n      const matches = icon.match(libRE)\n\n      if (matches !== null) {\n        cls = libMap[ matches[ 1 ] ](icon)\n      }\n      else if (faRE.test(icon) === true) {\n        cls = icon\n      }\n      else if (ionRE.test(icon) === true) {\n        cls = `ionicons ion-${ $q.platform.is.ios === true ? 'ios' : 'md' }${ icon.substring(3) }`\n      }\n      else if (symRE.test(icon) === true) {\n        // \"notranslate\" class is for Google Translate\n        // to avoid tampering with Material Symbols ligature font\n        //\n        // Caution: To be able to add suffix to the class name,\n        // keep the 'material-symbols' at the end of the string.\n        cls = 'notranslate material-symbols'\n\n        const matches = icon.match(symRE)\n        if (matches !== null) {\n          icon = icon.substring(6)\n          cls += symMap[ matches[ 1 ] ]\n        }\n\n        content = icon\n      }\n      else {\n        // \"notranslate\" class is for Google Translate\n        // to avoid tampering with Material Icons ligature font\n        //\n        // Caution: To be able to add suffix to the class name,\n        // keep the 'material-icons' at the end of the string.\n        cls = 'notranslate material-icons'\n\n        const matches = icon.match(matRE)\n        if (matches !== null) {\n          icon = icon.substring(2)\n          cls += matMap[ matches[ 1 ] ]\n        }\n\n        content = icon\n      }\n\n      return {\n        cls,\n        content\n      }\n    })\n\n    return () => {\n      const data = {\n        class: classes.value,\n        style: sizeStyle.value,\n        'aria-hidden': 'true',\n        role: 'presentation'\n      }\n\n      if (type.value.none === true) {\n        return h(props.tag, data, hSlot(slots.default))\n      }\n\n      if (type.value.img === true) {\n        return h('span', data, hMergeSlot(slots.default, [\n          h('img', { src: type.value.src })\n        ]))\n      }\n\n      if (type.value.svg === true) {\n        return h('span', data, hMergeSlot(slots.default, [\n          h('svg', {\n            viewBox: type.value.viewBox || '0 0 24 24'\n          }, type.value.nodes)\n        ]))\n      }\n\n      if (type.value.svguse === true) {\n        return h('span', data, hMergeSlot(slots.default, [\n          h('svg', {\n            viewBox: type.value.viewBox\n          }, [\n            h('use', { 'xlink:href': type.value.src })\n          ])\n        ]))\n      }\n\n      if (type.value.cls !== void 0) {\n        data.class += ' ' + type.value.cls\n      }\n\n      return h(props.tag, data, hMergeSlot(slots.default, [\n        type.value.content\n      ]))\n    }\n  }\n})\n",
      "start": 1703982896280,
      "end": 1703982896380,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896380,
      "end": 1703982896380,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896380,
      "end": 1703982896381,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896381,
      "end": 1703982896381,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896381,
      "end": 1703982896381,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896381,
      "end": 1703982896381,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896381,
      "end": 1703982896381,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896381,
      "end": 1703982896382,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896382,
      "end": 1703982896382,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896382,
      "end": 1703982896382,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896382,
      "end": 1703982896382,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896382,
      "end": 1703982896382,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896382,
      "end": 1703982896382,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896382,
      "end": 1703982896382,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896382,
      "end": 1703982896382,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896382,
      "end": 1703982896382,
      "order": "normal"
    }
  ]
}
