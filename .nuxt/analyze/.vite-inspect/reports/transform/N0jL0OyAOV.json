{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/components/uploader/uploader-core.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h, ref, isRef, computed, watch, provide, onBeforeUnmount, getCurrentInstance } from 'vue'\n\nimport QBtn from '../btn/QBtn.js'\nimport QIcon from '../icon/QIcon.js'\nimport QSpinner from '../spinner/QSpinner.js'\nimport QCircularProgress from '../circular-progress/QCircularProgress.js'\n\nimport useDark, { useDarkProps } from '../../composables/private/use-dark.js'\nimport useFile, { useFileProps, useFileEmits } from '../../composables/private/use-file.js'\n\nimport { stop } from '../../utils/event.js'\nimport { humanStorageSize } from '../../utils/format.js'\nimport { uploaderKey } from '../../utils/private/symbols.js'\nimport { injectProp, injectMultipleProps } from '../../utils/private/inject-obj-prop.js'\nimport { vmIsDestroyed } from '../../utils/private/vm.js'\n\nfunction getProgressLabel (p) {\n  return (p * 100).toFixed(2) + '%'\n}\n\nexport const coreProps = {\n  ...useDarkProps,\n  ...useFileProps,\n\n  label: String,\n\n  color: String,\n  textColor: String,\n\n  square: Boolean,\n  flat: Boolean,\n  bordered: Boolean,\n\n  noThumbnails: Boolean,\n  autoUpload: Boolean,\n  hideUploadBtn: Boolean,\n\n  disable: Boolean,\n  readonly: Boolean\n}\n\nexport const coreEmits = [\n  ...useFileEmits,\n  'start', 'finish', 'added', 'removed'\n]\n\nexport function getRenderer (getPlugin, expose) {\n  const vm = getCurrentInstance()\n  const { props, slots, emit, proxy } = vm\n  const { $q } = proxy\n\n  const isDark = useDark(props, $q)\n\n  function updateFileStatus (file, status, uploadedSize) {\n    file.__status = status\n\n    if (status === 'idle') {\n      file.__uploaded = 0\n      file.__progress = 0\n      file.__sizeLabel = humanStorageSize(file.size)\n      file.__progressLabel = '0.00%'\n      return\n    }\n    if (status === 'failed') {\n      proxy.$forceUpdate()\n      return\n    }\n\n    file.__uploaded = status === 'uploaded'\n      ? file.size\n      : uploadedSize\n\n    file.__progress = status === 'uploaded'\n      ? 1\n      : Math.min(0.9999, file.__uploaded / file.size)\n\n    file.__progressLabel = getProgressLabel(file.__progress)\n    proxy.$forceUpdate()\n  }\n\n  const editable = computed(() => props.disable !== true && props.readonly !== true)\n  const dnd = ref(false)\n\n  const rootRef = ref(null)\n  const inputRef = ref(null)\n\n  const state = {\n    files: ref([]),\n    queuedFiles: ref([]),\n    uploadedFiles: ref([]),\n    uploadedSize: ref(0),\n\n    updateFileStatus,\n    isAlive: () => vmIsDestroyed(vm) === false\n  }\n\n  const {\n    pickFiles,\n    addFiles,\n    onDragover,\n    onDragleave,\n    processFiles,\n    getDndNode,\n    maxFilesNumber,\n    maxTotalSizeNumber\n  } = useFile({ editable, dnd, getFileInput, addFilesToQueue })\n\n  Object.assign(state, getPlugin({\n    props,\n    slots,\n    emit,\n    helpers: state,\n    exposeApi: obj => { Object.assign(state, obj) }\n  }))\n\n  if (state.isBusy === void 0) {\n    state.isBusy = ref(false)\n  }\n\n  const uploadSize = ref(0)\n  const uploadProgress = computed(() => (\n    uploadSize.value === 0\n      ? 0\n      : state.uploadedSize.value / uploadSize.value\n  ))\n  const uploadProgressLabel = computed(() => getProgressLabel(uploadProgress.value))\n  const uploadSizeLabel = computed(() => humanStorageSize(uploadSize.value))\n\n  const canAddFiles = computed(() =>\n    editable.value === true\n    && state.isUploading.value !== true\n    // if single selection and no files are queued:\n    && (props.multiple === true || state.queuedFiles.value.length === 0)\n    // if max-files is set and current number of files does not exceeds it:\n    && (props.maxFiles === void 0 || state.files.value.length < maxFilesNumber.value)\n    // if max-total-size is set and current upload size does not exceeds it:\n    && (props.maxTotalSize === void 0 || uploadSize.value < maxTotalSizeNumber.value)\n  )\n\n  const canUpload = computed(() =>\n    editable.value === true\n    && state.isBusy.value !== true\n    && state.isUploading.value !== true\n    && state.queuedFiles.value.length !== 0\n  )\n\n  provide(uploaderKey, renderInput)\n\n  const classes = computed(() =>\n    'q-uploader column no-wrap'\n    + (isDark.value === true ? ' q-uploader--dark q-dark' : '')\n    + (props.bordered === true ? ' q-uploader--bordered' : '')\n    + (props.square === true ? ' q-uploader--square no-border-radius' : '')\n    + (props.flat === true ? ' q-uploader--flat no-shadow' : '')\n    + (props.disable === true ? ' disabled q-uploader--disable' : '')\n    + (dnd.value === true ? ' q-uploader--dnd' : '')\n  )\n\n  const colorClass = computed(() =>\n    'q-uploader__header'\n    + (props.color !== void 0 ? ` bg-${ props.color }` : '')\n    + (props.textColor !== void 0 ? ` text-${ props.textColor }` : '')\n  )\n\n  watch(state.isUploading, (newVal, oldVal) => {\n    if (oldVal === false && newVal === true) {\n      emit('start')\n    }\n    else if (oldVal === true && newVal === false) {\n      emit('finish')\n    }\n  })\n\n  function reset () {\n    if (props.disable === false) {\n      state.abort()\n      state.uploadedSize.value = 0\n      uploadSize.value = 0\n      revokeImgURLs()\n      state.files.value = []\n      state.queuedFiles.value = []\n      state.uploadedFiles.value = []\n    }\n  }\n\n  function removeUploadedFiles () {\n    if (props.disable === false) {\n      batchRemoveFiles([ 'uploaded' ], () => {\n        state.uploadedFiles.value = []\n      })\n    }\n  }\n\n  function removeQueuedFiles () {\n    batchRemoveFiles([ 'idle', 'failed' ], ({ size }) => {\n      uploadSize.value -= size\n      state.queuedFiles.value = []\n    })\n  }\n\n  function batchRemoveFiles (statusList, cb) {\n    if (props.disable === true) {\n      return\n    }\n\n    const removed = {\n      files: [],\n      size: 0\n    }\n\n    const localFiles = state.files.value.filter(f => {\n      if (statusList.indexOf(f.__status) === -1) {\n        return true\n      }\n\n      removed.size += f.size\n      removed.files.push(f)\n\n      f.__img !== void 0 && window.URL.revokeObjectURL(f.__img.src)\n\n      return false\n    })\n\n    if (removed.files.length !== 0) {\n      state.files.value = localFiles\n      cb(removed)\n      emit('removed', removed.files)\n    }\n  }\n\n  function removeFile (file) {\n    if (props.disable) { return }\n\n    if (file.__status === 'uploaded') {\n      state.uploadedFiles.value = state.uploadedFiles.value.filter(f => f.__key !== file.__key)\n    }\n    else if (file.__status === 'uploading') {\n      file.__abort()\n    }\n    else {\n      uploadSize.value -= file.size\n    }\n\n    state.files.value = state.files.value.filter(f => {\n      if (f.__key !== file.__key) {\n        return true\n      }\n\n      f.__img !== void 0 && window.URL.revokeObjectURL(f.__img.src)\n\n      return false\n    })\n\n    state.queuedFiles.value = state.queuedFiles.value.filter(f => f.__key !== file.__key)\n    emit('removed', [ file ])\n  }\n\n  function revokeImgURLs () {\n    state.files.value.forEach(f => {\n      f.__img !== void 0 && window.URL.revokeObjectURL(f.__img.src)\n    })\n  }\n\n  function getFileInput () {\n    return inputRef.value\n      || rootRef.value.getElementsByClassName('q-uploader__input')[ 0 ]\n  }\n\n  function addFilesToQueue (e, fileList) {\n    const localFiles = processFiles(e, fileList, state.files.value, true)\n    const fileInput = getFileInput()\n\n    if (fileInput !== void 0 && fileInput !== null) {\n      fileInput.value = ''\n    }\n\n    if (localFiles === void 0) { return }\n\n    localFiles.forEach(file => {\n      state.updateFileStatus(file, 'idle')\n      uploadSize.value += file.size\n\n      if (props.noThumbnails !== true && file.type.toUpperCase().startsWith('IMAGE')) {\n        const img = new Image()\n        img.src = window.URL.createObjectURL(file)\n        file.__img = img\n      }\n    })\n\n    state.files.value = state.files.value.concat(localFiles)\n    state.queuedFiles.value = state.queuedFiles.value.concat(localFiles)\n    emit('added', localFiles)\n    props.autoUpload === true && state.upload()\n  }\n\n  function upload () {\n    canUpload.value === true && state.upload()\n  }\n\n  function getBtn (show, icon, fn) {\n    if (show === true) {\n      const data = {\n        type: 'a',\n        key: icon,\n        icon: $q.iconSet.uploader[ icon ],\n        flat: true,\n        dense: true\n      }\n\n      let child = void 0\n\n      if (icon === 'add') {\n        data.onClick = pickFiles\n        child = renderInput\n      }\n      else {\n        data.onClick = fn\n      }\n\n      return h(QBtn, data, child)\n    }\n  }\n\n  function renderInput () {\n    return h('input', {\n      ref: inputRef,\n      class: 'q-uploader__input overflow-hidden absolute-full',\n      tabindex: -1,\n      type: 'file',\n      title: '', // try to remove default tooltip\n      accept: props.accept,\n      multiple: props.multiple === true ? 'multiple' : void 0,\n      capture: props.capture,\n      onMousedown: stop, // need to stop refocus from QBtn\n      onClick: pickFiles,\n      onChange: addFilesToQueue\n    })\n  }\n\n  function getHeader () {\n    if (slots.header !== void 0) {\n      return slots.header(publicApi)\n    }\n\n    return [\n      h('div', {\n        class: 'q-uploader__header-content column'\n      }, [\n        h('div', {\n          class: 'flex flex-center no-wrap q-gutter-xs'\n        }, [\n          getBtn(state.queuedFiles.value.length !== 0, 'removeQueue', removeQueuedFiles),\n          getBtn(state.uploadedFiles.value.length !== 0, 'removeUploaded', removeUploadedFiles),\n\n          state.isUploading.value === true\n            ? h(QSpinner, { class: 'q-uploader__spinner' })\n            : null,\n\n          h('div', { class: 'col column justify-center' }, [\n            props.label !== void 0\n              ? h('div', { class: 'q-uploader__title' }, [ props.label ])\n              : null,\n\n            h('div', { class: 'q-uploader__subtitle' }, [\n              uploadSizeLabel.value + ' / ' + uploadProgressLabel.value\n            ])\n          ]),\n\n          getBtn(canAddFiles.value, 'add'),\n          getBtn(props.hideUploadBtn === false && canUpload.value === true, 'upload', state.upload),\n          getBtn(state.isUploading.value, 'clear', state.abort)\n        ])\n      ])\n    ]\n  }\n\n  function getList () {\n    if (slots.list !== void 0) {\n      return slots.list(publicApi)\n    }\n\n    return state.files.value.map(file => h('div', {\n      key: file.__key,\n      class: 'q-uploader__file relative-position'\n        + (props.noThumbnails !== true && file.__img !== void 0 ? ' q-uploader__file--img' : '')\n        + (\n          file.__status === 'failed'\n            ? ' q-uploader__file--failed'\n            : (file.__status === 'uploaded' ? ' q-uploader__file--uploaded' : '')\n        ),\n      style: props.noThumbnails !== true && file.__img !== void 0\n        ? { backgroundImage: 'url(\"' + file.__img.src + '\")' }\n        : null\n    }, [\n      h('div', {\n        class: 'q-uploader__file-header row flex-center no-wrap'\n      }, [\n        file.__status === 'failed'\n          ? h(QIcon, {\n            class: 'q-uploader__file-status',\n            name: $q.iconSet.type.negative,\n            color: 'negative'\n          })\n          : null,\n\n        h('div', { class: 'q-uploader__file-header-content col' }, [\n          h('div', { class: 'q-uploader__title' }, [ file.name ]),\n          h('div', {\n            class: 'q-uploader__subtitle row items-center no-wrap'\n          }, [\n            file.__sizeLabel + ' / ' + file.__progressLabel\n          ])\n        ]),\n\n        file.__status === 'uploading'\n          ? h(QCircularProgress, {\n            value: file.__progress,\n            min: 0,\n            max: 1,\n            indeterminate: file.__progress === 0\n          })\n          : h(QBtn, {\n            round: true,\n            dense: true,\n            flat: true,\n            icon: $q.iconSet.uploader[ file.__status === 'uploaded' ? 'done' : 'clear' ],\n            onClick: () => { removeFile(file) }\n          })\n      ])\n    ]))\n  }\n\n  onBeforeUnmount(() => {\n    state.isUploading.value === true && state.abort()\n    state.files.value.length !== 0 && revokeImgURLs()\n  })\n\n  const publicApi = {}\n\n  for (const key in state) {\n    if (isRef(state[ key ]) === true) {\n      injectProp(publicApi, key, () => state[ key ].value)\n    }\n    else { // method or non-computed prop\n      publicApi[ key ] = state[ key ]\n    }\n  }\n\n  Object.assign(publicApi, {\n    upload,\n    reset,\n    removeUploadedFiles,\n    removeQueuedFiles,\n    removeFile,\n\n    pickFiles,\n    addFiles\n  })\n\n  injectMultipleProps(publicApi, {\n    canAddFiles: () => canAddFiles.value,\n    canUpload: () => canUpload.value,\n    uploadSizeLabel: () => uploadSizeLabel.value,\n    uploadProgressLabel: () => uploadProgressLabel.value\n  })\n\n  // expose public api (methods & computed props)\n  expose({\n    ...state,\n\n    upload,\n    reset,\n    removeUploadedFiles,\n    removeQueuedFiles,\n    removeFile,\n\n    pickFiles,\n    addFiles,\n\n    canAddFiles,\n    canUpload,\n    uploadSizeLabel,\n    uploadProgressLabel\n  })\n\n  return () => {\n    const children = [\n      h('div', { class: colorClass.value }, getHeader()),\n      h('div', { class: 'q-uploader__list scroll' }, getList()),\n      getDndNode('uploader')\n    ]\n\n    state.isBusy.value === true && children.push(\n      h('div', {\n        class: 'q-uploader__overlay absolute-full flex flex-center'\n      }, [ h(QSpinner) ])\n    )\n\n    const data = { ref: rootRef, class: classes.value }\n\n    if (canAddFiles.value === true) {\n      Object.assign(data, { onDragover, onDragleave })\n    }\n\n    return h('div', data, children)\n  }\n}\n",
      "start": 1703982897418,
      "end": 1703982897537,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982897537,
      "end": 1703982897537,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982897538,
      "end": 1703982897538,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982897538,
      "end": 1703982897538,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703982897538,
      "end": 1703982897538,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703982897538,
      "end": 1703982897538,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982897538,
      "end": 1703982897538,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982897538,
      "end": 1703982897538,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982897538,
      "end": 1703982897538,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982897538,
      "end": 1703982897539,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982897539,
      "end": 1703982897539,
      "order": "normal"
    }
  ]
}
