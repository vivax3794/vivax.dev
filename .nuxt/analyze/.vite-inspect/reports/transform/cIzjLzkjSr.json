{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/components/select/QSelect.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h, ref, computed, watch, onBeforeUpdate, onUpdated, onBeforeUnmount, nextTick, getCurrentInstance } from 'vue'\n\nimport QField from '../field/QField.js'\nimport QIcon from '../icon/QIcon.js'\nimport QChip from '../chip/QChip.js'\n\nimport QItem from '../item/QItem.js'\nimport QItemSection from '../item/QItemSection.js'\nimport QItemLabel from '../item/QItemLabel.js'\n\nimport QMenu from '../menu/QMenu.js'\nimport QDialog from '../dialog/QDialog.js'\n\nimport useField, { useFieldState, useFieldProps, useFieldEmits, fieldValueIsFilled } from '../../composables/private/use-field.js'\nimport { useVirtualScroll, useVirtualScrollProps } from '../virtual-scroll/use-virtual-scroll.js'\nimport { useFormProps, useFormInputNameAttr } from '../../composables/private/use-form.js'\nimport useKeyComposition from '../../composables/private/use-key-composition.js'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { isDeepEqual } from '../../utils/is.js'\nimport { stop, prevent, stopAndPrevent } from '../../utils/event.js'\nimport { normalizeToInterval } from '../../utils/format.js'\nimport { shouldIgnoreKey, isKeyCode } from '../../utils/private/key-composition.js'\nimport { hMergeSlot } from '../../utils/private/render.js'\n\nconst validateNewValueMode = v => [ 'add', 'add-unique', 'toggle' ].includes(v)\nconst reEscapeList = '.*+?^${}()|[]\\\\'\nconst fieldPropsList = Object.keys(useFieldProps)\n\nexport default createComponent({\n  name: 'QSelect',\n\n  inheritAttrs: false,\n\n  props: {\n    ...useVirtualScrollProps,\n    ...useFormProps,\n    ...useFieldProps,\n\n    modelValue: {\n      required: true\n    },\n\n    multiple: Boolean,\n\n    displayValue: [ String, Number ],\n    displayValueHtml: Boolean,\n    dropdownIcon: String,\n\n    options: {\n      type: Array,\n      default: () => []\n    },\n\n    optionValue: [ Function, String ],\n    optionLabel: [ Function, String ],\n    optionDisable: [ Function, String ],\n\n    hideSelected: Boolean,\n    hideDropdownIcon: Boolean,\n    fillInput: Boolean,\n\n    maxValues: [ Number, String ],\n\n    optionsDense: Boolean,\n    optionsDark: {\n      type: Boolean,\n      default: null\n    },\n    optionsSelectedClass: String,\n    optionsHtml: Boolean,\n\n    optionsCover: Boolean,\n\n    menuShrink: Boolean,\n    menuAnchor: String,\n    menuSelf: String,\n    menuOffset: Array,\n\n    popupContentClass: String,\n    popupContentStyle: [ String, Array, Object ],\n\n    useInput: Boolean,\n    useChips: Boolean,\n\n    newValueMode: {\n      type: String,\n      validator: validateNewValueMode\n    },\n\n    mapOptions: Boolean,\n    emitValue: Boolean,\n\n    inputDebounce: {\n      type: [ Number, String ],\n      default: 500\n    },\n\n    inputClass: [ Array, String, Object ],\n    inputStyle: [ Array, String, Object ],\n\n    tabindex: {\n      type: [ String, Number ],\n      default: 0\n    },\n\n    autocomplete: String,\n\n    transitionShow: String,\n    transitionHide: String,\n    transitionDuration: [ String, Number ],\n\n    behavior: {\n      type: String,\n      validator: v => [ 'default', 'menu', 'dialog' ].includes(v),\n      default: 'default'\n    },\n\n    virtualScrollItemSize: {\n      type: [ Number, String ],\n      default: void 0\n    },\n\n    onNewValue: Function,\n    onFilter: Function\n  },\n\n  emits: [\n    ...useFieldEmits,\n    'add', 'remove', 'inputValue', 'newValue',\n    'keyup', 'keypress', 'keydown',\n    'filterAbort'\n  ],\n\n  setup (props, { slots, emit }) {\n    const { proxy } = getCurrentInstance()\n    const { $q } = proxy\n\n    const menu = ref(false)\n    const dialog = ref(false)\n    const optionIndex = ref(-1)\n    const inputValue = ref('')\n    const dialogFieldFocused = ref(false)\n    const innerLoadingIndicator = ref(false)\n\n    let filterTimer = null, inputValueTimer = null,\n      innerValueCache,\n      hasDialog, userInputValue, filterId = null, defaultInputValue,\n      transitionShowComputed, searchBuffer, searchBufferExp\n\n    const inputRef = ref(null)\n    const targetRef = ref(null)\n    const menuRef = ref(null)\n    const dialogRef = ref(null)\n    const menuContentRef = ref(null)\n\n    const nameProp = useFormInputNameAttr(props)\n\n    const onComposition = useKeyComposition(onInput)\n\n    const virtualScrollLength = computed(() => (\n      Array.isArray(props.options)\n        ? props.options.length\n        : 0\n    ))\n\n    const virtualScrollItemSizeComputed = computed(() => (\n      props.virtualScrollItemSize === void 0\n        ? (props.optionsDense === true ? 24 : 48)\n        : props.virtualScrollItemSize\n    ))\n\n    const {\n      virtualScrollSliceRange,\n      virtualScrollSliceSizeComputed,\n      localResetVirtualScroll,\n      padVirtualScroll,\n      onVirtualScrollEvt,\n      scrollTo,\n      setVirtualScrollSize\n    } = useVirtualScroll({\n      virtualScrollLength, getVirtualScrollTarget, getVirtualScrollEl,\n      virtualScrollItemSizeComputed\n    })\n\n    const state = useFieldState()\n\n    const innerValue = computed(() => {\n      const\n        mapNull = props.mapOptions === true && props.multiple !== true,\n        val = props.modelValue !== void 0 && (props.modelValue !== null || mapNull === true)\n          ? (props.multiple === true && Array.isArray(props.modelValue) ? props.modelValue : [ props.modelValue ])\n          : []\n\n      if (props.mapOptions === true && Array.isArray(props.options) === true) {\n        const cache = props.mapOptions === true && innerValueCache !== void 0\n          ? innerValueCache\n          : []\n        const values = val.map(v => getOption(v, cache))\n\n        return props.modelValue === null && mapNull === true\n          ? values.filter(v => v !== null)\n          : values\n      }\n\n      return val\n    })\n\n    const innerFieldProps = computed(() => {\n      const acc = {}\n      fieldPropsList.forEach(key => {\n        const val = props[ key ]\n        if (val !== void 0) {\n          acc[ key ] = val\n        }\n      })\n      return acc\n    })\n\n    const isOptionsDark = computed(() => (\n      props.optionsDark === null\n        ? state.isDark.value\n        : props.optionsDark\n    ))\n\n    const hasValue = computed(() => fieldValueIsFilled(innerValue.value))\n\n    const computedInputClass = computed(() => {\n      let cls = 'q-field__input q-placeholder col'\n\n      if (props.hideSelected === true || innerValue.value.length === 0) {\n        return [ cls, props.inputClass ]\n      }\n\n      cls += ' q-field__input--padding'\n\n      return props.inputClass === void 0\n        ? cls\n        : [ cls, props.inputClass ]\n    })\n\n    const menuContentClass = computed(() =>\n      (props.virtualScrollHorizontal === true ? 'q-virtual-scroll--horizontal' : '')\n      + (props.popupContentClass ? ' ' + props.popupContentClass : '')\n    )\n\n    const noOptions = computed(() => virtualScrollLength.value === 0)\n\n    const selectedString = computed(() =>\n      innerValue.value\n        .map(opt => getOptionLabel.value(opt))\n        .join(', ')\n    )\n\n    const ariaCurrentValue = computed(() => (props.displayValue !== void 0\n      ? props.displayValue\n      : selectedString.value\n    ))\n\n    const needsHtmlFn = computed(() => (\n      props.optionsHtml === true\n        ? () => true\n        : opt => opt !== void 0 && opt !== null && opt.html === true\n    ))\n\n    const valueAsHtml = computed(() => (\n      props.displayValueHtml === true || (\n        props.displayValue === void 0 && (\n          props.optionsHtml === true\n          || innerValue.value.some(needsHtmlFn.value)\n        )\n      )\n    ))\n\n    const tabindex = computed(() => (state.focused.value === true ? props.tabindex : -1))\n\n    const comboboxAttrs = computed(() => {\n      const attrs = {\n        tabindex: props.tabindex,\n        role: 'combobox',\n        'aria-label': props.label,\n        'aria-readonly': props.readonly === true ? 'true' : 'false',\n        'aria-autocomplete': props.useInput === true ? 'list' : 'none',\n        'aria-expanded': menu.value === true ? 'true' : 'false',\n        'aria-controls': `${ state.targetUid.value }_lb`\n      }\n\n      if (optionIndex.value >= 0) {\n        attrs[ 'aria-activedescendant' ] = `${ state.targetUid.value }_${ optionIndex.value }`\n      }\n\n      return attrs\n    })\n\n    const listboxAttrs = computed(() => ({\n      id: `${ state.targetUid.value }_lb`,\n      role: 'listbox',\n      'aria-multiselectable': props.multiple === true ? 'true' : 'false'\n    }))\n\n    const selectedScope = computed(() => {\n      return innerValue.value.map((opt, i) => ({\n        index: i,\n        opt,\n        html: needsHtmlFn.value(opt),\n        selected: true,\n        removeAtIndex: removeAtIndexAndFocus,\n        toggleOption,\n        tabindex: tabindex.value\n      }))\n    })\n\n    const optionScope = computed(() => {\n      if (virtualScrollLength.value === 0) {\n        return []\n      }\n\n      const { from, to } = virtualScrollSliceRange.value\n\n      return props.options.slice(from, to).map((opt, i) => {\n        const disable = isOptionDisabled.value(opt) === true\n        const active = isOptionSelected(opt) === true\n        const index = from + i\n\n        const itemProps = {\n          clickable: true,\n          active,\n          activeClass: computedOptionsSelectedClass.value,\n          manualFocus: true,\n          focused: false,\n          disable,\n          tabindex: -1,\n          dense: props.optionsDense,\n          dark: isOptionsDark.value,\n          role: 'option',\n          'aria-selected': active === true ? 'true' : 'false',\n          id: `${ state.targetUid.value }_${ index }`,\n          onClick: () => { toggleOption(opt) }\n        }\n\n        if (disable !== true) {\n          optionIndex.value === index && (itemProps.focused = true)\n\n          if ($q.platform.is.desktop === true) {\n            itemProps.onMousemove = () => { menu.value === true && setOptionIndex(index) }\n          }\n        }\n\n        return {\n          index,\n          opt,\n          html: needsHtmlFn.value(opt),\n          label: getOptionLabel.value(opt),\n          selected: itemProps.active,\n          focused: itemProps.focused,\n          toggleOption,\n          setOptionIndex,\n          itemProps\n        }\n      })\n    })\n\n    const dropdownArrowIcon = computed(() => (\n      props.dropdownIcon !== void 0\n        ? props.dropdownIcon\n        : $q.iconSet.arrow.dropdown\n    ))\n\n    const squaredMenu = computed(() =>\n      props.optionsCover === false\n      && props.outlined !== true\n      && props.standout !== true\n      && props.borderless !== true\n      && props.rounded !== true\n    )\n\n    const computedOptionsSelectedClass = computed(() => (\n      props.optionsSelectedClass !== void 0\n        ? props.optionsSelectedClass\n        : (props.color !== void 0 ? `text-${ props.color }` : '')\n    ))\n\n    // returns method to get value of an option;\n    // takes into account 'option-value' prop\n    const getOptionValue = computed(() => getPropValueFn(props.optionValue, 'value'))\n\n    // returns method to get label of an option;\n    // takes into account 'option-label' prop\n    const getOptionLabel = computed(() => getPropValueFn(props.optionLabel, 'label'))\n\n    // returns method to tell if an option is disabled;\n    // takes into account 'option-disable' prop\n    const isOptionDisabled = computed(() => getPropValueFn(props.optionDisable, 'disable'))\n\n    const innerOptionsValue = computed(() => innerValue.value.map(opt => getOptionValue.value(opt)))\n\n    const inputControlEvents = computed(() => {\n      const evt = {\n        onInput,\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        onChange: onComposition,\n        onKeydown: onTargetKeydown,\n        onKeyup: onTargetAutocomplete,\n        onKeypress: onTargetKeypress,\n        onFocus: selectInputText,\n        onClick (e) { hasDialog === true && stop(e) }\n      }\n\n      evt.onCompositionstart = evt.onCompositionupdate = evt.onCompositionend = onComposition\n\n      return evt\n    })\n\n    watch(innerValue, val => {\n      innerValueCache = val\n\n      if (\n        props.useInput === true\n        && props.fillInput === true\n        && props.multiple !== true\n        // Prevent re-entering in filter while filtering\n        // Also prevent clearing inputValue while filtering\n        && state.innerLoading.value !== true\n        && ((dialog.value !== true && menu.value !== true) || hasValue.value !== true)\n      ) {\n        userInputValue !== true && resetInputValue()\n        if (dialog.value === true || menu.value === true) {\n          filter('')\n        }\n      }\n    }, { immediate: true })\n\n    watch(() => props.fillInput, resetInputValue)\n\n    watch(menu, updateMenu)\n\n    watch(virtualScrollLength, rerenderMenu)\n\n    function getEmittingOptionValue (opt) {\n      return props.emitValue === true\n        ? getOptionValue.value(opt)\n        : opt\n    }\n\n    function removeAtIndex (index) {\n      if (index > -1 && index < innerValue.value.length) {\n        if (props.multiple === true) {\n          const model = props.modelValue.slice()\n          emit('remove', { index, value: model.splice(index, 1)[ 0 ] })\n          emit('update:modelValue', model)\n        }\n        else {\n          emit('update:modelValue', null)\n        }\n      }\n    }\n\n    function removeAtIndexAndFocus (index) {\n      removeAtIndex(index)\n      state.focus()\n    }\n\n    function add (opt, unique) {\n      const val = getEmittingOptionValue(opt)\n\n      if (props.multiple !== true) {\n        props.fillInput === true && updateInputValue(\n          getOptionLabel.value(opt),\n          true,\n          true\n        )\n\n        emit('update:modelValue', val)\n        return\n      }\n\n      if (innerValue.value.length === 0) {\n        emit('add', { index: 0, value: val })\n        emit('update:modelValue', props.multiple === true ? [ val ] : val)\n        return\n      }\n\n      if (unique === true && isOptionSelected(opt) === true) {\n        return\n      }\n\n      if (props.maxValues !== void 0 && props.modelValue.length >= props.maxValues) {\n        return\n      }\n\n      const model = props.modelValue.slice()\n\n      emit('add', { index: model.length, value: val })\n      model.push(val)\n      emit('update:modelValue', model)\n    }\n\n    function toggleOption (opt, keepOpen) {\n      if (state.editable.value !== true || opt === void 0 || isOptionDisabled.value(opt) === true) {\n        return\n      }\n\n      const optValue = getOptionValue.value(opt)\n\n      if (props.multiple !== true) {\n        if (keepOpen !== true) {\n          updateInputValue(\n            props.fillInput === true ? getOptionLabel.value(opt) : '',\n            true,\n            true\n          )\n\n          hidePopup()\n        }\n\n        targetRef.value !== null && targetRef.value.focus()\n\n        if (\n          innerValue.value.length === 0\n          || isDeepEqual(getOptionValue.value(innerValue.value[ 0 ]), optValue) !== true\n        ) {\n          emit('update:modelValue', props.emitValue === true ? optValue : opt)\n        }\n        return\n      }\n\n      (hasDialog !== true || dialogFieldFocused.value === true) && state.focus()\n\n      selectInputText()\n\n      if (innerValue.value.length === 0) {\n        const val = props.emitValue === true ? optValue : opt\n        emit('add', { index: 0, value: val })\n        emit('update:modelValue', props.multiple === true ? [ val ] : val)\n        return\n      }\n\n      const\n        model = props.modelValue.slice(),\n        index = innerOptionsValue.value.findIndex(v => isDeepEqual(v, optValue))\n\n      if (index > -1) {\n        emit('remove', { index, value: model.splice(index, 1)[ 0 ] })\n      }\n      else {\n        if (props.maxValues !== void 0 && model.length >= props.maxValues) {\n          return\n        }\n\n        const val = props.emitValue === true ? optValue : opt\n\n        emit('add', { index: model.length, value: val })\n        model.push(val)\n      }\n\n      emit('update:modelValue', model)\n    }\n\n    function setOptionIndex (index) {\n      if ($q.platform.is.desktop !== true) { return }\n\n      const val = index > -1 && index < virtualScrollLength.value\n        ? index\n        : -1\n\n      if (optionIndex.value !== val) {\n        optionIndex.value = val\n      }\n    }\n\n    function moveOptionSelection (offset = 1, skipInputValue) {\n      if (menu.value === true) {\n        let index = optionIndex.value\n        do {\n          index = normalizeToInterval(\n            index + offset,\n            -1,\n            virtualScrollLength.value - 1\n          )\n        }\n        while (index !== -1 && index !== optionIndex.value && isOptionDisabled.value(props.options[ index ]) === true)\n\n        if (optionIndex.value !== index) {\n          setOptionIndex(index)\n          scrollTo(index)\n\n          if (skipInputValue !== true && props.useInput === true && props.fillInput === true) {\n            setInputValue(\n              index >= 0\n                ? getOptionLabel.value(props.options[ index ])\n                : defaultInputValue,\n              true\n            )\n          }\n        }\n      }\n    }\n\n    function getOption (value, valueCache) {\n      const fn = opt => isDeepEqual(getOptionValue.value(opt), value)\n      return props.options.find(fn) || valueCache.find(fn) || value\n    }\n\n    function getPropValueFn (propValue, defaultVal) {\n      const val = propValue !== void 0\n        ? propValue\n        : defaultVal\n\n      return typeof val === 'function'\n        ? val\n        : opt => (opt !== null && typeof opt === 'object' && val in opt ? opt[ val ] : opt)\n    }\n\n    function isOptionSelected (opt) {\n      const val = getOptionValue.value(opt)\n      return innerOptionsValue.value.find(v => isDeepEqual(v, val)) !== void 0\n    }\n\n    function selectInputText (e) {\n      if (\n        props.useInput === true\n        && targetRef.value !== null\n        && (e === void 0 || (targetRef.value === e.target && e.target.value === selectedString.value))\n      ) {\n        targetRef.value.select()\n      }\n    }\n\n    function onTargetKeyup (e) {\n      // if ESC and we have an opened menu\n      // then stop propagation (might be caught by a QDialog\n      // and so it will also close the QDialog, which is wrong)\n      if (isKeyCode(e, 27) === true && menu.value === true) {\n        stop(e)\n        // on ESC we need to close the dialog also\n        hidePopup()\n        resetInputValue()\n      }\n\n      emit('keyup', e)\n    }\n\n    function onTargetAutocomplete (e) {\n      const { value } = e.target\n\n      if (e.keyCode !== void 0) {\n        onTargetKeyup(e)\n        return\n      }\n\n      e.target.value = ''\n\n      if (filterTimer !== null) {\n        clearTimeout(filterTimer)\n        filterTimer = null\n      }\n      if (inputValueTimer !== null) {\n        clearTimeout(inputValueTimer)\n        inputValueTimer = null\n      }\n\n      resetInputValue()\n\n      if (typeof value === 'string' && value.length !== 0) {\n        const needle = value.toLocaleLowerCase()\n        const findFn = extractFn => {\n          const option = props.options.find(opt => extractFn.value(opt).toLocaleLowerCase() === needle)\n\n          if (option === void 0) {\n            return false\n          }\n\n          if (innerValue.value.indexOf(option) === -1) {\n            toggleOption(option)\n          }\n          else {\n            hidePopup()\n          }\n\n          return true\n        }\n        const fillFn = afterFilter => {\n          if (findFn(getOptionValue) === true) {\n            return\n          }\n          if (findFn(getOptionLabel) === true || afterFilter === true) {\n            return\n          }\n\n          filter(value, true, () => fillFn(true))\n        }\n\n        fillFn()\n      }\n      else {\n        state.clearValue(e)\n      }\n    }\n\n    function onTargetKeypress (e) {\n      emit('keypress', e)\n    }\n\n    function onTargetKeydown (e) {\n      emit('keydown', e)\n\n      if (shouldIgnoreKey(e) === true) {\n        return\n      }\n\n      const newValueModeValid = inputValue.value.length !== 0\n        && (props.newValueMode !== void 0 || props.onNewValue !== void 0)\n\n      const tabShouldSelect = e.shiftKey !== true\n        && props.multiple !== true\n        && (optionIndex.value > -1 || newValueModeValid === true)\n\n      // escape\n      if (e.keyCode === 27) {\n        prevent(e) // prevent clearing the inputValue\n        return\n      }\n\n      // tab\n      if (e.keyCode === 9 && tabShouldSelect === false) {\n        closeMenu()\n        return\n      }\n\n      if (\n        e.target === void 0\n        || e.target.id !== state.targetUid.value\n        || state.editable.value !== true\n      ) { return }\n\n      // down\n      if (\n        e.keyCode === 40\n        && state.innerLoading.value !== true\n        && menu.value === false\n      ) {\n        stopAndPrevent(e)\n        showPopup()\n        return\n      }\n\n      // backspace\n      if (\n        e.keyCode === 8\n        && (\n          props.useChips === true\n          || props.clearable === true\n        )\n        && props.hideSelected !== true\n        && inputValue.value.length === 0\n      ) {\n        if (props.multiple === true && Array.isArray(props.modelValue) === true) {\n          removeAtIndex(props.modelValue.length - 1)\n        }\n        else if (props.multiple !== true && props.modelValue !== null) {\n          emit('update:modelValue', null)\n        }\n        return\n      }\n\n      // home, end - 36, 35\n      if (\n        (e.keyCode === 35 || e.keyCode === 36)\n        && (typeof inputValue.value !== 'string' || inputValue.value.length === 0)\n      ) {\n        stopAndPrevent(e)\n        optionIndex.value = -1\n        moveOptionSelection(e.keyCode === 36 ? 1 : -1, props.multiple)\n      }\n\n      // pg up, pg down - 33, 34\n      if (\n        (e.keyCode === 33 || e.keyCode === 34)\n        && virtualScrollSliceSizeComputed.value !== void 0\n      ) {\n        stopAndPrevent(e)\n        optionIndex.value = Math.max(\n          -1,\n          Math.min(\n            virtualScrollLength.value,\n            optionIndex.value + (e.keyCode === 33 ? -1 : 1) * virtualScrollSliceSizeComputed.value.view\n          )\n        )\n        moveOptionSelection(e.keyCode === 33 ? 1 : -1, props.multiple)\n      }\n\n      // up, down\n      if (e.keyCode === 38 || e.keyCode === 40) {\n        stopAndPrevent(e)\n        moveOptionSelection(e.keyCode === 38 ? -1 : 1, props.multiple)\n      }\n\n      const optionsLength = virtualScrollLength.value\n\n      // clear search buffer if expired\n      if (searchBuffer === void 0 || searchBufferExp < Date.now()) {\n        searchBuffer = ''\n      }\n\n      // keyboard search when not having use-input\n      if (\n        optionsLength > 0\n        && props.useInput !== true\n        && e.key !== void 0\n        && e.key.length === 1 // printable char\n        && e.altKey === false // not kbd shortcut\n        && e.ctrlKey === false // not kbd shortcut\n        && e.metaKey === false // not kbd shortcut, especially on macOS with Command key\n        && (e.keyCode !== 32 || searchBuffer.length !== 0) // space in middle of search\n      ) {\n        menu.value !== true && showPopup(e)\n\n        const\n          char = e.key.toLocaleLowerCase(),\n          keyRepeat = searchBuffer.length === 1 && searchBuffer[ 0 ] === char\n\n        searchBufferExp = Date.now() + 1500\n        if (keyRepeat === false) {\n          stopAndPrevent(e)\n          searchBuffer += char\n        }\n\n        const searchRe = new RegExp('^' + searchBuffer.split('').map(l => (reEscapeList.indexOf(l) > -1 ? '\\\\' + l : l)).join('.*'), 'i')\n\n        let index = optionIndex.value\n\n        if (keyRepeat === true || index < 0 || searchRe.test(getOptionLabel.value(props.options[ index ])) !== true) {\n          do {\n            index = normalizeToInterval(index + 1, -1, optionsLength - 1)\n          }\n          while (index !== optionIndex.value && (\n            isOptionDisabled.value(props.options[ index ]) === true\n            || searchRe.test(getOptionLabel.value(props.options[ index ])) !== true\n          ))\n        }\n\n        if (optionIndex.value !== index) {\n          nextTick(() => {\n            setOptionIndex(index)\n            scrollTo(index)\n\n            if (index >= 0 && props.useInput === true && props.fillInput === true) {\n              setInputValue(getOptionLabel.value(props.options[ index ]), true)\n            }\n          })\n        }\n\n        return\n      }\n\n      // enter, space (when not using use-input and not in search), or tab (when not using multiple and option selected)\n      // same target is checked above\n      if (\n        e.keyCode !== 13\n        && (e.keyCode !== 32 || props.useInput === true || searchBuffer !== '')\n        && (e.keyCode !== 9 || tabShouldSelect === false)\n      ) { return }\n\n      e.keyCode !== 9 && stopAndPrevent(e)\n\n      if (optionIndex.value > -1 && optionIndex.value < optionsLength) {\n        toggleOption(props.options[ optionIndex.value ])\n        return\n      }\n\n      if (newValueModeValid === true) {\n        const done = (val, mode) => {\n          if (mode) {\n            if (validateNewValueMode(mode) !== true) {\n              return\n            }\n          }\n          else {\n            mode = props.newValueMode\n          }\n\n          updateInputValue('', props.multiple !== true, true)\n\n          if (val === void 0 || val === null) {\n            return\n          }\n\n          const fn = mode === 'toggle' ? toggleOption : add\n          fn(val, mode === 'add-unique')\n\n          if (props.multiple !== true) {\n            targetRef.value !== null && targetRef.value.focus()\n            hidePopup()\n          }\n        }\n\n        if (props.onNewValue !== void 0) {\n          emit('newValue', inputValue.value, done)\n        }\n        else {\n          done(inputValue.value)\n        }\n\n        if (props.multiple !== true) {\n          return\n        }\n      }\n\n      if (menu.value === true) {\n        closeMenu()\n      }\n      else if (state.innerLoading.value !== true) {\n        showPopup()\n      }\n    }\n\n    function getVirtualScrollEl () {\n      return hasDialog === true\n        ? menuContentRef.value\n        : (\n            menuRef.value !== null && menuRef.value.contentEl !== null\n              ? menuRef.value.contentEl\n              : void 0\n          )\n    }\n\n    function getVirtualScrollTarget () {\n      return getVirtualScrollEl()\n    }\n\n    function getSelection () {\n      if (props.hideSelected === true) {\n        return []\n      }\n\n      if (slots[ 'selected-item' ] !== void 0) {\n        return selectedScope.value.map(scope => slots[ 'selected-item' ](scope)).slice()\n      }\n\n      if (slots.selected !== void 0) {\n        return [].concat(slots.selected())\n      }\n\n      if (props.useChips === true) {\n        return selectedScope.value.map((scope, i) => h(QChip, {\n          key: 'option-' + i,\n          removable: state.editable.value === true && isOptionDisabled.value(scope.opt) !== true,\n          dense: true,\n          textColor: props.color,\n          tabindex: tabindex.value,\n          onRemove () { scope.removeAtIndex(i) }\n        }, () => h('span', {\n          class: 'ellipsis',\n          [ scope.html === true ? 'innerHTML' : 'textContent' ]: getOptionLabel.value(scope.opt)\n        })))\n      }\n\n      return [\n        h('span', {\n          [ valueAsHtml.value === true ? 'innerHTML' : 'textContent' ]: ariaCurrentValue.value\n        })\n      ]\n    }\n\n    function getAllOptions () {\n      if (noOptions.value === true) {\n        return slots[ 'no-option' ] !== void 0\n          ? slots[ 'no-option' ]({ inputValue: inputValue.value })\n          : void 0\n      }\n\n      const fn = slots.option !== void 0\n        ? slots.option\n        : scope => {\n          return h(QItem, {\n            key: scope.index,\n            ...scope.itemProps\n          }, () => {\n            return h(\n              QItemSection,\n              () => h(\n                QItemLabel,\n                () => h('span', {\n                  [ scope.html === true ? 'innerHTML' : 'textContent' ]: scope.label\n                })\n              )\n            )\n          })\n        }\n\n      let options = padVirtualScroll('div', optionScope.value.map(fn))\n\n      if (slots[ 'before-options' ] !== void 0) {\n        options = slots[ 'before-options' ]().concat(options)\n      }\n\n      return hMergeSlot(slots[ 'after-options' ], options)\n    }\n\n    function getInput (fromDialog, isTarget) {\n      const attrs = isTarget === true ? { ...comboboxAttrs.value, ...state.splitAttrs.attributes.value } : void 0\n\n      const data = {\n        ref: isTarget === true ? targetRef : void 0,\n        key: 'i_t',\n        class: computedInputClass.value,\n        style: props.inputStyle,\n        value: inputValue.value !== void 0 ? inputValue.value : '',\n        // required for Android in order to show ENTER key when in form\n        type: 'search',\n        ...attrs,\n        id: isTarget === true ? state.targetUid.value : void 0,\n        maxlength: props.maxlength,\n        autocomplete: props.autocomplete,\n        'data-autofocus': fromDialog === true || props.autofocus === true || void 0,\n        disabled: props.disable === true,\n        readonly: props.readonly === true,\n        ...inputControlEvents.value\n      }\n\n      if (fromDialog !== true && hasDialog === true) {\n        if (Array.isArray(data.class) === true) {\n          data.class = [ ...data.class, 'no-pointer-events' ]\n        }\n        else {\n          data.class += ' no-pointer-events'\n        }\n      }\n\n      return h('input', data)\n    }\n\n    function onInput (e) {\n      if (filterTimer !== null) {\n        clearTimeout(filterTimer)\n        filterTimer = null\n      }\n      if (inputValueTimer !== null) {\n        clearTimeout(inputValueTimer)\n        inputValueTimer = null\n      }\n\n      if (e && e.target && e.target.qComposing === true) {\n        return\n      }\n\n      setInputValue(e.target.value || '')\n      // mark it here as user input so that if updateInputValue is called\n      // before filter is called the indicator is reset\n      userInputValue = true\n      defaultInputValue = inputValue.value\n\n      if (\n        state.focused.value !== true\n        && (hasDialog !== true || dialogFieldFocused.value === true)\n      ) {\n        state.focus()\n      }\n\n      if (props.onFilter !== void 0) {\n        filterTimer = setTimeout(() => {\n          filterTimer = null\n          filter(inputValue.value)\n        }, props.inputDebounce)\n      }\n    }\n\n    function setInputValue (val, emitImmediately) {\n      if (inputValue.value !== val) {\n        inputValue.value = val\n\n        if (emitImmediately === true || props.inputDebounce === 0 || props.inputDebounce === '0') {\n          emit('inputValue', val)\n        }\n        else {\n          inputValueTimer = setTimeout(() => {\n            inputValueTimer = null\n            emit('inputValue', val)\n          }, props.inputDebounce)\n        }\n      }\n    }\n\n    function updateInputValue (val, noFiltering, internal) {\n      userInputValue = internal !== true\n\n      if (props.useInput === true) {\n        setInputValue(val, true)\n\n        if (noFiltering === true || internal !== true) {\n          defaultInputValue = val\n        }\n\n        noFiltering !== true && filter(val)\n      }\n    }\n\n    function filter (val, keepClosed, afterUpdateFn) {\n      if (props.onFilter === void 0 || (keepClosed !== true && state.focused.value !== true)) {\n        return\n      }\n\n      if (state.innerLoading.value === true) {\n        emit('filterAbort')\n      }\n      else {\n        state.innerLoading.value = true\n        innerLoadingIndicator.value = true\n      }\n\n      if (\n        val !== ''\n        && props.multiple !== true\n        && innerValue.value.length !== 0\n        && userInputValue !== true\n        && val === getOptionLabel.value(innerValue.value[ 0 ])\n      ) {\n        val = ''\n      }\n\n      const localFilterId = setTimeout(() => {\n        menu.value === true && (menu.value = false)\n      }, 10)\n\n      filterId !== null && clearTimeout(filterId)\n      filterId = localFilterId\n\n      emit(\n        'filter',\n        val,\n        (fn, afterFn) => {\n          if ((keepClosed === true || state.focused.value === true) && filterId === localFilterId) {\n            clearTimeout(filterId)\n\n            typeof fn === 'function' && fn()\n\n            // hide indicator to allow arrow to animate\n            innerLoadingIndicator.value = false\n\n            nextTick(() => {\n              state.innerLoading.value = false\n\n              if (state.editable.value === true) {\n                if (keepClosed === true) {\n                  menu.value === true && hidePopup()\n                }\n                else if (menu.value === true) {\n                  updateMenu(true)\n                }\n                else {\n                  menu.value = true\n                }\n              }\n\n              typeof afterFn === 'function' && nextTick(() => { afterFn(proxy) })\n              typeof afterUpdateFn === 'function' && nextTick(() => { afterUpdateFn(proxy) })\n            })\n          }\n        },\n        () => {\n          if (state.focused.value === true && filterId === localFilterId) {\n            clearTimeout(filterId)\n            state.innerLoading.value = false\n            innerLoadingIndicator.value = false\n          }\n          menu.value === true && (menu.value = false)\n        }\n      )\n    }\n\n    function getMenu () {\n      return h(QMenu, {\n        ref: menuRef,\n        class: menuContentClass.value,\n        style: props.popupContentStyle,\n        modelValue: menu.value,\n        fit: props.menuShrink !== true,\n        cover: props.optionsCover === true && noOptions.value !== true && props.useInput !== true,\n        anchor: props.menuAnchor,\n        self: props.menuSelf,\n        offset: props.menuOffset,\n        dark: isOptionsDark.value,\n        noParentEvent: true,\n        noRefocus: true,\n        noFocus: true,\n        square: squaredMenu.value,\n        transitionShow: props.transitionShow,\n        transitionHide: props.transitionHide,\n        transitionDuration: props.transitionDuration,\n        separateClosePopup: true,\n        ...listboxAttrs.value,\n        onScrollPassive: onVirtualScrollEvt,\n        onBeforeShow: onControlPopupShow,\n        onBeforeHide: onMenuBeforeHide,\n        onShow: onMenuShow\n      }, getAllOptions)\n    }\n\n    function onMenuBeforeHide (e) {\n      onControlPopupHide(e)\n      closeMenu()\n    }\n\n    function onMenuShow () {\n      setVirtualScrollSize()\n    }\n\n    function onDialogFieldFocus (e) {\n      stop(e)\n      targetRef.value !== null && targetRef.value.focus()\n      dialogFieldFocused.value = true\n      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, 0)\n    }\n\n    function onDialogFieldBlur (e) {\n      stop(e)\n      nextTick(() => {\n        dialogFieldFocused.value = false\n      })\n    }\n\n    function getDialog () {\n      const content = [\n        h(QField, {\n          class: `col-auto ${ state.fieldClass.value }`,\n          ...innerFieldProps.value,\n          for: state.targetUid.value,\n          dark: isOptionsDark.value,\n          square: true,\n          loading: innerLoadingIndicator.value,\n          itemAligned: false,\n          filled: true,\n          stackLabel: inputValue.value.length !== 0,\n          ...state.splitAttrs.listeners.value,\n          onFocus: onDialogFieldFocus,\n          onBlur: onDialogFieldBlur\n        }, {\n          ...slots,\n          rawControl: () => state.getControl(true),\n          before: void 0,\n          after: void 0\n        })\n      ]\n\n      menu.value === true && content.push(\n        h('div', {\n          ref: menuContentRef,\n          class: menuContentClass.value + ' scroll',\n          style: props.popupContentStyle,\n          ...listboxAttrs.value,\n          onClick: prevent,\n          onScrollPassive: onVirtualScrollEvt\n        }, getAllOptions())\n      )\n\n      return h(QDialog, {\n        ref: dialogRef,\n        modelValue: dialog.value,\n        position: props.useInput === true ? 'top' : void 0,\n        transitionShow: transitionShowComputed,\n        transitionHide: props.transitionHide,\n        transitionDuration: props.transitionDuration,\n        onBeforeShow: onControlPopupShow,\n        onBeforeHide: onDialogBeforeHide,\n        onHide: onDialogHide,\n        onShow: onDialogShow\n      }, () => h('div', {\n        class: 'q-select__dialog'\n          + (isOptionsDark.value === true ? ' q-select__dialog--dark q-dark' : '')\n          + (dialogFieldFocused.value === true ? ' q-select__dialog--focused' : '')\n      }, content))\n    }\n\n    function onDialogBeforeHide (e) {\n      onControlPopupHide(e)\n\n      if (dialogRef.value !== null) {\n        dialogRef.value.__updateRefocusTarget(\n          state.rootRef.value.querySelector('.q-field__native > [tabindex]:last-child')\n        )\n      }\n\n      state.focused.value = false\n    }\n\n    function onDialogHide (e) {\n      hidePopup()\n      state.focused.value === false && emit('blur', e)\n      resetInputValue()\n    }\n\n    function onDialogShow () {\n      const el = document.activeElement\n      if (\n        (el === null || el.id !== state.targetUid.value)\n        && targetRef.value !== null\n        && targetRef.value !== el\n      ) {\n        targetRef.value.focus()\n      }\n\n      setVirtualScrollSize()\n    }\n\n    function closeMenu () {\n      if (dialog.value === true) {\n        return\n      }\n\n      optionIndex.value = -1\n\n      if (menu.value === true) {\n        menu.value = false\n      }\n\n      if (state.focused.value === false) {\n        if (filterId !== null) {\n          clearTimeout(filterId)\n          filterId = null\n        }\n\n        if (state.innerLoading.value === true) {\n          emit('filterAbort')\n          state.innerLoading.value = false\n          innerLoadingIndicator.value = false\n        }\n      }\n    }\n\n    function showPopup (e) {\n      if (state.editable.value !== true) {\n        return\n      }\n\n      if (hasDialog === true) {\n        state.onControlFocusin(e)\n        dialog.value = true\n        nextTick(() => {\n          state.focus()\n        })\n      }\n      else {\n        state.focus()\n      }\n\n      if (props.onFilter !== void 0) {\n        filter(inputValue.value)\n      }\n      else if (noOptions.value !== true || slots[ 'no-option' ] !== void 0) {\n        menu.value = true\n      }\n    }\n\n    function hidePopup () {\n      dialog.value = false\n      closeMenu()\n    }\n\n    function resetInputValue () {\n      props.useInput === true && updateInputValue(\n        props.multiple !== true && props.fillInput === true && innerValue.value.length !== 0\n          ? getOptionLabel.value(innerValue.value[ 0 ]) || ''\n          : '',\n        true,\n        true\n      )\n    }\n\n    function updateMenu (show) {\n      let optionIndex = -1\n\n      if (show === true) {\n        if (innerValue.value.length !== 0) {\n          const val = getOptionValue.value(innerValue.value[ 0 ])\n          optionIndex = props.options.findIndex(v => isDeepEqual(getOptionValue.value(v), val))\n        }\n\n        localResetVirtualScroll(optionIndex)\n      }\n\n      setOptionIndex(optionIndex)\n    }\n\n    function rerenderMenu (newLength, oldLength) {\n      if (menu.value === true && state.innerLoading.value === false) {\n        localResetVirtualScroll(-1, true)\n\n        nextTick(() => {\n          if (menu.value === true && state.innerLoading.value === false) {\n            if (newLength > oldLength) {\n              localResetVirtualScroll()\n            }\n            else {\n              updateMenu(true)\n            }\n          }\n        })\n      }\n    }\n\n    function updateMenuPosition () {\n      if (dialog.value === false && menuRef.value !== null) {\n        menuRef.value.updatePosition()\n      }\n    }\n\n    function onControlPopupShow (e) {\n      e !== void 0 && stop(e)\n      emit('popupShow', e)\n      state.hasPopupOpen = true\n      state.onControlFocusin(e)\n    }\n\n    function onControlPopupHide (e) {\n      e !== void 0 && stop(e)\n      emit('popupHide', e)\n      state.hasPopupOpen = false\n      state.onControlFocusout(e)\n    }\n\n    function updatePreState () {\n      hasDialog = $q.platform.is.mobile !== true && props.behavior !== 'dialog'\n        ? false\n        : props.behavior !== 'menu' && (\n          props.useInput === true\n            ? slots[ 'no-option' ] !== void 0 || props.onFilter !== void 0 || noOptions.value === false\n            : true\n        )\n\n      transitionShowComputed = $q.platform.is.ios === true && hasDialog === true && props.useInput === true\n        ? 'fade'\n        : props.transitionShow\n    }\n\n    onBeforeUpdate(updatePreState)\n    onUpdated(updateMenuPosition)\n\n    updatePreState()\n\n    onBeforeUnmount(() => {\n      filterTimer !== null && clearTimeout(filterTimer)\n      inputValueTimer !== null && clearTimeout(inputValueTimer)\n    })\n\n    // expose public methods\n    Object.assign(proxy, {\n      showPopup, hidePopup,\n      removeAtIndex, add, toggleOption,\n      getOptionIndex: () => optionIndex.value,\n      setOptionIndex, moveOptionSelection,\n      filter, updateMenuPosition, updateInputValue,\n      isOptionSelected,\n      getEmittingOptionValue,\n      isOptionDisabled: (...args) => isOptionDisabled.value.apply(null, args) === true,\n      getOptionValue: (...args) => getOptionValue.value.apply(null, args),\n      getOptionLabel: (...args) => getOptionLabel.value.apply(null, args)\n    })\n\n    Object.assign(state, {\n      innerValue,\n\n      fieldClass: computed(() =>\n        `q-select q-field--auto-height q-select--with${ props.useInput !== true ? 'out' : '' }-input`\n        + ` q-select--with${ props.useChips !== true ? 'out' : '' }-chips`\n        + ` q-select--${ props.multiple === true ? 'multiple' : 'single' }`\n      ),\n\n      inputRef,\n      targetRef,\n      hasValue,\n      showPopup,\n\n      floatingLabel: computed(() =>\n        (props.hideSelected !== true && hasValue.value === true)\n        || typeof inputValue.value === 'number'\n        || inputValue.value.length !== 0\n        || fieldValueIsFilled(props.displayValue)\n      ),\n\n      getControlChild: () => {\n        if (\n          state.editable.value !== false && (\n            dialog.value === true // dialog always has menu displayed, so need to render it\n            || noOptions.value !== true\n            || slots[ 'no-option' ] !== void 0\n          )\n        ) {\n          return hasDialog === true ? getDialog() : getMenu()\n        }\n        else if (state.hasPopupOpen === true) {\n          // explicitly set it otherwise TAB will not blur component\n          state.hasPopupOpen = false\n        }\n      },\n\n      controlEvents: {\n        onFocusin (e) { state.onControlFocusin(e) },\n        onFocusout (e) {\n          state.onControlFocusout(e, () => {\n            resetInputValue()\n            closeMenu()\n          })\n        },\n        onClick (e) {\n          // label from QField will propagate click on the input\n          prevent(e)\n\n          if (hasDialog !== true && menu.value === true) {\n            closeMenu()\n            targetRef.value !== null && targetRef.value.focus()\n            return\n          }\n\n          showPopup(e)\n        }\n      },\n\n      getControl: fromDialog => {\n        const child = getSelection()\n        const isTarget = fromDialog === true || dialog.value !== true || hasDialog !== true\n\n        if (props.useInput === true) {\n          child.push(getInput(fromDialog, isTarget))\n        }\n        // there can be only one (when dialog is opened the control in dialog should be target)\n        else if (state.editable.value === true) {\n          const attrs = isTarget === true ? comboboxAttrs.value : void 0\n\n          child.push(\n            h('input', {\n              ref: isTarget === true ? targetRef : void 0,\n              key: 'd_t',\n              class: 'q-select__focus-target',\n              id: isTarget === true ? state.targetUid.value : void 0,\n              value: ariaCurrentValue.value,\n              readonly: true,\n              'data-autofocus': fromDialog === true || props.autofocus === true || void 0,\n              ...attrs,\n              onKeydown: onTargetKeydown,\n              onKeyup: onTargetKeyup,\n              onKeypress: onTargetKeypress\n            })\n          )\n\n          if (isTarget === true && typeof props.autocomplete === 'string' && props.autocomplete.length !== 0) {\n            child.push(\n              h('input', {\n                class: 'q-select__autocomplete-input',\n                autocomplete: props.autocomplete,\n                tabindex: -1,\n                onKeyup: onTargetAutocomplete\n              })\n            )\n          }\n        }\n\n        if (nameProp.value !== void 0 && props.disable !== true && innerOptionsValue.value.length !== 0) {\n          const opts = innerOptionsValue.value.map(value => h('option', { value, selected: true }))\n\n          child.push(\n            h('select', {\n              class: 'hidden',\n              name: nameProp.value,\n              multiple: props.multiple\n            }, opts)\n          )\n        }\n\n        const attrs = props.useInput === true || isTarget !== true ? void 0 : state.splitAttrs.attributes.value\n\n        return h('div', {\n          class: 'q-field__native row items-center',\n          ...attrs,\n          ...state.splitAttrs.listeners.value\n        }, child)\n      },\n\n      getInnerAppend: () => (\n        props.loading !== true && innerLoadingIndicator.value !== true && props.hideDropdownIcon !== true\n          ? [\n              h(QIcon, {\n                class: 'q-select__dropdown-icon' + (menu.value === true ? ' rotate-180' : ''),\n                name: dropdownArrowIcon.value\n              })\n            ]\n          : null\n      )\n    })\n\n    return useField(state)\n  }\n})\n",
      "start": 1703982896469,
      "end": 1703982896542,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896542,
      "end": 1703982896542,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896542,
      "end": 1703982896543,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896543,
      "end": 1703982896543,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896543,
      "end": 1703982896543,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703982896543,
      "end": 1703982896543,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703982896543,
      "end": 1703982896543,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896543,
      "end": 1703982896543,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896543,
      "end": 1703982896543,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896543,
      "end": 1703982896543,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896543,
      "end": 1703982896547,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896547,
      "end": 1703982896547,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896547,
      "end": 1703982896547,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896547,
      "end": 1703982896547,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896547,
      "end": 1703982896547,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896547,
      "end": 1703982896547,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896547,
      "end": 1703982896547,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896547,
      "end": 1703982896547,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896547,
      "end": 1703982896547,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896548,
      "end": 1703982896548,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896548,
      "end": 1703982896548,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896548,
      "end": 1703982896548,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896548,
      "end": 1703982896548,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896548,
      "end": 1703982896548,
      "order": "normal"
    }
  ]
}
