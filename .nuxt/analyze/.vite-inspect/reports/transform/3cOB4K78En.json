{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/components/img/QImg.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h, ref, computed, watch, onMounted, onBeforeUnmount, Transition } from 'vue'\n\nimport QSpinner from '../spinner/QSpinner.js'\n\nimport useRatio, { useRatioProps } from '../../composables/private/use-ratio.js'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { hSlot } from '../../utils/private/render.js'\n\nconst defaultRatio = 16 / 9\n\nexport default createComponent({\n  name: 'QImg',\n\n  props: {\n    ...useRatioProps,\n\n    src: String,\n    srcset: String,\n    sizes: String,\n\n    alt: String,\n    crossorigin: String,\n    decoding: String,\n    referrerpolicy: String,\n\n    draggable: Boolean,\n\n    loading: {\n      type: String,\n      default: 'lazy'\n    },\n    fetchpriority: {\n      type: String,\n      default: 'auto'\n    },\n    width: String,\n    height: String,\n    initialRatio: {\n      type: [ Number, String ],\n      default: defaultRatio\n    },\n\n    placeholderSrc: String,\n\n    fit: {\n      type: String,\n      default: 'cover'\n    },\n    position: {\n      type: String,\n      default: '50% 50%'\n    },\n\n    imgClass: String,\n    imgStyle: Object,\n\n    noSpinner: Boolean,\n    noNativeMenu: Boolean,\n    noTransition: Boolean,\n\n    spinnerColor: String,\n    spinnerSize: String\n  },\n\n  emits: [ 'load', 'error' ],\n\n  setup (props, { slots, emit }) {\n    const naturalRatio = ref(props.initialRatio)\n    const ratioStyle = useRatio(props, naturalRatio)\n\n    let loadTimer = null, isDestroyed = false\n\n    const images = [\n      ref(null),\n      ref(getPlaceholderSrc())\n    ]\n\n    const position = ref(0)\n\n    const isLoading = ref(false)\n    const hasError = ref(false)\n\n    const classes = computed(() =>\n      `q-img q-img--${ props.noNativeMenu === true ? 'no-' : '' }menu`\n    )\n\n    const style = computed(() => ({\n      width: props.width,\n      height: props.height\n    }))\n\n    const imgClass = computed(() =>\n      `q-img__image ${ props.imgClass !== void 0 ? props.imgClass + ' ' : '' }`\n      + `q-img__image--with${ props.noTransition === true ? 'out' : '' }-transition`\n    )\n\n    const imgStyle = computed(() => ({\n      ...props.imgStyle,\n      objectFit: props.fit,\n      objectPosition: props.position\n    }))\n\n    watch(() => getCurrentSrc(), addImage)\n\n    function getCurrentSrc () {\n      return props.src || props.srcset || props.sizes\n        ? {\n            src: props.src,\n            srcset: props.srcset,\n            sizes: props.sizes\n          }\n        : null\n    }\n\n    function getPlaceholderSrc () {\n      return props.placeholderSrc !== void 0\n        ? { src: props.placeholderSrc }\n        : null\n    }\n\n    function addImage (imgProps) {\n      if (loadTimer !== null) {\n        clearTimeout(loadTimer)\n        loadTimer = null\n      }\n\n      hasError.value = false\n\n      if (imgProps === null) {\n        isLoading.value = false\n        images[ position.value ^ 1 ].value = getPlaceholderSrc()\n      }\n      else {\n        isLoading.value = true\n      }\n\n      images[ position.value ].value = imgProps\n    }\n\n    function onLoad ({ target }) {\n      if (isDestroyed === true) { return }\n\n      if (loadTimer !== null) {\n        clearTimeout(loadTimer)\n        loadTimer = null\n      }\n\n      naturalRatio.value = target.naturalHeight === 0\n        ? 0.5\n        : target.naturalWidth / target.naturalHeight\n\n      waitForCompleteness(target, 1)\n    }\n\n    function waitForCompleteness (target, count) {\n      // protect against running forever\n      if (isDestroyed === true || count === 1000) { return }\n\n      if (target.complete === true) {\n        onReady(target)\n      }\n      else {\n        loadTimer = setTimeout(() => {\n          loadTimer = null\n          waitForCompleteness(target, count + 1)\n        }, 50)\n      }\n    }\n\n    function onReady (img) {\n      if (isDestroyed === true) { return }\n\n      position.value = position.value ^ 1\n      images[ position.value ].value = null\n      isLoading.value = false\n      hasError.value = false\n      emit('load', img.currentSrc || img.src)\n    }\n\n    function onError (err) {\n      if (loadTimer !== null) {\n        clearTimeout(loadTimer)\n        loadTimer = null\n      }\n\n      isLoading.value = false\n      hasError.value = true\n      images[ position.value ].value = null\n      images[ position.value ^ 1 ].value = getPlaceholderSrc()\n      emit('error', err)\n    }\n\n    function getImage (index) {\n      const img = images[ index ].value\n\n      const data = {\n        key: 'img_' + index,\n        class: imgClass.value,\n        style: imgStyle.value,\n        crossorigin: props.crossorigin,\n        decoding: props.decoding,\n        referrerpolicy: props.referrerpolicy,\n        height: props.height,\n        width: props.width,\n        loading: props.loading,\n        fetchpriority: props.fetchpriority,\n        'aria-hidden': 'true',\n        draggable: props.draggable,\n        ...img\n      }\n\n      if (position.value === index) {\n        data.class += ' q-img__image--waiting'\n        Object.assign(data, { onLoad, onError })\n      }\n      else {\n        data.class += ' q-img__image--loaded'\n      }\n\n      return h(\n        'div',\n        { class: 'q-img__container absolute-full', key: 'img' + index },\n        h('img', data)\n      )\n    }\n\n    function getContent () {\n      if (isLoading.value !== true) {\n        return h('div', {\n          key: 'content',\n          class: 'q-img__content absolute-full q-anchor--skip'\n        }, hSlot(slots[ hasError.value === true ? 'error' : 'default' ]))\n      }\n\n      return h('div', {\n        key: 'loading',\n        class: 'q-img__loading absolute-full flex flex-center'\n      }, (\n        slots.loading !== void 0\n          ? slots.loading()\n          : (\n              props.noSpinner === true\n                ? void 0\n                : [\n                    h(QSpinner, {\n                      color: props.spinnerColor,\n                      size: props.spinnerSize\n                    })\n                  ]\n            )\n      ))\n    }\n\n    if (__QUASAR_SSR_SERVER__ !== true) {\n      if (__QUASAR_SSR_CLIENT__) {\n        onMounted(() => {\n          addImage(getCurrentSrc())\n        })\n      }\n      else {\n        addImage(getCurrentSrc())\n      }\n\n      onBeforeUnmount(() => {\n        isDestroyed = true\n\n        if (loadTimer !== null) {\n          clearTimeout(loadTimer)\n          loadTimer = null\n        }\n      })\n    }\n\n    return () => {\n      const content = []\n\n      if (ratioStyle.value !== null) {\n        content.push(\n          h('div', { key: 'filler', style: ratioStyle.value })\n        )\n      }\n\n      if (hasError.value !== true) {\n        if (images[ 0 ].value !== null) {\n          content.push(getImage(0))\n        }\n\n        if (images[ 1 ].value !== null) {\n          content.push(getImage(1))\n        }\n      }\n\n      content.push(\n        h(Transition, { name: 'q-transition--fade' }, getContent)\n      )\n\n      return h('div', {\n        class: classes.value,\n        style: style.value,\n        role: 'img',\n        'aria-label': props.alt\n      }, content)\n    }\n  }\n})\n",
      "start": 1703982896281,
      "end": 1703982896415,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896415,
      "end": 1703982896415,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896415,
      "end": 1703982896415,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896415,
      "end": 1703982896415,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896415,
      "end": 1703982896415,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896415,
      "end": 1703982896415,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896415,
      "end": 1703982896415,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896415,
      "end": 1703982896415,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896416,
      "end": 1703982896416,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { h, ref, computed, watch, onMounted, onBeforeUnmount, Transition } from \"vue\";\nimport QSpinner from \"../spinner/QSpinner.js\";\nimport useRatio, { useRatioProps } from \"../../composables/private/use-ratio.js\";\nimport { createComponent } from \"../../utils/private/create.js\";\nimport { hSlot } from \"../../utils/private/render.js\";\nconst defaultRatio = 16 / 9;\nexport default createComponent({\n  name: \"QImg\",\n  props: {\n    ...useRatioProps,\n    src: String,\n    srcset: String,\n    sizes: String,\n    alt: String,\n    crossorigin: String,\n    decoding: String,\n    referrerpolicy: String,\n    draggable: Boolean,\n    loading: {\n      type: String,\n      default: \"lazy\"\n    },\n    fetchpriority: {\n      type: String,\n      default: \"auto\"\n    },\n    width: String,\n    height: String,\n    initialRatio: {\n      type: [Number, String],\n      default: defaultRatio\n    },\n    placeholderSrc: String,\n    fit: {\n      type: String,\n      default: \"cover\"\n    },\n    position: {\n      type: String,\n      default: \"50% 50%\"\n    },\n    imgClass: String,\n    imgStyle: Object,\n    noSpinner: Boolean,\n    noNativeMenu: Boolean,\n    noTransition: Boolean,\n    spinnerColor: String,\n    spinnerSize: String\n  },\n  emits: [\"load\", \"error\"],\n  setup(props, { slots, emit }) {\n    const naturalRatio = ref(props.initialRatio);\n    const ratioStyle = useRatio(props, naturalRatio);\n    let loadTimer = null, isDestroyed = false;\n    const images = [\n      ref(null),\n      ref(getPlaceholderSrc())\n    ];\n    const position = ref(0);\n    const isLoading = ref(false);\n    const hasError = ref(false);\n    const classes = computed(\n      () => `q-img q-img--${props.noNativeMenu === true ? \"no-\" : \"\"}menu`\n    );\n    const style = computed(() => ({\n      width: props.width,\n      height: props.height\n    }));\n    const imgClass = computed(\n      () => `q-img__image ${props.imgClass !== void 0 ? props.imgClass + \" \" : \"\"}q-img__image--with${props.noTransition === true ? \"out\" : \"\"}-transition`\n    );\n    const imgStyle = computed(() => ({\n      ...props.imgStyle,\n      objectFit: props.fit,\n      objectPosition: props.position\n    }));\n    watch(() => getCurrentSrc(), addImage);\n    function getCurrentSrc() {\n      return props.src || props.srcset || props.sizes ? {\n        src: props.src,\n        srcset: props.srcset,\n        sizes: props.sizes\n      } : null;\n    }\n    function getPlaceholderSrc() {\n      return props.placeholderSrc !== void 0 ? { src: props.placeholderSrc } : null;\n    }\n    function addImage(imgProps) {\n      if (loadTimer !== null) {\n        clearTimeout(loadTimer);\n        loadTimer = null;\n      }\n      hasError.value = false;\n      if (imgProps === null) {\n        isLoading.value = false;\n        images[position.value ^ 1].value = getPlaceholderSrc();\n      } else {\n        isLoading.value = true;\n      }\n      images[position.value].value = imgProps;\n    }\n    function onLoad({ target }) {\n      if (isDestroyed === true) {\n        return;\n      }\n      if (loadTimer !== null) {\n        clearTimeout(loadTimer);\n        loadTimer = null;\n      }\n      naturalRatio.value = target.naturalHeight === 0 ? 0.5 : target.naturalWidth / target.naturalHeight;\n      waitForCompleteness(target, 1);\n    }\n    function waitForCompleteness(target, count) {\n      if (isDestroyed === true || count === 1e3) {\n        return;\n      }\n      if (target.complete === true) {\n        onReady(target);\n      } else {\n        loadTimer = setTimeout(() => {\n          loadTimer = null;\n          waitForCompleteness(target, count + 1);\n        }, 50);\n      }\n    }\n    function onReady(img) {\n      if (isDestroyed === true) {\n        return;\n      }\n      position.value = position.value ^ 1;\n      images[position.value].value = null;\n      isLoading.value = false;\n      hasError.value = false;\n      emit(\"load\", img.currentSrc || img.src);\n    }\n    function onError(err) {\n      if (loadTimer !== null) {\n        clearTimeout(loadTimer);\n        loadTimer = null;\n      }\n      isLoading.value = false;\n      hasError.value = true;\n      images[position.value].value = null;\n      images[position.value ^ 1].value = getPlaceholderSrc();\n      emit(\"error\", err);\n    }\n    function getImage(index) {\n      const img = images[index].value;\n      const data = {\n        key: \"img_\" + index,\n        class: imgClass.value,\n        style: imgStyle.value,\n        crossorigin: props.crossorigin,\n        decoding: props.decoding,\n        referrerpolicy: props.referrerpolicy,\n        height: props.height,\n        width: props.width,\n        loading: props.loading,\n        fetchpriority: props.fetchpriority,\n        \"aria-hidden\": \"true\",\n        draggable: props.draggable,\n        ...img\n      };\n      if (position.value === index) {\n        data.class += \" q-img__image--waiting\";\n        Object.assign(data, { onLoad, onError });\n      } else {\n        data.class += \" q-img__image--loaded\";\n      }\n      return h(\n        \"div\",\n        { class: \"q-img__container absolute-full\", key: \"img\" + index },\n        h(\"img\", data)\n      );\n    }\n    function getContent() {\n      if (isLoading.value !== true) {\n        return h(\"div\", {\n          key: \"content\",\n          class: \"q-img__content absolute-full q-anchor--skip\"\n        }, hSlot(slots[hasError.value === true ? \"error\" : \"default\"]));\n      }\n      return h(\"div\", {\n        key: \"loading\",\n        class: \"q-img__loading absolute-full flex flex-center\"\n      }, slots.loading !== void 0 ? slots.loading() : props.noSpinner === true ? void 0 : [\n        h(QSpinner, {\n          color: props.spinnerColor,\n          size: props.spinnerSize\n        })\n      ]);\n    }\n    if (true) {\n      if (true) {\n        onMounted(() => {\n          addImage(getCurrentSrc());\n        });\n      } else {\n        addImage(getCurrentSrc());\n      }\n      onBeforeUnmount(() => {\n        isDestroyed = true;\n        if (loadTimer !== null) {\n          clearTimeout(loadTimer);\n          loadTimer = null;\n        }\n      });\n    }\n    return () => {\n      const content = [];\n      if (ratioStyle.value !== null) {\n        content.push(\n          h(\"div\", { key: \"filler\", style: ratioStyle.value })\n        );\n      }\n      if (hasError.value !== true) {\n        if (images[0].value !== null) {\n          content.push(getImage(0));\n        }\n        if (images[1].value !== null) {\n          content.push(getImage(1));\n        }\n      }\n      content.push(\n        h(Transition, { name: \"q-transition--fade\" }, getContent)\n      );\n      return h(\"div\", {\n        class: classes.value,\n        style: style.value,\n        role: \"img\",\n        \"aria-label\": props.alt\n      }, content);\n    };\n  }\n});\n",
      "start": 1703982896416,
      "end": 1703982896489,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1703982896489,
      "end": 1703982896489,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896489,
      "end": 1703982896489,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896489,
      "end": 1703982896489,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896489,
      "end": 1703982896489,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896489,
      "end": 1703982896491,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896491,
      "end": 1703982896491,
      "order": "normal"
    }
  ]
}
