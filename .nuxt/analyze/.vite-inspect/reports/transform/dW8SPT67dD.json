{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/components/tabs/use-tab.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h, ref, computed, inject, onBeforeUnmount, onMounted, withDirectives, getCurrentInstance } from 'vue'\n\nimport QIcon from '../icon/QIcon.js'\n\nimport Ripple from '../../directives/Ripple.js'\n\nimport { hMergeSlot } from '../../utils/private/render.js'\nimport { isKeyCode, shouldIgnoreKey } from '../../utils/private/key-composition.js'\nimport { tabsKey, emptyRenderFn } from '../../utils/private/symbols.js'\nimport { stopAndPrevent } from '../../utils/event.js'\nimport uid from '../../utils/uid.js'\nimport { isDeepEqual } from '../../utils/is.js'\n\nlet id = 0\n\nexport const useTabEmits = [ 'click', 'keydown' ]\n\nexport const useTabProps = {\n  icon: String,\n  label: [ Number, String ],\n\n  alert: [ Boolean, String ],\n  alertIcon: String,\n\n  name: {\n    type: [ Number, String ],\n    default: () => `t_${ id++ }`\n  },\n\n  noCaps: Boolean,\n\n  tabindex: [ String, Number ],\n  disable: Boolean,\n\n  contentClass: String,\n\n  ripple: {\n    type: [ Boolean, Object ],\n    default: true\n  }\n}\n\nexport default function (props, slots, emit, routeData) {\n  const $tabs = inject(tabsKey, emptyRenderFn)\n  if ($tabs === emptyRenderFn) {\n    console.error('QTab/QRouteTab component needs to be child of QTabs')\n    return emptyRenderFn\n  }\n\n  const { proxy } = getCurrentInstance()\n\n  const blurTargetRef = ref(null)\n  const rootRef = ref(null)\n  const tabIndicatorRef = ref(null)\n\n  const ripple = computed(() => (\n    props.disable === true || props.ripple === false\n      ? false\n      : Object.assign(\n        { keyCodes: [ 13, 32 ], early: true },\n        props.ripple === true ? {} : props.ripple\n      )\n  ))\n\n  const isActive = computed(() => $tabs.currentModel.value === props.name)\n\n  const classes = computed(() =>\n    'q-tab relative-position self-stretch flex flex-center text-center'\n    + (\n      isActive.value === true\n        ? (\n            ' q-tab--active'\n            + ($tabs.tabProps.value.activeClass ? ' ' + $tabs.tabProps.value.activeClass : '')\n            + ($tabs.tabProps.value.activeColor ? ` text-${ $tabs.tabProps.value.activeColor }` : '')\n            + ($tabs.tabProps.value.activeBgColor ? ` bg-${ $tabs.tabProps.value.activeBgColor }` : '')\n          )\n        : ' q-tab--inactive'\n    )\n    + (props.icon && props.label && $tabs.tabProps.value.inlineLabel === false ? ' q-tab--full' : '')\n    + (props.noCaps === true || $tabs.tabProps.value.noCaps === true ? ' q-tab--no-caps' : '')\n    + (props.disable === true ? ' disabled' : ' q-focusable q-hoverable cursor-pointer')\n    + (routeData !== void 0 ? routeData.linkClass.value : '')\n  )\n\n  const innerClass = computed(() =>\n    'q-tab__content self-stretch flex-center relative-position q-anchor--skip non-selectable '\n    + ($tabs.tabProps.value.inlineLabel === true ? 'row no-wrap q-tab__content--inline' : 'column')\n    + (props.contentClass !== void 0 ? ` ${ props.contentClass }` : '')\n  )\n\n  const tabIndex = computed(() => (\n    (\n      props.disable === true\n      || $tabs.hasFocus.value === true\n      || (isActive.value === false && $tabs.hasActiveTab.value === true)\n    )\n      ? -1\n      : props.tabindex || 0\n  ))\n\n  function onClick (e, keyboard) {\n    if (keyboard !== true && blurTargetRef.value !== null) {\n      blurTargetRef.value.focus()\n    }\n\n    if (props.disable === true) {\n      // we should hinder native navigation though\n      if (routeData !== void 0 && routeData.hasRouterLink.value === true) {\n        stopAndPrevent(e)\n      }\n      return\n    }\n\n    // do we have a QTab?\n    if (routeData === void 0) {\n      $tabs.updateModel({ name: props.name })\n      emit('click', e)\n      return\n    }\n\n    if (routeData.hasRouterLink.value === true) {\n      const go = (opts = {}) => {\n        // if requiring to go to another route, then we\n        // let the QTabs route watcher do its job,\n        // otherwise directly select this\n        let hardError\n        const reqId = opts.to === void 0 || isDeepEqual(opts.to, props.to) === true\n          ? ($tabs.avoidRouteWatcher = uid())\n          : null\n\n        return routeData.navigateToRouterLink(e, { ...opts, returnRouterError: true })\n          .catch(err => { hardError = err })\n          .then(softError => {\n            if (reqId === $tabs.avoidRouteWatcher) {\n              $tabs.avoidRouteWatcher = false\n\n              // if we don't have any hard errors or any soft errors, except for\n              // when navigating to the same route (on all other soft errors,\n              // like when navigation was aborted in a nav guard, we don't activate this tab)\n              if (\n                hardError === void 0 && (\n                  softError === void 0\n                  || softError.message.startsWith('Avoided redundant navigation') === true\n                )\n              ) {\n                $tabs.updateModel({ name: props.name })\n              }\n            }\n\n            if (opts.returnRouterError === true) {\n              return hardError !== void 0 ? Promise.reject(hardError) : softError\n            }\n          })\n      }\n\n      emit('click', e, go)\n      e.defaultPrevented !== true && go()\n\n      return\n    }\n\n    emit('click', e)\n  }\n\n  function onKeydown (e) {\n    if (isKeyCode(e, [ 13, 32 ])) {\n      onClick(e, true)\n    }\n    else if (\n      shouldIgnoreKey(e) !== true\n      && e.keyCode >= 35\n      && e.keyCode <= 40\n      && e.altKey !== true\n      && e.metaKey !== true\n    ) {\n      $tabs.onKbdNavigate(e.keyCode, proxy.$el) === true && stopAndPrevent(e)\n    }\n\n    emit('keydown', e)\n  }\n\n  function getContent () {\n    const\n      narrow = $tabs.tabProps.value.narrowIndicator,\n      content = [],\n      indicator = h('div', {\n        ref: tabIndicatorRef,\n        class: [\n          'q-tab__indicator',\n          $tabs.tabProps.value.indicatorClass\n        ]\n      })\n\n    props.icon !== void 0 && content.push(\n      h(QIcon, {\n        class: 'q-tab__icon',\n        name: props.icon\n      })\n    )\n\n    props.label !== void 0 && content.push(\n      h('div', { class: 'q-tab__label' }, props.label)\n    )\n\n    props.alert !== false && content.push(\n      props.alertIcon !== void 0\n        ? h(QIcon, {\n          class: 'q-tab__alert-icon',\n          color: props.alert !== true\n            ? props.alert\n            : void 0,\n          name: props.alertIcon\n        })\n        : h('div', {\n          class: 'q-tab__alert'\n            + (props.alert !== true ? ` text-${ props.alert }` : '')\n        })\n    )\n\n    narrow === true && content.push(indicator)\n\n    const node = [\n      h('div', { class: 'q-focus-helper', tabindex: -1, ref: blurTargetRef }),\n      h('div', { class: innerClass.value }, hMergeSlot(slots.default, content))\n    ]\n\n    narrow === false && node.push(indicator)\n\n    return node\n  }\n\n  const tabData = {\n    name: computed(() => props.name),\n    rootRef,\n    tabIndicatorRef,\n    routeData\n  }\n\n  onBeforeUnmount(() => {\n    $tabs.unregisterTab(tabData)\n  })\n\n  onMounted(() => {\n    $tabs.registerTab(tabData)\n  })\n\n  function renderTab (tag, customData) {\n    const data = {\n      ref: rootRef,\n      class: classes.value,\n      tabindex: tabIndex.value,\n      role: 'tab',\n      'aria-selected': isActive.value === true ? 'true' : 'false',\n      'aria-disabled': props.disable === true ? 'true' : void 0,\n      onClick,\n      onKeydown,\n      ...customData\n    }\n\n    return withDirectives(\n      h(tag, data, getContent()),\n      [ [ Ripple, ripple.value ] ]\n    )\n  }\n\n  return { renderTab, $tabs }\n}\n",
      "start": 1703982897385,
      "end": 1703982897443,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982897443,
      "end": 1703982897443,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982897443,
      "end": 1703982897444,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982897444,
      "end": 1703982897444,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982897444,
      "end": 1703982897445,
      "order": "normal"
    }
  ]
}
