{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/plugins/Platform.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* eslint-disable no-useless-escape */\n\nimport { ref, reactive } from 'vue'\nimport { injectProp } from '../utils/private/inject-obj-prop.js'\n\n/**\n * __ QUASAR_SSR __            -> runs on SSR on client or server\n * __ QUASAR_SSR_SERVER __     -> runs on SSR on server\n * __ QUASAR_SSR_CLIENT __     -> runs on SSR on client\n * __ QUASAR_SSR_PWA __        -> built with SSR+PWA; may run on SSR on client or on PWA client\n *                              (needs runtime detection)\n */\n\nexport const isRuntimeSsrPreHydration = __QUASAR_SSR_SERVER__\n  ? { value: true }\n  : ref(\n    __QUASAR_SSR_CLIENT__ && (\n      __QUASAR_SSR_PWA__ ? document.body.getAttribute('data-server-rendered') !== null : true\n    )\n  )\n\nexport let iosEmulated = false\nexport let iosCorrection\n\nfunction getMatch (userAgent, platformMatch) {\n  const match = /(edg|edge|edga|edgios)\\/([\\w.]+)/.exec(userAgent)\n    || /(opr)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(vivaldi)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(chrome|crios)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(version)(applewebkit)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(webkit)[\\/]([\\w.]+).*(version)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(firefox|fxios)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(webkit)[\\/]([\\w.]+)/.exec(userAgent)\n    || /(opera)(?:.*version|)[\\/]([\\w.]+)/.exec(userAgent)\n    || []\n\n  return {\n    browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || '',\n    version: match[ 2 ] || match[ 4 ] || '0',\n    versionNumber: match[ 4 ] || match[ 2 ] || '0',\n    platform: platformMatch[ 0 ] || ''\n  }\n}\n\nfunction getPlatformMatch (userAgent) {\n  return /(ipad)/.exec(userAgent)\n    || /(ipod)/.exec(userAgent)\n    || /(windows phone)/.exec(userAgent)\n    || /(iphone)/.exec(userAgent)\n    || /(kindle)/.exec(userAgent)\n    || /(silk)/.exec(userAgent)\n    || /(android)/.exec(userAgent)\n    || /(win)/.exec(userAgent)\n    || /(mac)/.exec(userAgent)\n    || /(linux)/.exec(userAgent)\n    || /(cros)/.exec(userAgent)\n    // TODO: Remove BlackBerry detection. BlackBerry OS, BlackBerry 10, and BlackBerry PlayBook OS\n    // is officially dead as of January 4, 2022 (https://www.blackberry.com/us/en/support/devices/end-of-life)\n    || /(playbook)/.exec(userAgent)\n    || /(bb)/.exec(userAgent)\n    || /(blackberry)/.exec(userAgent)\n    || []\n}\n\nconst hasTouch = __QUASAR_SSR_SERVER__\n  ? false\n  : 'ontouchstart' in window || window.navigator.maxTouchPoints > 0\n\nfunction applyIosCorrection (is) {\n  iosCorrection = { is: { ...is } }\n\n  delete is.mac\n  delete is.desktop\n\n  const platform = Math.min(window.innerHeight, window.innerWidth) > 414\n    ? 'ipad'\n    : 'iphone'\n\n  Object.assign(is, {\n    mobile: true,\n    ios: true,\n    platform,\n    [ platform ]: true\n  })\n}\n\nfunction getPlatform (UA) {\n  const\n    userAgent = UA.toLowerCase(),\n    platformMatch = getPlatformMatch(userAgent),\n    matched = getMatch(userAgent, platformMatch),\n    browser = {}\n\n  if (matched.browser) {\n    browser[ matched.browser ] = true\n    browser.version = matched.version\n    browser.versionNumber = parseInt(matched.versionNumber, 10)\n  }\n\n  if (matched.platform) {\n    browser[ matched.platform ] = true\n  }\n\n  const knownMobiles = browser.android\n    || browser.ios\n    || browser.bb\n    || browser.blackberry\n    || browser.ipad\n    || browser.iphone\n    || browser.ipod\n    || browser.kindle\n    || browser.playbook\n    || browser.silk\n    || browser[ 'windows phone' ]\n\n  // These are all considered mobile platforms, meaning they run a mobile browser\n  if (knownMobiles === true || userAgent.indexOf('mobile') > -1) {\n    browser.mobile = true\n\n    if (browser.edga || browser.edgios) {\n      browser.edge = true\n      matched.browser = 'edge'\n    }\n    else if (browser.crios) {\n      browser.chrome = true\n      matched.browser = 'chrome'\n    }\n    else if (browser.fxios) {\n      browser.firefox = true\n      matched.browser = 'firefox'\n    }\n  }\n  // If it's not mobile we should consider it's desktop platform, meaning it runs a desktop browser\n  // It's a workaround for anonymized user agents\n  // (browser.cros || browser.mac || browser.linux || browser.win)\n  else {\n    browser.desktop = true\n  }\n\n  // Set iOS if on iPod, iPad or iPhone\n  if (browser.ipod || browser.ipad || browser.iphone) {\n    browser.ios = true\n  }\n\n  if (browser[ 'windows phone' ]) {\n    browser.winphone = true\n    delete browser[ 'windows phone' ]\n  }\n\n  // TODO: The assumption about WebKit based browsers below is not completely accurate.\n  // Google released Blink(a fork of WebKit) engine on April 3, 2013, which is really different than WebKit today.\n  // Today, one might want to check for WebKit to deal with its bugs, which is used on all browsers on iOS, and Safari browser on all platforms.\n\n  // Chrome, Opera 15+, Vivaldi and Safari are webkit based browsers\n  if (\n    browser.chrome\n    || browser.opr\n    || browser.safari\n    || browser.vivaldi\n    // we expect unknown, non iOS mobile browsers to be webkit based\n    || (\n      browser.mobile === true\n      && browser.ios !== true\n      && knownMobiles !== true\n    )\n  ) {\n    browser.webkit = true\n  }\n\n  // TODO: (Qv3) rename the terms 'edge' to 'edge legacy'(or remove it) then 'edge chromium' to 'edge' to match with the known up-to-date terms\n  // Microsoft Edge is the new Chromium-based browser. Microsoft Edge Legacy is the old EdgeHTML-based browser (EOL: March 9, 2021).\n  if (browser.edg) {\n    matched.browser = 'edgechromium'\n    browser.edgeChromium = true\n  }\n\n  // Blackberry browsers are marked as Safari on BlackBerry\n  if ((browser.safari && browser.blackberry) || browser.bb) {\n    matched.browser = 'blackberry'\n    browser.blackberry = true\n  }\n\n  // Playbook browsers are marked as Safari on Playbook\n  if (browser.safari && browser.playbook) {\n    matched.browser = 'playbook'\n    browser.playbook = true\n  }\n\n  // Opera 15+ are identified as opr\n  if (browser.opr) {\n    matched.browser = 'opera'\n    browser.opera = true\n  }\n\n  // Stock Android browsers are marked as Safari on Android.\n  if (browser.safari && browser.android) {\n    matched.browser = 'android'\n    browser.android = true\n  }\n\n  // Kindle browsers are marked as Safari on Kindle\n  if (browser.safari && browser.kindle) {\n    matched.browser = 'kindle'\n    browser.kindle = true\n  }\n\n  // Kindle Silk browsers are marked as Safari on Kindle\n  if (browser.safari && browser.silk) {\n    matched.browser = 'silk'\n    browser.silk = true\n  }\n\n  if (browser.vivaldi) {\n    matched.browser = 'vivaldi'\n    browser.vivaldi = true\n  }\n\n  // Assign the name and platform variable\n  browser.name = matched.browser\n  browser.platform = matched.platform\n\n  if (__QUASAR_SSR_SERVER__ !== true) {\n    if (userAgent.indexOf('electron') > -1) {\n      browser.electron = true\n    }\n    else if (document.location.href.indexOf('-extension://') > -1) {\n      browser.bex = true\n    }\n    else {\n      if (window.Capacitor !== void 0) {\n        browser.capacitor = true\n        browser.nativeMobile = true\n        browser.nativeMobileWrapper = 'capacitor'\n      }\n      else if (window._cordovaNative !== void 0 || window.cordova !== void 0) {\n        browser.cordova = true\n        browser.nativeMobile = true\n        browser.nativeMobileWrapper = 'cordova'\n      }\n\n      if (\n        hasTouch === true\n        && browser.mac === true\n        && (\n          (browser.desktop === true && browser.safari === true)\n          || (\n            browser.nativeMobile === true\n            && browser.android !== true\n            && browser.ios !== true\n            && browser.ipad !== true\n          )\n        )\n      ) {\n        /*\n        * Correction needed for iOS since the default\n        * setting on iPad is to request desktop view; if we have\n        * touch support and the user agent says it's a\n        * desktop, we infer that it's an iPhone/iPad with desktop view\n        * so we must fix the false positives\n        */\n        applyIosCorrection(browser)\n      }\n    }\n  }\n\n  return browser\n}\n\nconst userAgent = __QUASAR_SSR_SERVER__\n  ? ''\n  : navigator.userAgent || navigator.vendor || window.opera\n\nconst ssrClient = {\n  has: {\n    touch: false,\n    webStorage: false\n  },\n  within: { iframe: false }\n}\n\n// We export \"client\" for hydration error-free parts,\n// like touch directives who do not (and must NOT) wait\n// for the client takeover;\n// Do NOT import this directly in your app, unless you really know\n// what you are doing.\nexport const client = __QUASAR_SSR_SERVER__\n  ? ssrClient\n  : {\n      userAgent,\n      is: getPlatform(userAgent),\n      has: {\n        touch: hasTouch\n      },\n      within: {\n        iframe: window.self !== window.top\n      }\n    }\n\nconst Platform = {\n  install (opts) {\n    const { $q } = opts\n\n    if (__QUASAR_SSR_SERVER__) {\n      $q.platform = this.parseSSR(opts.ssrContext)\n    }\n    else if (isRuntimeSsrPreHydration.value === true) {\n      // takeover should increase accuracy for\n      // the rest of the props; we also avoid\n      // hydration errors\n      opts.onSSRHydrated.push(() => {\n        Object.assign($q.platform, client)\n        isRuntimeSsrPreHydration.value = false\n        iosCorrection = void 0\n      })\n\n      // we need to make platform reactive\n      // for the takeover phase\n      $q.platform = reactive(this)\n    }\n    else {\n      $q.platform = this\n    }\n  }\n}\n\nif (__QUASAR_SSR_SERVER__) {\n  Platform.parseSSR = (ssrContext) => {\n    const userAgent = ssrContext.req.headers[ 'user-agent' ] || ssrContext.req.headers[ 'User-Agent' ] || ''\n    return {\n      ...client,\n      userAgent,\n      is: getPlatform(userAgent)\n    }\n  }\n}\nelse {\n  // do not access window.localStorage without\n  // devland actually using it as this will get\n  // reported under \"Cookies\" in Google Chrome\n  let hasWebStorage\n\n  injectProp(client.has, 'webStorage', () => {\n    if (hasWebStorage !== void 0) {\n      return hasWebStorage\n    }\n\n    try {\n      if (window.localStorage) {\n        hasWebStorage = true\n        return true\n      }\n    }\n    catch (e) {}\n\n    hasWebStorage = false\n    return false\n  })\n\n  iosEmulated = client.is.ios === true\n    && window.navigator.vendor.toLowerCase().indexOf('apple') === -1\n\n  if (isRuntimeSsrPreHydration.value === true) {\n    // must match with server-side before\n    // client taking over in order to prevent\n    // hydration errors\n    Object.assign(Platform, client, iosCorrection, ssrClient)\n  }\n  else {\n    Object.assign(Platform, client)\n  }\n}\n\nexport default Platform\n",
      "start": 1703982896706,
      "end": 1703982896751,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896751,
      "end": 1703982896751,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { ref, reactive } from \"vue\";\nimport { injectProp } from \"../utils/private/inject-obj-prop.js\";\nexport const isRuntimeSsrPreHydration = false ? { value: true } : ref(\n  false ? document.body.getAttribute(\"data-server-rendered\") !== null : true\n);\nexport let iosEmulated = false;\nexport let iosCorrection;\nfunction getMatch(userAgent2, platformMatch) {\n  const match = /(edg|edge|edga|edgios)\\/([\\w.]+)/.exec(userAgent2) || /(opr)[\\/]([\\w.]+)/.exec(userAgent2) || /(vivaldi)[\\/]([\\w.]+)/.exec(userAgent2) || /(chrome|crios)[\\/]([\\w.]+)/.exec(userAgent2) || /(version)(applewebkit)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent2) || /(webkit)[\\/]([\\w.]+).*(version)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent2) || /(firefox|fxios)[\\/]([\\w.]+)/.exec(userAgent2) || /(webkit)[\\/]([\\w.]+)/.exec(userAgent2) || /(opera)(?:.*version|)[\\/]([\\w.]+)/.exec(userAgent2) || [];\n  return {\n    browser: match[5] || match[3] || match[1] || \"\",\n    version: match[2] || match[4] || \"0\",\n    versionNumber: match[4] || match[2] || \"0\",\n    platform: platformMatch[0] || \"\"\n  };\n}\nfunction getPlatformMatch(userAgent2) {\n  return /(ipad)/.exec(userAgent2) || /(ipod)/.exec(userAgent2) || /(windows phone)/.exec(userAgent2) || /(iphone)/.exec(userAgent2) || /(kindle)/.exec(userAgent2) || /(silk)/.exec(userAgent2) || /(android)/.exec(userAgent2) || /(win)/.exec(userAgent2) || /(mac)/.exec(userAgent2) || /(linux)/.exec(userAgent2) || /(cros)/.exec(userAgent2) || /(playbook)/.exec(userAgent2) || /(bb)/.exec(userAgent2) || /(blackberry)/.exec(userAgent2) || [];\n}\nconst hasTouch = false ? false : \"ontouchstart\" in window || window.navigator.maxTouchPoints > 0;\nfunction applyIosCorrection(is) {\n  iosCorrection = { is: { ...is } };\n  delete is.mac;\n  delete is.desktop;\n  const platform = Math.min(window.innerHeight, window.innerWidth) > 414 ? \"ipad\" : \"iphone\";\n  Object.assign(is, {\n    mobile: true,\n    ios: true,\n    platform,\n    [platform]: true\n  });\n}\nfunction getPlatform(UA) {\n  const userAgent2 = UA.toLowerCase(), platformMatch = getPlatformMatch(userAgent2), matched = getMatch(userAgent2, platformMatch), browser = {};\n  if (matched.browser) {\n    browser[matched.browser] = true;\n    browser.version = matched.version;\n    browser.versionNumber = parseInt(matched.versionNumber, 10);\n  }\n  if (matched.platform) {\n    browser[matched.platform] = true;\n  }\n  const knownMobiles = browser.android || browser.ios || browser.bb || browser.blackberry || browser.ipad || browser.iphone || browser.ipod || browser.kindle || browser.playbook || browser.silk || browser[\"windows phone\"];\n  if (knownMobiles === true || userAgent2.indexOf(\"mobile\") > -1) {\n    browser.mobile = true;\n    if (browser.edga || browser.edgios) {\n      browser.edge = true;\n      matched.browser = \"edge\";\n    } else if (browser.crios) {\n      browser.chrome = true;\n      matched.browser = \"chrome\";\n    } else if (browser.fxios) {\n      browser.firefox = true;\n      matched.browser = \"firefox\";\n    }\n  } else {\n    browser.desktop = true;\n  }\n  if (browser.ipod || browser.ipad || browser.iphone) {\n    browser.ios = true;\n  }\n  if (browser[\"windows phone\"]) {\n    browser.winphone = true;\n    delete browser[\"windows phone\"];\n  }\n  if (browser.chrome || browser.opr || browser.safari || browser.vivaldi || browser.mobile === true && browser.ios !== true && knownMobiles !== true) {\n    browser.webkit = true;\n  }\n  if (browser.edg) {\n    matched.browser = \"edgechromium\";\n    browser.edgeChromium = true;\n  }\n  if (browser.safari && browser.blackberry || browser.bb) {\n    matched.browser = \"blackberry\";\n    browser.blackberry = true;\n  }\n  if (browser.safari && browser.playbook) {\n    matched.browser = \"playbook\";\n    browser.playbook = true;\n  }\n  if (browser.opr) {\n    matched.browser = \"opera\";\n    browser.opera = true;\n  }\n  if (browser.safari && browser.android) {\n    matched.browser = \"android\";\n    browser.android = true;\n  }\n  if (browser.safari && browser.kindle) {\n    matched.browser = \"kindle\";\n    browser.kindle = true;\n  }\n  if (browser.safari && browser.silk) {\n    matched.browser = \"silk\";\n    browser.silk = true;\n  }\n  if (browser.vivaldi) {\n    matched.browser = \"vivaldi\";\n    browser.vivaldi = true;\n  }\n  browser.name = matched.browser;\n  browser.platform = matched.platform;\n  if (true) {\n    if (userAgent2.indexOf(\"electron\") > -1) {\n      browser.electron = true;\n    } else if (document.location.href.indexOf(\"-extension://\") > -1) {\n      browser.bex = true;\n    } else {\n      if (window.Capacitor !== void 0) {\n        browser.capacitor = true;\n        browser.nativeMobile = true;\n        browser.nativeMobileWrapper = \"capacitor\";\n      } else if (window._cordovaNative !== void 0 || window.cordova !== void 0) {\n        browser.cordova = true;\n        browser.nativeMobile = true;\n        browser.nativeMobileWrapper = \"cordova\";\n      }\n      if (hasTouch === true && browser.mac === true && (browser.desktop === true && browser.safari === true || browser.nativeMobile === true && browser.android !== true && browser.ios !== true && browser.ipad !== true)) {\n        applyIosCorrection(browser);\n      }\n    }\n  }\n  return browser;\n}\nconst userAgent = false ? \"\" : navigator.userAgent || navigator.vendor || window.opera;\nconst ssrClient = {\n  has: {\n    touch: false,\n    webStorage: false\n  },\n  within: { iframe: false }\n};\nexport const client = false ? ssrClient : {\n  userAgent,\n  is: getPlatform(userAgent),\n  has: {\n    touch: hasTouch\n  },\n  within: {\n    iframe: window.self !== window.top\n  }\n};\nconst Platform = {\n  install(opts) {\n    const { $q } = opts;\n    if (false) {\n      $q.platform = this.parseSSR(opts.ssrContext);\n    } else if (isRuntimeSsrPreHydration.value === true) {\n      opts.onSSRHydrated.push(() => {\n        Object.assign($q.platform, client);\n        isRuntimeSsrPreHydration.value = false;\n        iosCorrection = void 0;\n      });\n      $q.platform = reactive(this);\n    } else {\n      $q.platform = this;\n    }\n  }\n};\nif (false) {\n  Platform.parseSSR = (ssrContext) => {\n    const userAgent2 = ssrContext.req.headers[\"user-agent\"] || ssrContext.req.headers[\"User-Agent\"] || \"\";\n    return {\n      ...client,\n      userAgent: userAgent2,\n      is: getPlatform(userAgent2)\n    };\n  };\n} else {\n  let hasWebStorage;\n  injectProp(client.has, \"webStorage\", () => {\n    if (hasWebStorage !== void 0) {\n      return hasWebStorage;\n    }\n    try {\n      if (window.localStorage) {\n        hasWebStorage = true;\n        return true;\n      }\n    } catch (e) {\n    }\n    hasWebStorage = false;\n    return false;\n  });\n  iosEmulated = client.is.ios === true && window.navigator.vendor.toLowerCase().indexOf(\"apple\") === -1;\n  if (isRuntimeSsrPreHydration.value === true) {\n    Object.assign(Platform, client, iosCorrection, ssrClient);\n  } else {\n    Object.assign(Platform, client);\n  }\n}\nexport default Platform;\n",
      "start": 1703982896751,
      "end": 1703982896759,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1703982896759,
      "end": 1703982896759,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896759,
      "end": 1703982896759,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896759,
      "end": 1703982896759,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896759,
      "end": 1703982896759,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896762,
      "end": 1703982896763,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896763,
      "end": 1703982896763,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896763,
      "end": 1703982896763,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896763,
      "end": 1703982896763,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896763,
      "end": 1703982896764,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896764,
      "end": 1703982896764,
      "order": "normal"
    }
  ]
}
