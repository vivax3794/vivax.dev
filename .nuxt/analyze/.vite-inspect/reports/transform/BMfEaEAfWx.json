{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/utils/is.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\nexport function isDeepEqual (a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (a !== null && b !== null && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false\n    }\n\n    let length, i\n\n    if (a.constructor === Array) {\n      length = a.length\n\n      if (length !== b.length) {\n        return false\n      }\n\n      for (i = length; i-- !== 0;) {\n        if (isDeepEqual(a[ i ], b[ i ]) !== true) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    if (a.constructor === Map) {\n      if (a.size !== b.size) {\n        return false\n      }\n\n      let iter = a.entries()\n\n      i = iter.next()\n      while (i.done !== true) {\n        if (b.has(i.value[ 0 ]) !== true) {\n          return false\n        }\n        i = iter.next()\n      }\n\n      iter = a.entries()\n      i = iter.next()\n      while (i.done !== true) {\n        if (isDeepEqual(i.value[ 1 ], b.get(i.value[ 0 ])) !== true) {\n          return false\n        }\n        i = iter.next()\n      }\n\n      return true\n    }\n\n    if (a.constructor === Set) {\n      if (a.size !== b.size) {\n        return false\n      }\n\n      const iter = a.entries()\n\n      i = iter.next()\n      while (i.done !== true) {\n        if (b.has(i.value[ 0 ]) !== true) {\n          return false\n        }\n        i = iter.next()\n      }\n\n      return true\n    }\n\n    if (a.buffer != null && a.buffer.constructor === ArrayBuffer) {\n      length = a.length\n\n      if (length !== b.length) {\n        return false\n      }\n\n      for (i = length; i-- !== 0;) {\n        if (a[ i ] !== b[ i ]) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    if (a.constructor === RegExp) {\n      return a.source === b.source && a.flags === b.flags\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf) {\n      return a.valueOf() === b.valueOf()\n    }\n\n    if (a.toString !== Object.prototype.toString) {\n      return a.toString() === b.toString()\n    }\n\n    const keys = Object.keys(a).filter(key => a[ key ] !== void 0)\n    length = keys.length\n\n    if (length !== Object.keys(b).filter(key => b[ key ] !== void 0).length) {\n      return false\n    }\n\n    for (i = length; i-- !== 0;) {\n      const key = keys[ i ]\n      if (isDeepEqual(a[ key ], b[ key ]) !== true) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b // eslint-disable-line no-self-compare\n}\n\n// not perfect, but what we ARE interested is for Arrays not to slip in\n// as spread operator will mess things up in various areas\nexport function isObject (v) {\n  return v !== null && typeof v === 'object' && Array.isArray(v) !== true\n}\n\nexport function isDate (v) {\n  return Object.prototype.toString.call(v) === '[object Date]'\n}\n\nexport function isRegexp (v) {\n  return Object.prototype.toString.call(v) === '[object RegExp]'\n}\n\nexport function isNumber (v) {\n  return typeof v === 'number' && isFinite(v)\n}\n\nexport default {\n  deepEqual: isDeepEqual,\n  object: isObject,\n  date: isDate,\n  regexp: isRegexp,\n  number: isNumber\n}\n",
      "start": 1703982896752,
      "end": 1703982896825,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896825,
      "end": 1703982896825,
      "order": "normal"
    }
  ]
}
