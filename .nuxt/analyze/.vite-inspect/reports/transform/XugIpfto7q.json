{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/directives/Morph.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createDirective } from '../utils/private/create.js'\nimport morph from '../utils/morph.js'\n\nconst morphGroups = {}\nconst props = [\n  'duration', 'delay', 'easing', 'fill',\n  'classes', 'style', 'duration', 'resize',\n  'useCSS', 'hideFromClone', 'keepToClone', 'tween',\n  'tweenFromOpacity', 'tweenToOpacity',\n  'waitFor', 'onEnd'\n]\nconst mods = [\n  'resize', 'useCSS', 'hideFromClone', 'keepToClone', 'tween'\n]\n\nfunction changeClass (ctx, action) {\n  if (ctx.clsAction !== action) {\n    ctx.clsAction = action\n    ctx.el.classList[ action ]('q-morph--invisible')\n  }\n}\n\nfunction trigger (group) {\n  if (group.animating === true || group.queue.length < 2) {\n    return\n  }\n\n  const [ from, to ] = group.queue\n\n  group.animating = true\n  from.animating = true\n  to.animating = true\n\n  changeClass(from, 'remove')\n  changeClass(to, 'remove')\n\n  const cancelFn = morph({\n    from: from.el,\n    to: to.el,\n    onToggle () {\n      changeClass(from, 'add')\n      changeClass(to, 'remove')\n    },\n    ...to.opts,\n    onEnd (dir, aborted) {\n      to.opts.onEnd !== void 0 && to.opts.onEnd(dir, aborted)\n\n      if (aborted === true) {\n        return\n      }\n\n      from.animating = false\n      to.animating = false\n\n      group.animating = false\n      group.cancel = void 0\n      group.queue.shift()\n\n      trigger(group)\n    }\n  })\n\n  group.cancel = () => {\n    cancelFn(true) // abort\n    group.cancel = void 0\n  }\n}\n\nfunction updateModifiers (mod, ctx) {\n  const opts = ctx.opts\n\n  mods.forEach(name => {\n    opts[ name ] = mod[ name ] === true\n  })\n}\n\nfunction insertArgs (arg, ctx) {\n  const opts = typeof arg === 'string' && arg.length !== 0\n    ? arg.split(':') : []\n\n  ctx.name = opts[ 0 ]\n  ctx.group = opts[ 1 ]\n\n  Object.assign(ctx.opts, {\n    duration: isNaN(opts[ 2 ]) === true\n      ? 300\n      : parseFloat(opts[ 2 ]),\n    waitFor: opts[ 3 ]\n  })\n}\n\nfunction updateArgs (arg, ctx) {\n  if (arg.group !== void 0) {\n    ctx.group = arg.group\n  }\n  if (arg.name !== void 0) {\n    ctx.name = arg.name\n  }\n\n  const opts = ctx.opts\n\n  props.forEach(name => {\n    if (arg[ name ] !== void 0) {\n      opts[ name ] = arg[ name ]\n    }\n  })\n}\n\nfunction updateModel (name, ctx) {\n  if (ctx.name === name) {\n    const group = morphGroups[ ctx.group ]\n\n    // if group is not registered\n    if (group === void 0) {\n      morphGroups[ ctx.group ] = {\n        name: ctx.group,\n        model: name,\n        queue: [ ctx ],\n        animating: false\n      }\n\n      changeClass(ctx, 'remove')\n    }\n    // if model changed\n    else if (group.model !== name) {\n      group.model = name\n      group.queue.push(ctx)\n\n      if (group.animating === false && group.queue.length === 2) {\n        trigger(group)\n      }\n    }\n\n    return\n  }\n\n  if (ctx.animating === false) {\n    changeClass(ctx, 'add')\n  }\n}\n\nfunction updateValue (ctx, value) {\n  let model\n\n  if (Object(value) === value) {\n    model = '' + value.model\n    updateArgs(value, ctx)\n    updateModifiers(value, ctx)\n  }\n  else {\n    model = '' + value\n  }\n\n  if (model !== ctx.model) {\n    ctx.model = model\n    updateModel(model, ctx)\n  }\n  else if (ctx.animating === false && ctx.clsAction !== void 0) {\n    // ensure HMR\n    ctx.el.classList[ ctx.clsAction ]('q-morph--invisible')\n  }\n}\n\nexport default createDirective(__QUASAR_SSR_SERVER__\n  ? {\n      name: 'morph',\n      getSSRProps: binding => {\n        const name = binding.arg\n          ? binding.arg.split(':')[ 0 ]\n          : false\n\n        return {\n          class: name === binding.value ? '' : 'q-morph--invisible'\n        }\n      }\n    }\n  : {\n      name: 'morph',\n\n      mounted (el, binding) {\n        const ctx = {\n          el,\n          animating: false,\n          opts: {}\n        }\n\n        updateModifiers(binding.modifiers, ctx)\n        insertArgs(binding.arg, ctx)\n        updateValue(ctx, binding.value)\n\n        el.__qmorph = ctx\n      },\n\n      updated (el, binding) {\n        updateValue(el.__qmorph, binding.value)\n      },\n\n      beforeUnmount (el) {\n        const ctx = el.__qmorph\n\n        const group = morphGroups[ ctx.group ]\n\n        if (group !== void 0) {\n          const index = group.queue.indexOf(ctx)\n\n          if (index !== -1) {\n            group.queue = group.queue.filter(item => item !== ctx)\n\n            if (group.queue.length === 0) {\n              group.cancel !== void 0 && group.cancel()\n              delete morphGroups[ ctx.group ]\n            }\n          }\n        }\n\n        if (ctx.clsAction === 'add') {\n          el.classList.remove('q-morph--invisible')\n        }\n\n        delete el.__qmorph\n      }\n    }\n)\n",
      "start": 1703982896632,
      "end": 1703982896692,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896692,
      "end": 1703982896692,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { createDirective } from \"../utils/private/create.js\";\nimport morph from \"../utils/morph.js\";\nconst morphGroups = {};\nconst props = [\n  \"duration\",\n  \"delay\",\n  \"easing\",\n  \"fill\",\n  \"classes\",\n  \"style\",\n  \"duration\",\n  \"resize\",\n  \"useCSS\",\n  \"hideFromClone\",\n  \"keepToClone\",\n  \"tween\",\n  \"tweenFromOpacity\",\n  \"tweenToOpacity\",\n  \"waitFor\",\n  \"onEnd\"\n];\nconst mods = [\n  \"resize\",\n  \"useCSS\",\n  \"hideFromClone\",\n  \"keepToClone\",\n  \"tween\"\n];\nfunction changeClass(ctx, action) {\n  if (ctx.clsAction !== action) {\n    ctx.clsAction = action;\n    ctx.el.classList[action](\"q-morph--invisible\");\n  }\n}\nfunction trigger(group) {\n  if (group.animating === true || group.queue.length < 2) {\n    return;\n  }\n  const [from, to] = group.queue;\n  group.animating = true;\n  from.animating = true;\n  to.animating = true;\n  changeClass(from, \"remove\");\n  changeClass(to, \"remove\");\n  const cancelFn = morph({\n    from: from.el,\n    to: to.el,\n    onToggle() {\n      changeClass(from, \"add\");\n      changeClass(to, \"remove\");\n    },\n    ...to.opts,\n    onEnd(dir, aborted) {\n      to.opts.onEnd !== void 0 && to.opts.onEnd(dir, aborted);\n      if (aborted === true) {\n        return;\n      }\n      from.animating = false;\n      to.animating = false;\n      group.animating = false;\n      group.cancel = void 0;\n      group.queue.shift();\n      trigger(group);\n    }\n  });\n  group.cancel = () => {\n    cancelFn(true);\n    group.cancel = void 0;\n  };\n}\nfunction updateModifiers(mod, ctx) {\n  const opts = ctx.opts;\n  mods.forEach((name) => {\n    opts[name] = mod[name] === true;\n  });\n}\nfunction insertArgs(arg, ctx) {\n  const opts = typeof arg === \"string\" && arg.length !== 0 ? arg.split(\":\") : [];\n  ctx.name = opts[0];\n  ctx.group = opts[1];\n  Object.assign(ctx.opts, {\n    duration: isNaN(opts[2]) === true ? 300 : parseFloat(opts[2]),\n    waitFor: opts[3]\n  });\n}\nfunction updateArgs(arg, ctx) {\n  if (arg.group !== void 0) {\n    ctx.group = arg.group;\n  }\n  if (arg.name !== void 0) {\n    ctx.name = arg.name;\n  }\n  const opts = ctx.opts;\n  props.forEach((name) => {\n    if (arg[name] !== void 0) {\n      opts[name] = arg[name];\n    }\n  });\n}\nfunction updateModel(name, ctx) {\n  if (ctx.name === name) {\n    const group = morphGroups[ctx.group];\n    if (group === void 0) {\n      morphGroups[ctx.group] = {\n        name: ctx.group,\n        model: name,\n        queue: [ctx],\n        animating: false\n      };\n      changeClass(ctx, \"remove\");\n    } else if (group.model !== name) {\n      group.model = name;\n      group.queue.push(ctx);\n      if (group.animating === false && group.queue.length === 2) {\n        trigger(group);\n      }\n    }\n    return;\n  }\n  if (ctx.animating === false) {\n    changeClass(ctx, \"add\");\n  }\n}\nfunction updateValue(ctx, value) {\n  let model;\n  if (Object(value) === value) {\n    model = \"\" + value.model;\n    updateArgs(value, ctx);\n    updateModifiers(value, ctx);\n  } else {\n    model = \"\" + value;\n  }\n  if (model !== ctx.model) {\n    ctx.model = model;\n    updateModel(model, ctx);\n  } else if (ctx.animating === false && ctx.clsAction !== void 0) {\n    ctx.el.classList[ctx.clsAction](\"q-morph--invisible\");\n  }\n}\nexport default createDirective(\n  false ? {\n    name: \"morph\",\n    getSSRProps: (binding) => {\n      const name = binding.arg ? binding.arg.split(\":\")[0] : false;\n      return {\n        class: name === binding.value ? \"\" : \"q-morph--invisible\"\n      };\n    }\n  } : {\n    name: \"morph\",\n    mounted(el, binding) {\n      const ctx = {\n        el,\n        animating: false,\n        opts: {}\n      };\n      updateModifiers(binding.modifiers, ctx);\n      insertArgs(binding.arg, ctx);\n      updateValue(ctx, binding.value);\n      el.__qmorph = ctx;\n    },\n    updated(el, binding) {\n      updateValue(el.__qmorph, binding.value);\n    },\n    beforeUnmount(el) {\n      const ctx = el.__qmorph;\n      const group = morphGroups[ctx.group];\n      if (group !== void 0) {\n        const index = group.queue.indexOf(ctx);\n        if (index !== -1) {\n          group.queue = group.queue.filter((item) => item !== ctx);\n          if (group.queue.length === 0) {\n            group.cancel !== void 0 && group.cancel();\n            delete morphGroups[ctx.group];\n          }\n        }\n      }\n      if (ctx.clsAction === \"add\") {\n        el.classList.remove(\"q-morph--invisible\");\n      }\n      delete el.__qmorph;\n    }\n  }\n);\n",
      "start": 1703982896692,
      "end": 1703982896711,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1703982896711,
      "end": 1703982896711,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896711,
      "end": 1703982896711,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896711,
      "end": 1703982896711,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896711,
      "end": 1703982896711,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896712,
      "end": 1703982896713,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896713,
      "end": 1703982896713,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896713,
      "end": 1703982896713,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896713,
      "end": 1703982896713,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896713,
      "end": 1703982896713,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896714,
      "end": 1703982896714,
      "order": "normal"
    }
  ]
}
