{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/composables/private/use-router-link.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*\n * Inspired by RouterLink from Vue Router\n *  --> API should match!\n */\n\nimport { computed, getCurrentInstance } from 'vue'\n\nimport { vmHasRouter } from '../../utils/private/vm.js'\n\n// Get the original path value of a record by following its aliasOf\nfunction getOriginalPath (record) {\n  return record\n    ? (\n        record.aliasOf\n          ? record.aliasOf.path\n          : record.path\n      ) : ''\n}\n\nfunction isSameRouteRecord (a, b) {\n  // since the original record has an undefined value for aliasOf\n  // but all aliases point to the original record, this will always compare\n  // the original record\n  return (a.aliasOf || a) === (b.aliasOf || b)\n}\n\nfunction includesParams (outer, inner) {\n  for (const key in inner) {\n    const\n      innerValue = inner[ key ],\n      outerValue = outer[ key ]\n\n    if (typeof innerValue === 'string') {\n      if (innerValue !== outerValue) {\n        return false\n      }\n    }\n    else if (\n      Array.isArray(outerValue) === false\n      || outerValue.length !== innerValue.length\n      || innerValue.some((value, i) => value !== outerValue[ i ])\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction isEquivalentArray (a, b) {\n  return Array.isArray(b) === true\n    ? a.length === b.length && a.every((value, i) => value === b[ i ])\n    : a.length === 1 && a[ 0 ] === b\n}\n\nfunction isSameRouteLocationParamsValue (a, b) {\n  return Array.isArray(a) === true\n    ? isEquivalentArray(a, b)\n    : (\n        Array.isArray(b) === true\n          ? isEquivalentArray(b, a)\n          : a === b\n      )\n}\n\nfunction isSameRouteLocationParams (a, b) {\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n\n  for (const key in a) {\n    if (isSameRouteLocationParamsValue(a[ key ], b[ key ]) === false) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport const useRouterLinkProps = {\n  // router-link\n  to: [ String, Object ],\n  replace: Boolean,\n  exact: Boolean,\n  activeClass: {\n    type: String,\n    default: 'q-router-link--active'\n  },\n  exactActiveClass: {\n    type: String,\n    default: 'q-router-link--exact-active'\n  },\n\n  // regular <a> link\n  href: String,\n  target: String,\n\n  // state\n  disable: Boolean\n}\n\n// external props: type, tag\n\nexport default function ({ fallbackTag, useDisableForRouterLinkProps = true } = {}) {\n  const vm = getCurrentInstance()\n  const { props, proxy, emit } = vm\n\n  const hasRouter = vmHasRouter(vm)\n  const hasHrefLink = computed(() => props.disable !== true && props.href !== void 0)\n\n  // for perf reasons, we use minimum amount of runtime work\n  const hasRouterLinkProps = useDisableForRouterLinkProps === true\n    ? computed(() =>\n      hasRouter === true\n      && props.disable !== true\n      && hasHrefLink.value !== true\n      && props.to !== void 0 && props.to !== null && props.to !== ''\n    )\n    : computed(() =>\n      hasRouter === true\n      && hasHrefLink.value !== true\n      && props.to !== void 0 && props.to !== null && props.to !== ''\n    )\n\n  const resolvedLink = computed(() => (\n    hasRouterLinkProps.value === true\n      ? getLink(props.to)\n      : null\n  ))\n\n  const hasRouterLink = computed(() => resolvedLink.value !== null)\n  const hasLink = computed(() => hasHrefLink.value === true || hasRouterLink.value === true)\n\n  const linkTag = computed(() => (\n    props.type === 'a' || hasLink.value === true\n      ? 'a'\n      : (props.tag || fallbackTag || 'div')\n  ))\n\n  const linkAttrs = computed(() => (\n    hasHrefLink.value === true\n      ? {\n          href: props.href,\n          target: props.target\n        }\n      : (\n          hasRouterLink.value === true\n            ? {\n                href: resolvedLink.value.href,\n                target: props.target\n              }\n            : {}\n        )\n  ))\n\n  const linkActiveIndex = computed(() => {\n    if (hasRouterLink.value === false) {\n      return -1\n    }\n\n    const\n      { matched } = resolvedLink.value,\n      { length } = matched,\n      routeMatched = matched[ length - 1 ]\n\n    if (routeMatched === void 0) {\n      return -1\n    }\n\n    const currentMatched = proxy.$route.matched\n\n    if (currentMatched.length === 0) {\n      return -1\n    }\n\n    const index = currentMatched.findIndex(\n      isSameRouteRecord.bind(null, routeMatched)\n    )\n\n    if (index > -1) {\n      return index\n    }\n\n    // possible parent record\n    const parentRecordPath = getOriginalPath(matched[ length - 2 ])\n\n    return (\n      // we are dealing with nested routes\n      length > 1\n      // if the parent and matched route have the same path, this link is\n      // referring to the empty child. Or we currently are on a different\n      // child of the same parent\n      && getOriginalPath(routeMatched) === parentRecordPath\n      // avoid comparing the child with its parent\n      && currentMatched[ currentMatched.length - 1 ].path !== parentRecordPath\n        ? currentMatched.findIndex(\n          isSameRouteRecord.bind(null, matched[ length - 2 ])\n        )\n        : index\n    )\n  })\n\n  const linkIsActive = computed(() =>\n    hasRouterLink.value === true\n    && linkActiveIndex.value !== -1\n    && includesParams(proxy.$route.params, resolvedLink.value.params)\n  )\n\n  const linkIsExactActive = computed(() =>\n    linkIsActive.value === true\n      && linkActiveIndex.value === proxy.$route.matched.length - 1\n      && isSameRouteLocationParams(proxy.$route.params, resolvedLink.value.params)\n  )\n\n  const linkClass = computed(() => (\n    hasRouterLink.value === true\n      ? (\n          linkIsExactActive.value === true\n            ? ` ${ props.exactActiveClass } ${ props.activeClass }`\n            : (\n                props.exact === true\n                  ? ''\n                  : (linkIsActive.value === true ? ` ${ props.activeClass }` : '')\n              )\n        )\n      : ''\n  ))\n\n  function getLink (to) {\n    try { return proxy.$router.resolve(to) }\n    catch (_) {}\n\n    return null\n  }\n\n  /**\n   * @returns Promise<RouterError | false | undefined>\n   */\n  function navigateToRouterLink (\n    e,\n    { returnRouterError, to = props.to, replace = props.replace } = {}\n  ) {\n    if (props.disable === true) {\n      // ensure native navigation is prevented in all cases,\n      // like when useDisableForRouterLinkProps === false (QRouteTab)\n      e.preventDefault()\n      return Promise.resolve(false)\n    }\n\n    if (\n      // don't redirect with control keys;\n      // should match RouterLink from Vue Router\n      e.metaKey || e.altKey || e.ctrlKey || e.shiftKey\n\n      // don't redirect on right click\n      || (e.button !== void 0 && e.button !== 0)\n\n      // don't redirect if it should open in a new window\n      || props.target === '_blank'\n    ) {\n      return Promise.resolve(false)\n    }\n\n    // hinder the native navigation\n    e.preventDefault()\n\n    // then() can also return a \"soft\" router error (Vue Router behavior)\n    const promise = proxy.$router[ replace === true ? 'replace' : 'push' ](to)\n\n    return returnRouterError === true\n      ? promise\n      // else catching hard errors and also \"soft\" ones - then(err => ...)\n      : promise.then(() => {}).catch(() => {})\n  }\n\n  // warning! ensure that the component using it has 'click' included in its 'emits' definition prop\n  function navigateOnClick (e) {\n    if (hasRouterLink.value === true) {\n      const go = opts => navigateToRouterLink(e, opts)\n\n      emit('click', e, go)\n      e.defaultPrevented !== true && go()\n    }\n    else {\n      emit('click', e)\n    }\n  }\n\n  return {\n    hasRouterLink,\n    hasHrefLink,\n    hasLink,\n\n    linkTag,\n    resolvedLink,\n    linkIsActive,\n    linkIsExactActive,\n    linkClass,\n    linkAttrs,\n\n    getLink,\n    navigateToRouterLink,\n    navigateOnClick\n  }\n}\n",
      "start": 1703982897190,
      "end": 1703982897298,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982897298,
      "end": 1703982897298,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982897299,
      "end": 1703982897299,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982897299,
      "end": 1703982897300,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982897300,
      "end": 1703982897300,
      "order": "normal"
    }
  ]
}
