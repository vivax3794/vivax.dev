{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/components/virtual-scroll/use-virtual-scroll.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h, ref, computed, watch, onActivated, onDeactivated, onBeforeMount, onBeforeUnmount, nextTick, getCurrentInstance } from 'vue'\n\nimport debounce from '../../utils/debounce.js'\nimport { noop } from '../../utils/event.js'\nimport { rtlHasScrollBug } from '../../utils/private/rtl.js'\n\nconst aggBucketSize = 1000\n\nconst scrollToEdges = [\n  'start',\n  'center',\n  'end',\n  'start-force',\n  'center-force',\n  'end-force'\n]\n\nconst filterProto = Array.prototype.filter\n\nconst setOverflowAnchor = __QUASAR_SSR__ || window.getComputedStyle(document.body).overflowAnchor === void 0\n  ? noop\n  : function (contentEl, index) {\n    if (contentEl === null) {\n      return\n    }\n\n    if (contentEl._qOverflowAnimationFrame !== void 0) {\n      cancelAnimationFrame(contentEl._qOverflowAnimationFrame)\n    }\n\n    contentEl._qOverflowAnimationFrame = requestAnimationFrame(() => {\n      if (contentEl === null) {\n        return\n      }\n\n      contentEl._qOverflowAnimationFrame = void 0\n      const children = contentEl.children || []\n\n      filterProto\n        .call(children, el => el.dataset && el.dataset.qVsAnchor !== void 0)\n        .forEach(el => {\n          delete el.dataset.qVsAnchor\n        })\n\n      const el = children[ index ]\n\n      if (el && el.dataset) {\n        el.dataset.qVsAnchor = ''\n      }\n    })\n  }\n\nfunction sumFn (acc, h) {\n  return acc + h\n}\n\nfunction getScrollDetails (\n  parent,\n  child,\n  beforeRef,\n  afterRef,\n  horizontal,\n  rtl,\n  stickyStart,\n  stickyEnd\n) {\n  const\n    parentCalc = parent === window ? document.scrollingElement || document.documentElement : parent,\n    propElSize = horizontal === true ? 'offsetWidth' : 'offsetHeight',\n    details = {\n      scrollStart: 0,\n      scrollViewSize: -stickyStart - stickyEnd,\n      scrollMaxSize: 0,\n      offsetStart: -stickyStart,\n      offsetEnd: -stickyEnd\n    }\n\n  if (horizontal === true) {\n    if (parent === window) {\n      details.scrollStart = window.pageXOffset || window.scrollX || document.body.scrollLeft || 0\n      details.scrollViewSize += document.documentElement.clientWidth\n    }\n    else {\n      details.scrollStart = parentCalc.scrollLeft\n      details.scrollViewSize += parentCalc.clientWidth\n    }\n    details.scrollMaxSize = parentCalc.scrollWidth\n\n    if (rtl === true) {\n      details.scrollStart = (rtlHasScrollBug === true ? details.scrollMaxSize - details.scrollViewSize : 0) - details.scrollStart\n    }\n  }\n  else {\n    if (parent === window) {\n      details.scrollStart = window.pageYOffset || window.scrollY || document.body.scrollTop || 0\n      details.scrollViewSize += document.documentElement.clientHeight\n    }\n    else {\n      details.scrollStart = parentCalc.scrollTop\n      details.scrollViewSize += parentCalc.clientHeight\n    }\n    details.scrollMaxSize = parentCalc.scrollHeight\n  }\n\n  if (beforeRef !== null) {\n    for (let el = beforeRef.previousElementSibling; el !== null; el = el.previousElementSibling) {\n      if (el.classList.contains('q-virtual-scroll--skip') === false) {\n        details.offsetStart += el[ propElSize ]\n      }\n    }\n  }\n\n  if (afterRef !== null) {\n    for (let el = afterRef.nextElementSibling; el !== null; el = el.nextElementSibling) {\n      if (el.classList.contains('q-virtual-scroll--skip') === false) {\n        details.offsetEnd += el[ propElSize ]\n      }\n    }\n  }\n\n  if (child !== parent) {\n    const\n      parentRect = parentCalc.getBoundingClientRect(),\n      childRect = child.getBoundingClientRect()\n\n    if (horizontal === true) {\n      details.offsetStart += childRect.left - parentRect.left\n      details.offsetEnd -= childRect.width\n    }\n    else {\n      details.offsetStart += childRect.top - parentRect.top\n      details.offsetEnd -= childRect.height\n    }\n\n    if (parent !== window) {\n      details.offsetStart += details.scrollStart\n    }\n    details.offsetEnd += details.scrollMaxSize - details.offsetStart\n  }\n\n  return details\n}\n\nfunction setScroll (parent, scroll, horizontal, rtl) {\n  if (scroll === 'end') {\n    scroll = (parent === window ? document.body : parent)[\n      horizontal === true ? 'scrollWidth' : 'scrollHeight'\n    ]\n  }\n\n  if (parent === window) {\n    if (horizontal === true) {\n      if (rtl === true) {\n        scroll = (rtlHasScrollBug === true ? document.body.scrollWidth - document.documentElement.clientWidth : 0) - scroll\n      }\n      window.scrollTo(scroll, window.pageYOffset || window.scrollY || document.body.scrollTop || 0)\n    }\n    else {\n      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, scroll)\n    }\n  }\n  else if (horizontal === true) {\n    if (rtl === true) {\n      scroll = (rtlHasScrollBug === true ? parent.scrollWidth - parent.offsetWidth : 0) - scroll\n    }\n    parent.scrollLeft = scroll\n  }\n  else {\n    parent.scrollTop = scroll\n  }\n}\n\nfunction sumSize (sizeAgg, size, from, to) {\n  if (from >= to) { return 0 }\n\n  const\n    lastTo = size.length,\n    fromAgg = Math.floor(from / aggBucketSize),\n    toAgg = Math.floor((to - 1) / aggBucketSize) + 1\n\n  let total = sizeAgg.slice(fromAgg, toAgg).reduce(sumFn, 0)\n\n  if (from % aggBucketSize !== 0) {\n    total -= size.slice(fromAgg * aggBucketSize, from).reduce(sumFn, 0)\n  }\n  if (to % aggBucketSize !== 0 && to !== lastTo) {\n    total -= size.slice(to, toAgg * aggBucketSize).reduce(sumFn, 0)\n  }\n\n  return total\n}\n\nconst commonVirtScrollProps = {\n  virtualScrollSliceSize: {\n    type: [ Number, String ],\n    default: null\n  },\n\n  virtualScrollSliceRatioBefore: {\n    type: [ Number, String ],\n    default: 1\n  },\n\n  virtualScrollSliceRatioAfter: {\n    type: [ Number, String ],\n    default: 1\n  },\n\n  virtualScrollItemSize: {\n    type: [ Number, String ],\n    default: 24\n  },\n\n  virtualScrollStickySizeStart: {\n    type: [ Number, String ],\n    default: 0\n  },\n\n  virtualScrollStickySizeEnd: {\n    type: [ Number, String ],\n    default: 0\n  },\n\n  tableColspan: [ Number, String ]\n}\n\nexport const commonVirtPropsList = Object.keys(commonVirtScrollProps)\n\nexport const useVirtualScrollProps = {\n  virtualScrollHorizontal: Boolean,\n  onVirtualScroll: Function,\n  ...commonVirtScrollProps\n}\n\nexport function useVirtualScroll ({\n  virtualScrollLength, getVirtualScrollTarget, getVirtualScrollEl,\n  virtualScrollItemSizeComputed // optional\n}) {\n  const vm = getCurrentInstance()\n\n  const { props, emit, proxy } = vm\n  const { $q } = proxy\n\n  let prevScrollStart, prevToIndex, localScrollViewSize, virtualScrollSizesAgg = [], virtualScrollSizes\n\n  const virtualScrollPaddingBefore = ref(0)\n  const virtualScrollPaddingAfter = ref(0)\n  const virtualScrollSliceSizeComputed = ref({})\n\n  const beforeRef = ref(null)\n  const afterRef = ref(null)\n  const contentRef = ref(null)\n\n  const virtualScrollSliceRange = ref({ from: 0, to: 0 })\n\n  const colspanAttr = computed(() => (props.tableColspan !== void 0 ? props.tableColspan : 100))\n\n  if (virtualScrollItemSizeComputed === void 0) {\n    virtualScrollItemSizeComputed = computed(() => props.virtualScrollItemSize)\n  }\n\n  const needsReset = computed(() => virtualScrollItemSizeComputed.value + ';' + props.virtualScrollHorizontal)\n\n  const needsSliceRecalc = computed(() =>\n    needsReset.value + ';' + props.virtualScrollSliceRatioBefore + ';' + props.virtualScrollSliceRatioAfter\n  )\n\n  watch(needsSliceRecalc, () => { setVirtualScrollSize() })\n  watch(needsReset, reset)\n\n  function reset () {\n    localResetVirtualScroll(prevToIndex, true)\n  }\n\n  function refresh (toIndex) {\n    localResetVirtualScroll(toIndex === void 0 ? prevToIndex : toIndex)\n  }\n\n  function scrollTo (toIndex, edge) {\n    const scrollEl = getVirtualScrollTarget()\n\n    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {\n      return\n    }\n\n    const scrollDetails = getScrollDetails(\n      scrollEl,\n      getVirtualScrollEl(),\n      beforeRef.value,\n      afterRef.value,\n      props.virtualScrollHorizontal,\n      $q.lang.rtl,\n      props.virtualScrollStickySizeStart,\n      props.virtualScrollStickySizeEnd\n    )\n\n    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize)\n\n    setVirtualScrollSliceRange(\n      scrollEl,\n      scrollDetails,\n      Math.min(virtualScrollLength.value - 1, Math.max(0, parseInt(toIndex, 10) || 0)),\n      0,\n      scrollToEdges.indexOf(edge) > -1 ? edge : (prevToIndex > -1 && toIndex > prevToIndex ? 'end' : 'start')\n    )\n  }\n\n  function localOnVirtualScrollEvt () {\n    const scrollEl = getVirtualScrollTarget()\n\n    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {\n      return\n    }\n\n    const\n      scrollDetails = getScrollDetails(\n        scrollEl,\n        getVirtualScrollEl(),\n        beforeRef.value,\n        afterRef.value,\n        props.virtualScrollHorizontal,\n        $q.lang.rtl,\n        props.virtualScrollStickySizeStart,\n        props.virtualScrollStickySizeEnd\n      ),\n      listLastIndex = virtualScrollLength.value - 1,\n      listEndOffset = scrollDetails.scrollMaxSize - scrollDetails.offsetStart - scrollDetails.offsetEnd - virtualScrollPaddingAfter.value\n\n    if (prevScrollStart === scrollDetails.scrollStart) {\n      return\n    }\n\n    if (scrollDetails.scrollMaxSize <= 0) {\n      setVirtualScrollSliceRange(scrollEl, scrollDetails, 0, 0)\n      return\n    }\n\n    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize)\n\n    updateVirtualScrollSizes(virtualScrollSliceRange.value.from)\n\n    const scrollMaxStart = Math.floor(scrollDetails.scrollMaxSize\n      - Math.max(scrollDetails.scrollViewSize, scrollDetails.offsetEnd)\n      - Math.min(virtualScrollSizes[ listLastIndex ], scrollDetails.scrollViewSize / 2))\n\n    if (scrollMaxStart > 0 && Math.ceil(scrollDetails.scrollStart) >= scrollMaxStart) {\n      setVirtualScrollSliceRange(\n        scrollEl,\n        scrollDetails,\n        listLastIndex,\n        scrollDetails.scrollMaxSize - scrollDetails.offsetEnd - virtualScrollSizesAgg.reduce(sumFn, 0)\n      )\n\n      return\n    }\n\n    let\n      toIndex = 0,\n      listOffset = scrollDetails.scrollStart - scrollDetails.offsetStart,\n      offset = listOffset\n\n    if (listOffset <= listEndOffset && listOffset + scrollDetails.scrollViewSize >= virtualScrollPaddingBefore.value) {\n      listOffset -= virtualScrollPaddingBefore.value\n      toIndex = virtualScrollSliceRange.value.from\n      offset = listOffset\n    }\n    else {\n      for (let j = 0; listOffset >= virtualScrollSizesAgg[ j ] && toIndex < listLastIndex; j++) {\n        listOffset -= virtualScrollSizesAgg[ j ]\n        toIndex += aggBucketSize\n      }\n    }\n\n    while (listOffset > 0 && toIndex < listLastIndex) {\n      listOffset -= virtualScrollSizes[ toIndex ]\n      if (listOffset > -scrollDetails.scrollViewSize) {\n        toIndex++\n        offset = listOffset\n      }\n      else {\n        offset = virtualScrollSizes[ toIndex ] + listOffset\n      }\n    }\n\n    setVirtualScrollSliceRange(\n      scrollEl,\n      scrollDetails,\n      toIndex,\n      offset\n    )\n  }\n\n  function setVirtualScrollSliceRange (scrollEl, scrollDetails, toIndex, offset, align) {\n    const alignForce = typeof align === 'string' && align.indexOf('-force') > -1\n    const alignEnd = alignForce === true ? align.replace('-force', '') : align\n    const alignRange = alignEnd !== void 0 ? alignEnd : 'start'\n\n    let\n      from = Math.max(0, toIndex - virtualScrollSliceSizeComputed.value[ alignRange ]),\n      to = from + virtualScrollSliceSizeComputed.value.total\n\n    if (to > virtualScrollLength.value) {\n      to = virtualScrollLength.value\n      from = Math.max(0, to - virtualScrollSliceSizeComputed.value.total)\n    }\n\n    prevScrollStart = scrollDetails.scrollStart\n\n    const rangeChanged = from !== virtualScrollSliceRange.value.from || to !== virtualScrollSliceRange.value.to\n\n    if (rangeChanged === false && alignEnd === void 0) {\n      emitScroll(toIndex)\n      return\n    }\n\n    const { activeElement } = document\n    const contentEl = contentRef.value\n    if (\n      rangeChanged === true\n      && contentEl !== null\n      && contentEl !== activeElement\n      && contentEl.contains(activeElement) === true\n    ) {\n      contentEl.addEventListener('focusout', onBlurRefocusFn)\n\n      setTimeout(() => {\n        contentEl !== null && contentEl.removeEventListener('focusout', onBlurRefocusFn)\n      })\n    }\n\n    setOverflowAnchor(contentEl, toIndex - from)\n\n    const sizeBefore = alignEnd !== void 0 ? virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0) : 0\n\n    if (rangeChanged === true) {\n      // vue key matching algorithm works only if\n      // the array of VNodes changes on only one of the ends\n      // so we first change one end and then the other\n\n      const tempTo = to >= virtualScrollSliceRange.value.from && from <= virtualScrollSliceRange.value.to\n        ? virtualScrollSliceRange.value.to\n        : to\n\n      virtualScrollSliceRange.value = { from, to: tempTo }\n      virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, from)\n      virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value)\n\n      requestAnimationFrame(() => {\n        if (virtualScrollSliceRange.value.to !== to && prevScrollStart === scrollDetails.scrollStart) {\n          virtualScrollSliceRange.value = { from: virtualScrollSliceRange.value.from, to }\n          virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value)\n        }\n      })\n    }\n\n    requestAnimationFrame(() => {\n      // if the scroll was changed give up\n      // (another call to setVirtualScrollSliceRange before animation frame)\n      if (prevScrollStart !== scrollDetails.scrollStart) {\n        return\n      }\n\n      if (rangeChanged === true) {\n        updateVirtualScrollSizes(from)\n      }\n\n      const\n        sizeAfter = virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0),\n        posStart = sizeAfter + scrollDetails.offsetStart + virtualScrollPaddingBefore.value,\n        posEnd = posStart + virtualScrollSizes[ toIndex ]\n\n      let scrollPosition = posStart + offset\n\n      if (alignEnd !== void 0) {\n        const sizeDiff = sizeAfter - sizeBefore\n        const scrollStart = scrollDetails.scrollStart + sizeDiff\n\n        scrollPosition = alignForce !== true && scrollStart < posStart && posEnd < scrollStart + scrollDetails.scrollViewSize\n          ? scrollStart\n          : (\n              alignEnd === 'end'\n                ? posEnd - scrollDetails.scrollViewSize\n                : posStart - (alignEnd === 'start' ? 0 : Math.round((scrollDetails.scrollViewSize - virtualScrollSizes[ toIndex ]) / 2))\n            )\n      }\n\n      prevScrollStart = scrollPosition\n\n      setScroll(\n        scrollEl,\n        scrollPosition,\n        props.virtualScrollHorizontal,\n        $q.lang.rtl\n      )\n\n      emitScroll(toIndex)\n    })\n  }\n\n  function updateVirtualScrollSizes (from) {\n    const contentEl = contentRef.value\n\n    if (contentEl) {\n      const\n        children = filterProto.call(\n          contentEl.children,\n          el => el.classList && el.classList.contains('q-virtual-scroll--skip') === false\n        ),\n        childrenLength = children.length,\n        sizeFn = props.virtualScrollHorizontal === true\n          ? el => el.getBoundingClientRect().width\n          : el => el.offsetHeight\n\n      let\n        index = from,\n        size, diff\n\n      for (let i = 0; i < childrenLength;) {\n        size = sizeFn(children[ i ])\n        i++\n\n        while (i < childrenLength && children[ i ].classList.contains('q-virtual-scroll--with-prev') === true) {\n          size += sizeFn(children[ i ])\n          i++\n        }\n\n        diff = size - virtualScrollSizes[ index ]\n\n        if (diff !== 0) {\n          virtualScrollSizes[ index ] += diff\n          virtualScrollSizesAgg[ Math.floor(index / aggBucketSize) ] += diff\n        }\n\n        index++\n      }\n    }\n  }\n\n  function onBlurRefocusFn () {\n    contentRef.value !== null && contentRef.value !== void 0 && contentRef.value.focus()\n  }\n\n  function localResetVirtualScroll (toIndex, fullReset) {\n    const defaultSize = 1 * virtualScrollItemSizeComputed.value\n\n    if (fullReset === true || Array.isArray(virtualScrollSizes) === false) {\n      virtualScrollSizes = []\n    }\n\n    const oldVirtualScrollSizesLength = virtualScrollSizes.length\n\n    virtualScrollSizes.length = virtualScrollLength.value\n\n    for (let i = virtualScrollLength.value - 1; i >= oldVirtualScrollSizesLength; i--) {\n      virtualScrollSizes[ i ] = defaultSize\n    }\n\n    const jMax = Math.floor((virtualScrollLength.value - 1) / aggBucketSize)\n    virtualScrollSizesAgg = []\n    for (let j = 0; j <= jMax; j++) {\n      let size = 0\n      const iMax = Math.min((j + 1) * aggBucketSize, virtualScrollLength.value)\n      for (let i = j * aggBucketSize; i < iMax; i++) {\n        size += virtualScrollSizes[ i ]\n      }\n      virtualScrollSizesAgg.push(size)\n    }\n\n    prevToIndex = -1\n    prevScrollStart = void 0\n\n    virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, virtualScrollSliceRange.value.from)\n    virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, virtualScrollSliceRange.value.to, virtualScrollLength.value)\n\n    if (toIndex >= 0) {\n      updateVirtualScrollSizes(virtualScrollSliceRange.value.from)\n      nextTick(() => { scrollTo(toIndex) })\n    }\n    else {\n      onVirtualScrollEvt()\n    }\n  }\n\n  function setVirtualScrollSize (scrollViewSize) {\n    if (scrollViewSize === void 0 && typeof window !== 'undefined') {\n      const scrollEl = getVirtualScrollTarget()\n\n      if (scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {\n        scrollViewSize = getScrollDetails(\n          scrollEl,\n          getVirtualScrollEl(),\n          beforeRef.value,\n          afterRef.value,\n          props.virtualScrollHorizontal,\n          $q.lang.rtl,\n          props.virtualScrollStickySizeStart,\n          props.virtualScrollStickySizeEnd\n        ).scrollViewSize\n      }\n    }\n\n    localScrollViewSize = scrollViewSize\n\n    const virtualScrollSliceRatioBefore = parseFloat(props.virtualScrollSliceRatioBefore) || 0\n    const virtualScrollSliceRatioAfter = parseFloat(props.virtualScrollSliceRatioAfter) || 0\n    const multiplier = 1 + virtualScrollSliceRatioBefore + virtualScrollSliceRatioAfter\n    const view = scrollViewSize === void 0 || scrollViewSize <= 0\n      ? 1\n      : Math.ceil(scrollViewSize / virtualScrollItemSizeComputed.value)\n\n    const baseSize = Math.max(\n      1,\n      view,\n      Math.ceil((props.virtualScrollSliceSize > 0 ? props.virtualScrollSliceSize : 10) / multiplier)\n    )\n\n    virtualScrollSliceSizeComputed.value = {\n      total: Math.ceil(baseSize * multiplier),\n      start: Math.ceil(baseSize * virtualScrollSliceRatioBefore),\n      center: Math.ceil(baseSize * (0.5 + virtualScrollSliceRatioBefore)),\n      end: Math.ceil(baseSize * (1 + virtualScrollSliceRatioBefore)),\n      view\n    }\n  }\n\n  function padVirtualScroll (tag, content) {\n    const paddingSize = props.virtualScrollHorizontal === true ? 'width' : 'height'\n    const style = {\n      [ '--q-virtual-scroll-item-' + paddingSize ]: virtualScrollItemSizeComputed.value + 'px'\n    }\n\n    return [\n      tag === 'tbody'\n        ? h(tag, {\n          class: 'q-virtual-scroll__padding',\n          key: 'before',\n          ref: beforeRef\n        }, [\n          h('tr', [\n            h('td', {\n              style: { [ paddingSize ]: `${ virtualScrollPaddingBefore.value }px`, ...style },\n              colspan: colspanAttr.value\n            })\n          ])\n        ])\n        : h(tag, {\n          class: 'q-virtual-scroll__padding',\n          key: 'before',\n          ref: beforeRef,\n          style: { [ paddingSize ]: `${ virtualScrollPaddingBefore.value }px`, ...style }\n        }),\n\n      h(tag, {\n        class: 'q-virtual-scroll__content',\n        key: 'content',\n        ref: contentRef,\n        tabindex: -1\n      }, content.flat()),\n\n      tag === 'tbody'\n        ? h(tag, {\n          class: 'q-virtual-scroll__padding',\n          key: 'after',\n          ref: afterRef\n        }, [\n          h('tr', [\n            h('td', {\n              style: { [ paddingSize ]: `${ virtualScrollPaddingAfter.value }px`, ...style },\n              colspan: colspanAttr.value\n            })\n          ])\n        ])\n        : h(tag, {\n          class: 'q-virtual-scroll__padding',\n          key: 'after',\n          ref: afterRef,\n          style: { [ paddingSize ]: `${ virtualScrollPaddingAfter.value }px`, ...style }\n        })\n    ]\n  }\n\n  function emitScroll (index) {\n    if (prevToIndex !== index) {\n      props.onVirtualScroll !== void 0 && emit('virtualScroll', {\n        index,\n        from: virtualScrollSliceRange.value.from,\n        to: virtualScrollSliceRange.value.to - 1,\n        direction: index < prevToIndex ? 'decrease' : 'increase',\n        ref: proxy\n      })\n\n      prevToIndex = index\n    }\n  }\n\n  setVirtualScrollSize()\n  const onVirtualScrollEvt = debounce(\n    localOnVirtualScrollEvt,\n    $q.platform.is.ios === true ? 120 : 35\n  )\n\n  onBeforeMount(() => {\n    setVirtualScrollSize()\n  })\n\n  let shouldActivate = false\n\n  onDeactivated(() => {\n    shouldActivate = true\n  })\n\n  onActivated(() => {\n    if (shouldActivate !== true) { return }\n\n    const scrollEl = getVirtualScrollTarget()\n\n    if (prevScrollStart !== void 0 && scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {\n      setScroll(\n        scrollEl,\n        prevScrollStart,\n        props.virtualScrollHorizontal,\n        $q.lang.rtl\n      )\n    }\n    else {\n      scrollTo(prevToIndex)\n    }\n  })\n\n  __QUASAR_SSR__ || onBeforeUnmount(() => {\n    onVirtualScrollEvt.cancel()\n  })\n\n  // expose public methods\n  Object.assign(proxy, { scrollTo, reset, refresh })\n\n  return {\n    virtualScrollSliceRange,\n    virtualScrollSliceSizeComputed,\n\n    setVirtualScrollSize,\n    onVirtualScrollEvt,\n    localResetVirtualScroll,\n    padVirtualScroll,\n\n    scrollTo,\n    reset,\n    refresh\n  }\n}\n",
      "start": 1703982897345,
      "end": 1703982897416,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982897416,
      "end": 1703982897416,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { h, ref, computed, watch, onActivated, onDeactivated, onBeforeMount, onBeforeUnmount, nextTick, getCurrentInstance } from \"vue\";\nimport debounce from \"../../utils/debounce.js\";\nimport { noop } from \"../../utils/event.js\";\nimport { rtlHasScrollBug } from \"../../utils/private/rtl.js\";\nconst aggBucketSize = 1e3;\nconst scrollToEdges = [\n  \"start\",\n  \"center\",\n  \"end\",\n  \"start-force\",\n  \"center-force\",\n  \"end-force\"\n];\nconst filterProto = Array.prototype.filter;\nconst setOverflowAnchor = true ? noop : function(contentEl, index) {\n  if (contentEl === null) {\n    return;\n  }\n  if (contentEl._qOverflowAnimationFrame !== void 0) {\n    cancelAnimationFrame(contentEl._qOverflowAnimationFrame);\n  }\n  contentEl._qOverflowAnimationFrame = requestAnimationFrame(() => {\n    if (contentEl === null) {\n      return;\n    }\n    contentEl._qOverflowAnimationFrame = void 0;\n    const children = contentEl.children || [];\n    filterProto.call(children, (el2) => el2.dataset && el2.dataset.qVsAnchor !== void 0).forEach((el2) => {\n      delete el2.dataset.qVsAnchor;\n    });\n    const el = children[index];\n    if (el && el.dataset) {\n      el.dataset.qVsAnchor = \"\";\n    }\n  });\n};\nfunction sumFn(acc, h2) {\n  return acc + h2;\n}\nfunction getScrollDetails(parent, child, beforeRef, afterRef, horizontal, rtl, stickyStart, stickyEnd) {\n  const parentCalc = parent === window ? document.scrollingElement || document.documentElement : parent, propElSize = horizontal === true ? \"offsetWidth\" : \"offsetHeight\", details = {\n    scrollStart: 0,\n    scrollViewSize: -stickyStart - stickyEnd,\n    scrollMaxSize: 0,\n    offsetStart: -stickyStart,\n    offsetEnd: -stickyEnd\n  };\n  if (horizontal === true) {\n    if (parent === window) {\n      details.scrollStart = window.pageXOffset || window.scrollX || document.body.scrollLeft || 0;\n      details.scrollViewSize += document.documentElement.clientWidth;\n    } else {\n      details.scrollStart = parentCalc.scrollLeft;\n      details.scrollViewSize += parentCalc.clientWidth;\n    }\n    details.scrollMaxSize = parentCalc.scrollWidth;\n    if (rtl === true) {\n      details.scrollStart = (rtlHasScrollBug === true ? details.scrollMaxSize - details.scrollViewSize : 0) - details.scrollStart;\n    }\n  } else {\n    if (parent === window) {\n      details.scrollStart = window.pageYOffset || window.scrollY || document.body.scrollTop || 0;\n      details.scrollViewSize += document.documentElement.clientHeight;\n    } else {\n      details.scrollStart = parentCalc.scrollTop;\n      details.scrollViewSize += parentCalc.clientHeight;\n    }\n    details.scrollMaxSize = parentCalc.scrollHeight;\n  }\n  if (beforeRef !== null) {\n    for (let el = beforeRef.previousElementSibling; el !== null; el = el.previousElementSibling) {\n      if (el.classList.contains(\"q-virtual-scroll--skip\") === false) {\n        details.offsetStart += el[propElSize];\n      }\n    }\n  }\n  if (afterRef !== null) {\n    for (let el = afterRef.nextElementSibling; el !== null; el = el.nextElementSibling) {\n      if (el.classList.contains(\"q-virtual-scroll--skip\") === false) {\n        details.offsetEnd += el[propElSize];\n      }\n    }\n  }\n  if (child !== parent) {\n    const parentRect = parentCalc.getBoundingClientRect(), childRect = child.getBoundingClientRect();\n    if (horizontal === true) {\n      details.offsetStart += childRect.left - parentRect.left;\n      details.offsetEnd -= childRect.width;\n    } else {\n      details.offsetStart += childRect.top - parentRect.top;\n      details.offsetEnd -= childRect.height;\n    }\n    if (parent !== window) {\n      details.offsetStart += details.scrollStart;\n    }\n    details.offsetEnd += details.scrollMaxSize - details.offsetStart;\n  }\n  return details;\n}\nfunction setScroll(parent, scroll, horizontal, rtl) {\n  if (scroll === \"end\") {\n    scroll = (parent === window ? document.body : parent)[horizontal === true ? \"scrollWidth\" : \"scrollHeight\"];\n  }\n  if (parent === window) {\n    if (horizontal === true) {\n      if (rtl === true) {\n        scroll = (rtlHasScrollBug === true ? document.body.scrollWidth - document.documentElement.clientWidth : 0) - scroll;\n      }\n      window.scrollTo(scroll, window.pageYOffset || window.scrollY || document.body.scrollTop || 0);\n    } else {\n      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, scroll);\n    }\n  } else if (horizontal === true) {\n    if (rtl === true) {\n      scroll = (rtlHasScrollBug === true ? parent.scrollWidth - parent.offsetWidth : 0) - scroll;\n    }\n    parent.scrollLeft = scroll;\n  } else {\n    parent.scrollTop = scroll;\n  }\n}\nfunction sumSize(sizeAgg, size, from, to) {\n  if (from >= to) {\n    return 0;\n  }\n  const lastTo = size.length, fromAgg = Math.floor(from / aggBucketSize), toAgg = Math.floor((to - 1) / aggBucketSize) + 1;\n  let total = sizeAgg.slice(fromAgg, toAgg).reduce(sumFn, 0);\n  if (from % aggBucketSize !== 0) {\n    total -= size.slice(fromAgg * aggBucketSize, from).reduce(sumFn, 0);\n  }\n  if (to % aggBucketSize !== 0 && to !== lastTo) {\n    total -= size.slice(to, toAgg * aggBucketSize).reduce(sumFn, 0);\n  }\n  return total;\n}\nconst commonVirtScrollProps = {\n  virtualScrollSliceSize: {\n    type: [Number, String],\n    default: null\n  },\n  virtualScrollSliceRatioBefore: {\n    type: [Number, String],\n    default: 1\n  },\n  virtualScrollSliceRatioAfter: {\n    type: [Number, String],\n    default: 1\n  },\n  virtualScrollItemSize: {\n    type: [Number, String],\n    default: 24\n  },\n  virtualScrollStickySizeStart: {\n    type: [Number, String],\n    default: 0\n  },\n  virtualScrollStickySizeEnd: {\n    type: [Number, String],\n    default: 0\n  },\n  tableColspan: [Number, String]\n};\nexport const commonVirtPropsList = Object.keys(commonVirtScrollProps);\nexport const useVirtualScrollProps = {\n  virtualScrollHorizontal: Boolean,\n  onVirtualScroll: Function,\n  ...commonVirtScrollProps\n};\nexport function useVirtualScroll({\n  virtualScrollLength,\n  getVirtualScrollTarget,\n  getVirtualScrollEl,\n  virtualScrollItemSizeComputed\n  // optional\n}) {\n  const vm = getCurrentInstance();\n  const { props, emit, proxy } = vm;\n  const { $q } = proxy;\n  let prevScrollStart, prevToIndex, localScrollViewSize, virtualScrollSizesAgg = [], virtualScrollSizes;\n  const virtualScrollPaddingBefore = ref(0);\n  const virtualScrollPaddingAfter = ref(0);\n  const virtualScrollSliceSizeComputed = ref({});\n  const beforeRef = ref(null);\n  const afterRef = ref(null);\n  const contentRef = ref(null);\n  const virtualScrollSliceRange = ref({ from: 0, to: 0 });\n  const colspanAttr = computed(() => props.tableColspan !== void 0 ? props.tableColspan : 100);\n  if (virtualScrollItemSizeComputed === void 0) {\n    virtualScrollItemSizeComputed = computed(() => props.virtualScrollItemSize);\n  }\n  const needsReset = computed(() => virtualScrollItemSizeComputed.value + \";\" + props.virtualScrollHorizontal);\n  const needsSliceRecalc = computed(\n    () => needsReset.value + \";\" + props.virtualScrollSliceRatioBefore + \";\" + props.virtualScrollSliceRatioAfter\n  );\n  watch(needsSliceRecalc, () => {\n    setVirtualScrollSize();\n  });\n  watch(needsReset, reset);\n  function reset() {\n    localResetVirtualScroll(prevToIndex, true);\n  }\n  function refresh(toIndex) {\n    localResetVirtualScroll(toIndex === void 0 ? prevToIndex : toIndex);\n  }\n  function scrollTo(toIndex, edge) {\n    const scrollEl = getVirtualScrollTarget();\n    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {\n      return;\n    }\n    const scrollDetails = getScrollDetails(\n      scrollEl,\n      getVirtualScrollEl(),\n      beforeRef.value,\n      afterRef.value,\n      props.virtualScrollHorizontal,\n      $q.lang.rtl,\n      props.virtualScrollStickySizeStart,\n      props.virtualScrollStickySizeEnd\n    );\n    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize);\n    setVirtualScrollSliceRange(\n      scrollEl,\n      scrollDetails,\n      Math.min(virtualScrollLength.value - 1, Math.max(0, parseInt(toIndex, 10) || 0)),\n      0,\n      scrollToEdges.indexOf(edge) > -1 ? edge : prevToIndex > -1 && toIndex > prevToIndex ? \"end\" : \"start\"\n    );\n  }\n  function localOnVirtualScrollEvt() {\n    const scrollEl = getVirtualScrollTarget();\n    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {\n      return;\n    }\n    const scrollDetails = getScrollDetails(\n      scrollEl,\n      getVirtualScrollEl(),\n      beforeRef.value,\n      afterRef.value,\n      props.virtualScrollHorizontal,\n      $q.lang.rtl,\n      props.virtualScrollStickySizeStart,\n      props.virtualScrollStickySizeEnd\n    ), listLastIndex = virtualScrollLength.value - 1, listEndOffset = scrollDetails.scrollMaxSize - scrollDetails.offsetStart - scrollDetails.offsetEnd - virtualScrollPaddingAfter.value;\n    if (prevScrollStart === scrollDetails.scrollStart) {\n      return;\n    }\n    if (scrollDetails.scrollMaxSize <= 0) {\n      setVirtualScrollSliceRange(scrollEl, scrollDetails, 0, 0);\n      return;\n    }\n    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize);\n    updateVirtualScrollSizes(virtualScrollSliceRange.value.from);\n    const scrollMaxStart = Math.floor(scrollDetails.scrollMaxSize - Math.max(scrollDetails.scrollViewSize, scrollDetails.offsetEnd) - Math.min(virtualScrollSizes[listLastIndex], scrollDetails.scrollViewSize / 2));\n    if (scrollMaxStart > 0 && Math.ceil(scrollDetails.scrollStart) >= scrollMaxStart) {\n      setVirtualScrollSliceRange(\n        scrollEl,\n        scrollDetails,\n        listLastIndex,\n        scrollDetails.scrollMaxSize - scrollDetails.offsetEnd - virtualScrollSizesAgg.reduce(sumFn, 0)\n      );\n      return;\n    }\n    let toIndex = 0, listOffset = scrollDetails.scrollStart - scrollDetails.offsetStart, offset = listOffset;\n    if (listOffset <= listEndOffset && listOffset + scrollDetails.scrollViewSize >= virtualScrollPaddingBefore.value) {\n      listOffset -= virtualScrollPaddingBefore.value;\n      toIndex = virtualScrollSliceRange.value.from;\n      offset = listOffset;\n    } else {\n      for (let j = 0; listOffset >= virtualScrollSizesAgg[j] && toIndex < listLastIndex; j++) {\n        listOffset -= virtualScrollSizesAgg[j];\n        toIndex += aggBucketSize;\n      }\n    }\n    while (listOffset > 0 && toIndex < listLastIndex) {\n      listOffset -= virtualScrollSizes[toIndex];\n      if (listOffset > -scrollDetails.scrollViewSize) {\n        toIndex++;\n        offset = listOffset;\n      } else {\n        offset = virtualScrollSizes[toIndex] + listOffset;\n      }\n    }\n    setVirtualScrollSliceRange(\n      scrollEl,\n      scrollDetails,\n      toIndex,\n      offset\n    );\n  }\n  function setVirtualScrollSliceRange(scrollEl, scrollDetails, toIndex, offset, align) {\n    const alignForce = typeof align === \"string\" && align.indexOf(\"-force\") > -1;\n    const alignEnd = alignForce === true ? align.replace(\"-force\", \"\") : align;\n    const alignRange = alignEnd !== void 0 ? alignEnd : \"start\";\n    let from = Math.max(0, toIndex - virtualScrollSliceSizeComputed.value[alignRange]), to = from + virtualScrollSliceSizeComputed.value.total;\n    if (to > virtualScrollLength.value) {\n      to = virtualScrollLength.value;\n      from = Math.max(0, to - virtualScrollSliceSizeComputed.value.total);\n    }\n    prevScrollStart = scrollDetails.scrollStart;\n    const rangeChanged = from !== virtualScrollSliceRange.value.from || to !== virtualScrollSliceRange.value.to;\n    if (rangeChanged === false && alignEnd === void 0) {\n      emitScroll(toIndex);\n      return;\n    }\n    const { activeElement } = document;\n    const contentEl = contentRef.value;\n    if (rangeChanged === true && contentEl !== null && contentEl !== activeElement && contentEl.contains(activeElement) === true) {\n      contentEl.addEventListener(\"focusout\", onBlurRefocusFn);\n      setTimeout(() => {\n        contentEl !== null && contentEl.removeEventListener(\"focusout\", onBlurRefocusFn);\n      });\n    }\n    setOverflowAnchor(contentEl, toIndex - from);\n    const sizeBefore = alignEnd !== void 0 ? virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0) : 0;\n    if (rangeChanged === true) {\n      const tempTo = to >= virtualScrollSliceRange.value.from && from <= virtualScrollSliceRange.value.to ? virtualScrollSliceRange.value.to : to;\n      virtualScrollSliceRange.value = { from, to: tempTo };\n      virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, from);\n      virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value);\n      requestAnimationFrame(() => {\n        if (virtualScrollSliceRange.value.to !== to && prevScrollStart === scrollDetails.scrollStart) {\n          virtualScrollSliceRange.value = { from: virtualScrollSliceRange.value.from, to };\n          virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value);\n        }\n      });\n    }\n    requestAnimationFrame(() => {\n      if (prevScrollStart !== scrollDetails.scrollStart) {\n        return;\n      }\n      if (rangeChanged === true) {\n        updateVirtualScrollSizes(from);\n      }\n      const sizeAfter = virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0), posStart = sizeAfter + scrollDetails.offsetStart + virtualScrollPaddingBefore.value, posEnd = posStart + virtualScrollSizes[toIndex];\n      let scrollPosition = posStart + offset;\n      if (alignEnd !== void 0) {\n        const sizeDiff = sizeAfter - sizeBefore;\n        const scrollStart = scrollDetails.scrollStart + sizeDiff;\n        scrollPosition = alignForce !== true && scrollStart < posStart && posEnd < scrollStart + scrollDetails.scrollViewSize ? scrollStart : alignEnd === \"end\" ? posEnd - scrollDetails.scrollViewSize : posStart - (alignEnd === \"start\" ? 0 : Math.round((scrollDetails.scrollViewSize - virtualScrollSizes[toIndex]) / 2));\n      }\n      prevScrollStart = scrollPosition;\n      setScroll(\n        scrollEl,\n        scrollPosition,\n        props.virtualScrollHorizontal,\n        $q.lang.rtl\n      );\n      emitScroll(toIndex);\n    });\n  }\n  function updateVirtualScrollSizes(from) {\n    const contentEl = contentRef.value;\n    if (contentEl) {\n      const children = filterProto.call(\n        contentEl.children,\n        (el) => el.classList && el.classList.contains(\"q-virtual-scroll--skip\") === false\n      ), childrenLength = children.length, sizeFn = props.virtualScrollHorizontal === true ? (el) => el.getBoundingClientRect().width : (el) => el.offsetHeight;\n      let index = from, size, diff;\n      for (let i = 0; i < childrenLength; ) {\n        size = sizeFn(children[i]);\n        i++;\n        while (i < childrenLength && children[i].classList.contains(\"q-virtual-scroll--with-prev\") === true) {\n          size += sizeFn(children[i]);\n          i++;\n        }\n        diff = size - virtualScrollSizes[index];\n        if (diff !== 0) {\n          virtualScrollSizes[index] += diff;\n          virtualScrollSizesAgg[Math.floor(index / aggBucketSize)] += diff;\n        }\n        index++;\n      }\n    }\n  }\n  function onBlurRefocusFn() {\n    contentRef.value !== null && contentRef.value !== void 0 && contentRef.value.focus();\n  }\n  function localResetVirtualScroll(toIndex, fullReset) {\n    const defaultSize = 1 * virtualScrollItemSizeComputed.value;\n    if (fullReset === true || Array.isArray(virtualScrollSizes) === false) {\n      virtualScrollSizes = [];\n    }\n    const oldVirtualScrollSizesLength = virtualScrollSizes.length;\n    virtualScrollSizes.length = virtualScrollLength.value;\n    for (let i = virtualScrollLength.value - 1; i >= oldVirtualScrollSizesLength; i--) {\n      virtualScrollSizes[i] = defaultSize;\n    }\n    const jMax = Math.floor((virtualScrollLength.value - 1) / aggBucketSize);\n    virtualScrollSizesAgg = [];\n    for (let j = 0; j <= jMax; j++) {\n      let size = 0;\n      const iMax = Math.min((j + 1) * aggBucketSize, virtualScrollLength.value);\n      for (let i = j * aggBucketSize; i < iMax; i++) {\n        size += virtualScrollSizes[i];\n      }\n      virtualScrollSizesAgg.push(size);\n    }\n    prevToIndex = -1;\n    prevScrollStart = void 0;\n    virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, virtualScrollSliceRange.value.from);\n    virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, virtualScrollSliceRange.value.to, virtualScrollLength.value);\n    if (toIndex >= 0) {\n      updateVirtualScrollSizes(virtualScrollSliceRange.value.from);\n      nextTick(() => {\n        scrollTo(toIndex);\n      });\n    } else {\n      onVirtualScrollEvt();\n    }\n  }\n  function setVirtualScrollSize(scrollViewSize) {\n    if (scrollViewSize === void 0 && typeof window !== \"undefined\") {\n      const scrollEl = getVirtualScrollTarget();\n      if (scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {\n        scrollViewSize = getScrollDetails(\n          scrollEl,\n          getVirtualScrollEl(),\n          beforeRef.value,\n          afterRef.value,\n          props.virtualScrollHorizontal,\n          $q.lang.rtl,\n          props.virtualScrollStickySizeStart,\n          props.virtualScrollStickySizeEnd\n        ).scrollViewSize;\n      }\n    }\n    localScrollViewSize = scrollViewSize;\n    const virtualScrollSliceRatioBefore = parseFloat(props.virtualScrollSliceRatioBefore) || 0;\n    const virtualScrollSliceRatioAfter = parseFloat(props.virtualScrollSliceRatioAfter) || 0;\n    const multiplier = 1 + virtualScrollSliceRatioBefore + virtualScrollSliceRatioAfter;\n    const view = scrollViewSize === void 0 || scrollViewSize <= 0 ? 1 : Math.ceil(scrollViewSize / virtualScrollItemSizeComputed.value);\n    const baseSize = Math.max(\n      1,\n      view,\n      Math.ceil((props.virtualScrollSliceSize > 0 ? props.virtualScrollSliceSize : 10) / multiplier)\n    );\n    virtualScrollSliceSizeComputed.value = {\n      total: Math.ceil(baseSize * multiplier),\n      start: Math.ceil(baseSize * virtualScrollSliceRatioBefore),\n      center: Math.ceil(baseSize * (0.5 + virtualScrollSliceRatioBefore)),\n      end: Math.ceil(baseSize * (1 + virtualScrollSliceRatioBefore)),\n      view\n    };\n  }\n  function padVirtualScroll(tag, content) {\n    const paddingSize = props.virtualScrollHorizontal === true ? \"width\" : \"height\";\n    const style = {\n      [\"--q-virtual-scroll-item-\" + paddingSize]: virtualScrollItemSizeComputed.value + \"px\"\n    };\n    return [\n      tag === \"tbody\" ? h(tag, {\n        class: \"q-virtual-scroll__padding\",\n        key: \"before\",\n        ref: beforeRef\n      }, [\n        h(\"tr\", [\n          h(\"td\", {\n            style: { [paddingSize]: `${virtualScrollPaddingBefore.value}px`, ...style },\n            colspan: colspanAttr.value\n          })\n        ])\n      ]) : h(tag, {\n        class: \"q-virtual-scroll__padding\",\n        key: \"before\",\n        ref: beforeRef,\n        style: { [paddingSize]: `${virtualScrollPaddingBefore.value}px`, ...style }\n      }),\n      h(tag, {\n        class: \"q-virtual-scroll__content\",\n        key: \"content\",\n        ref: contentRef,\n        tabindex: -1\n      }, content.flat()),\n      tag === \"tbody\" ? h(tag, {\n        class: \"q-virtual-scroll__padding\",\n        key: \"after\",\n        ref: afterRef\n      }, [\n        h(\"tr\", [\n          h(\"td\", {\n            style: { [paddingSize]: `${virtualScrollPaddingAfter.value}px`, ...style },\n            colspan: colspanAttr.value\n          })\n        ])\n      ]) : h(tag, {\n        class: \"q-virtual-scroll__padding\",\n        key: \"after\",\n        ref: afterRef,\n        style: { [paddingSize]: `${virtualScrollPaddingAfter.value}px`, ...style }\n      })\n    ];\n  }\n  function emitScroll(index) {\n    if (prevToIndex !== index) {\n      props.onVirtualScroll !== void 0 && emit(\"virtualScroll\", {\n        index,\n        from: virtualScrollSliceRange.value.from,\n        to: virtualScrollSliceRange.value.to - 1,\n        direction: index < prevToIndex ? \"decrease\" : \"increase\",\n        ref: proxy\n      });\n      prevToIndex = index;\n    }\n  }\n  setVirtualScrollSize();\n  const onVirtualScrollEvt = debounce(\n    localOnVirtualScrollEvt,\n    $q.platform.is.ios === true ? 120 : 35\n  );\n  onBeforeMount(() => {\n    setVirtualScrollSize();\n  });\n  let shouldActivate = false;\n  onDeactivated(() => {\n    shouldActivate = true;\n  });\n  onActivated(() => {\n    if (shouldActivate !== true) {\n      return;\n    }\n    const scrollEl = getVirtualScrollTarget();\n    if (prevScrollStart !== void 0 && scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {\n      setScroll(\n        scrollEl,\n        prevScrollStart,\n        props.virtualScrollHorizontal,\n        $q.lang.rtl\n      );\n    } else {\n      scrollTo(prevToIndex);\n    }\n  });\n  Object.assign(proxy, { scrollTo, reset, refresh });\n  return {\n    virtualScrollSliceRange,\n    virtualScrollSliceSizeComputed,\n    setVirtualScrollSize,\n    onVirtualScrollEvt,\n    localResetVirtualScroll,\n    padVirtualScroll,\n    scrollTo,\n    reset,\n    refresh\n  };\n}\n",
      "start": 1703982897416,
      "end": 1703982897460,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1703982897460,
      "end": 1703982897460,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982897460,
      "end": 1703982897460,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982897460,
      "end": 1703982897461,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982897461,
      "end": 1703982897461,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982897461,
      "end": 1703982897463,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982897463,
      "end": 1703982897463,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982897463,
      "end": 1703982897463,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982897463,
      "end": 1703982897463,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982897463,
      "end": 1703982897463,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982897463,
      "end": 1703982897463,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982897463,
      "end": 1703982897464,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982897464,
      "end": 1703982897464,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982897464,
      "end": 1703982897464,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982897464,
      "end": 1703982897464,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982897464,
      "end": 1703982897464,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982897464,
      "end": 1703982897464,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982897464,
      "end": 1703982897464,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982897464,
      "end": 1703982897464,
      "order": "normal"
    }
  ]
}
