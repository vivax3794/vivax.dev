{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/components/editor/QEditor.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h, ref, computed, watch, onMounted, onBeforeUnmount, nextTick, getCurrentInstance } from 'vue'\n\nimport Caret from './editor-caret.js'\nimport { getToolbar, getFonts, getLinkEditor } from './editor-utils.js'\n\nimport useDark, { useDarkProps } from '../../composables/private/use-dark.js'\nimport useFullscreen, { useFullscreenProps, useFullscreenEmits } from '../../composables/private/use-fullscreen.js'\nimport useSplitAttrs from '../../composables/private/use-split-attrs.js'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { stopAndPrevent } from '../../utils/event.js'\nimport extend from '../../utils/extend.js'\nimport { shouldIgnoreKey } from '../../utils/private/key-composition.js'\nimport { addFocusFn } from '../../utils/private/focus-manager.js'\n\nexport default createComponent({\n  name: 'QEditor',\n\n  props: {\n    ...useDarkProps,\n    ...useFullscreenProps,\n\n    modelValue: {\n      type: String,\n      required: true\n    },\n    readonly: Boolean,\n    disable: Boolean,\n    minHeight: {\n      type: String,\n      default: '10rem'\n    },\n    maxHeight: String,\n    height: String,\n    definitions: Object,\n    fonts: Object,\n    placeholder: String,\n\n    toolbar: {\n      type: Array,\n      validator: v => v.length === 0 || v.every(group => group.length),\n      default () {\n        return [\n          [ 'left', 'center', 'right', 'justify' ],\n          [ 'bold', 'italic', 'underline', 'strike' ],\n          [ 'undo', 'redo' ]\n        ]\n      }\n    },\n    toolbarColor: String,\n    toolbarBg: String,\n    toolbarTextColor: String,\n    toolbarToggleColor: {\n      type: String,\n      default: 'primary'\n    },\n    toolbarOutline: Boolean,\n    toolbarPush: Boolean,\n    toolbarRounded: Boolean,\n\n    paragraphTag: {\n      type: String,\n      validator: v => [ 'div', 'p' ].includes(v),\n      default: 'div'\n    },\n\n    contentStyle: Object,\n    contentClass: [ Object, Array, String ],\n\n    square: Boolean,\n    flat: Boolean,\n    dense: Boolean\n  },\n\n  emits: [\n    ...useFullscreenEmits,\n    'update:modelValue',\n    'keydown', 'click', 'mouseup', 'keyup', 'touchend',\n    'focus', 'blur',\n    'dropdownShow',\n    'dropdownHide',\n    'dropdownBeforeShow',\n    'dropdownBeforeHide',\n    'linkShow',\n    'linkHide'\n  ],\n\n  setup (props, { slots, emit, attrs }) {\n    const { proxy, vnode } = getCurrentInstance()\n    const { $q } = proxy\n\n    const isDark = useDark(props, $q)\n    const { inFullscreen, toggleFullscreen } = useFullscreen()\n    const splitAttrs = useSplitAttrs(attrs, vnode)\n\n    const rootRef = ref(null)\n    const contentRef = ref(null)\n\n    const editLinkUrl = ref(null)\n    const isViewingSource = ref(false)\n\n    const editable = computed(() => !props.readonly && !props.disable)\n\n    let defaultFont, offsetBottom\n    let lastEmit = props.modelValue\n\n    if (__QUASAR_SSR_SERVER__ !== true) {\n      document.execCommand('defaultParagraphSeparator', false, props.paragraphTag)\n      defaultFont = window.getComputedStyle(document.body).fontFamily\n    }\n\n    const toolbarBackgroundClass = computed(() => (\n      props.toolbarBg ? ` bg-${ props.toolbarBg }` : ''\n    ))\n\n    const buttonProps = computed(() => {\n      const flat = props.toolbarOutline !== true\n        && props.toolbarPush !== true\n\n      return {\n        type: 'a',\n        flat,\n        noWrap: true,\n        outline: props.toolbarOutline,\n        push: props.toolbarPush,\n        rounded: props.toolbarRounded,\n        dense: true,\n        color: props.toolbarColor,\n        disable: !editable.value,\n        size: 'sm'\n      }\n    })\n\n    const buttonDef = computed(() => {\n      const\n        e = $q.lang.editor,\n        i = $q.iconSet.editor\n\n      return {\n        bold: { cmd: 'bold', icon: i.bold, tip: e.bold, key: 66 },\n        italic: { cmd: 'italic', icon: i.italic, tip: e.italic, key: 73 },\n        strike: { cmd: 'strikeThrough', icon: i.strikethrough, tip: e.strikethrough, key: 83 },\n        underline: { cmd: 'underline', icon: i.underline, tip: e.underline, key: 85 },\n        unordered: { cmd: 'insertUnorderedList', icon: i.unorderedList, tip: e.unorderedList },\n        ordered: { cmd: 'insertOrderedList', icon: i.orderedList, tip: e.orderedList },\n        subscript: { cmd: 'subscript', icon: i.subscript, tip: e.subscript, htmlTip: 'x<subscript>2</subscript>' },\n        superscript: { cmd: 'superscript', icon: i.superscript, tip: e.superscript, htmlTip: 'x<superscript>2</superscript>' },\n        link: { cmd: 'link', disable: eVm => eVm.caret && !eVm.caret.can('link'), icon: i.hyperlink, tip: e.hyperlink, key: 76 },\n        fullscreen: { cmd: 'fullscreen', icon: i.toggleFullscreen, tip: e.toggleFullscreen, key: 70 },\n        viewsource: { cmd: 'viewsource', icon: i.viewSource, tip: e.viewSource },\n\n        quote: { cmd: 'formatBlock', param: 'BLOCKQUOTE', icon: i.quote, tip: e.quote, key: 81 },\n        left: { cmd: 'justifyLeft', icon: i.left, tip: e.left },\n        center: { cmd: 'justifyCenter', icon: i.center, tip: e.center },\n        right: { cmd: 'justifyRight', icon: i.right, tip: e.right },\n        justify: { cmd: 'justifyFull', icon: i.justify, tip: e.justify },\n\n        print: { type: 'no-state', cmd: 'print', icon: i.print, tip: e.print, key: 80 },\n        outdent: { type: 'no-state', disable: eVm => eVm.caret && !eVm.caret.can('outdent'), cmd: 'outdent', icon: i.outdent, tip: e.outdent },\n        indent: { type: 'no-state', disable: eVm => eVm.caret && !eVm.caret.can('indent'), cmd: 'indent', icon: i.indent, tip: e.indent },\n        removeFormat: { type: 'no-state', cmd: 'removeFormat', icon: i.removeFormat, tip: e.removeFormat },\n        hr: { type: 'no-state', cmd: 'insertHorizontalRule', icon: i.hr, tip: e.hr },\n        undo: { type: 'no-state', cmd: 'undo', icon: i.undo, tip: e.undo, key: 90 },\n        redo: { type: 'no-state', cmd: 'redo', icon: i.redo, tip: e.redo, key: 89 },\n\n        h1: { cmd: 'formatBlock', param: 'H1', icon: i.heading1 || i.heading, tip: e.heading1, htmlTip: `<h1 class=\"q-ma-none\">${ e.heading1 }</h1>` },\n        h2: { cmd: 'formatBlock', param: 'H2', icon: i.heading2 || i.heading, tip: e.heading2, htmlTip: `<h2 class=\"q-ma-none\">${ e.heading2 }</h2>` },\n        h3: { cmd: 'formatBlock', param: 'H3', icon: i.heading3 || i.heading, tip: e.heading3, htmlTip: `<h3 class=\"q-ma-none\">${ e.heading3 }</h3>` },\n        h4: { cmd: 'formatBlock', param: 'H4', icon: i.heading4 || i.heading, tip: e.heading4, htmlTip: `<h4 class=\"q-ma-none\">${ e.heading4 }</h4>` },\n        h5: { cmd: 'formatBlock', param: 'H5', icon: i.heading5 || i.heading, tip: e.heading5, htmlTip: `<h5 class=\"q-ma-none\">${ e.heading5 }</h5>` },\n        h6: { cmd: 'formatBlock', param: 'H6', icon: i.heading6 || i.heading, tip: e.heading6, htmlTip: `<h6 class=\"q-ma-none\">${ e.heading6 }</h6>` },\n        p: { cmd: 'formatBlock', param: props.paragraphTag, icon: i.heading, tip: e.paragraph },\n        code: { cmd: 'formatBlock', param: 'PRE', icon: i.code, htmlTip: `<code>${ e.code }</code>` },\n\n        'size-1': { cmd: 'fontSize', param: '1', icon: i.size1 || i.size, tip: e.size1, htmlTip: `<font size=\"1\">${ e.size1 }</font>` },\n        'size-2': { cmd: 'fontSize', param: '2', icon: i.size2 || i.size, tip: e.size2, htmlTip: `<font size=\"2\">${ e.size2 }</font>` },\n        'size-3': { cmd: 'fontSize', param: '3', icon: i.size3 || i.size, tip: e.size3, htmlTip: `<font size=\"3\">${ e.size3 }</font>` },\n        'size-4': { cmd: 'fontSize', param: '4', icon: i.size4 || i.size, tip: e.size4, htmlTip: `<font size=\"4\">${ e.size4 }</font>` },\n        'size-5': { cmd: 'fontSize', param: '5', icon: i.size5 || i.size, tip: e.size5, htmlTip: `<font size=\"5\">${ e.size5 }</font>` },\n        'size-6': { cmd: 'fontSize', param: '6', icon: i.size6 || i.size, tip: e.size6, htmlTip: `<font size=\"6\">${ e.size6 }</font>` },\n        'size-7': { cmd: 'fontSize', param: '7', icon: i.size7 || i.size, tip: e.size7, htmlTip: `<font size=\"7\">${ e.size7 }</font>` }\n      }\n    })\n\n    const buttons = computed(() => {\n      const userDef = props.definitions || {}\n      const def = props.definitions || props.fonts\n        ? extend(\n          true,\n          {},\n          buttonDef.value,\n          userDef,\n          getFonts(\n            defaultFont,\n            $q.lang.editor.defaultFont,\n            $q.iconSet.editor.font,\n            props.fonts\n          )\n        )\n        : buttonDef.value\n\n      return props.toolbar.map(\n        group => group.map(token => {\n          if (token.options) {\n            return {\n              type: 'dropdown',\n              icon: token.icon,\n              label: token.label,\n              size: 'sm',\n              dense: true,\n              fixedLabel: token.fixedLabel,\n              fixedIcon: token.fixedIcon,\n              highlight: token.highlight,\n              list: token.list,\n              options: token.options.map(item => def[ item ])\n            }\n          }\n\n          const obj = def[ token ]\n\n          if (obj) {\n            return obj.type === 'no-state' || (userDef[ token ] && (\n              obj.cmd === void 0 || (buttonDef.value[ obj.cmd ] && buttonDef.value[ obj.cmd ].type === 'no-state')\n            ))\n              ? obj\n              : Object.assign({ type: 'toggle' }, obj)\n          }\n          else {\n            return {\n              type: 'slot',\n              slot: token\n            }\n          }\n        })\n      )\n    })\n\n    const eVm = {\n      $q,\n      props,\n      slots,\n      emit,\n      // caret (will get injected after mount)\n      inFullscreen,\n      toggleFullscreen,\n      runCmd,\n      isViewingSource,\n      editLinkUrl,\n      toolbarBackgroundClass,\n      buttonProps,\n      contentRef,\n      buttons,\n      setContent\n    }\n\n    watch(() => props.modelValue, v => {\n      if (lastEmit !== v) {\n        lastEmit = v\n        setContent(v, true)\n      }\n    })\n\n    watch(editLinkUrl, v => {\n      emit(`link${ v ? 'Show' : 'Hide' }`)\n    })\n\n    const hasToolbar = computed(() => props.toolbar && props.toolbar.length !== 0)\n\n    const keys = computed(() => {\n      const\n        k = {},\n        add = btn => {\n          if (btn.key) {\n            k[ btn.key ] = {\n              cmd: btn.cmd,\n              param: btn.param\n            }\n          }\n        }\n\n      buttons.value.forEach(group => {\n        group.forEach(token => {\n          if (token.options) {\n            token.options.forEach(add)\n          }\n          else {\n            add(token)\n          }\n        })\n      })\n      return k\n    })\n\n    const innerStyle = computed(() => (\n      inFullscreen.value\n        ? props.contentStyle\n        : [\n            {\n              minHeight: props.minHeight,\n              height: props.height,\n              maxHeight: props.maxHeight\n            },\n            props.contentStyle\n          ]\n    ))\n\n    const classes = computed(() =>\n      `q-editor q-editor--${ isViewingSource.value === true ? 'source' : 'default' }`\n      + (props.disable === true ? ' disabled' : '')\n      + (inFullscreen.value === true ? ' fullscreen column' : '')\n      + (props.square === true ? ' q-editor--square no-border-radius' : '')\n      + (props.flat === true ? ' q-editor--flat' : '')\n      + (props.dense === true ? ' q-editor--dense' : '')\n      + (isDark.value === true ? ' q-editor--dark q-dark' : '')\n    )\n\n    const innerClass = computed(() => ([\n      props.contentClass,\n      'q-editor__content',\n      { col: inFullscreen.value, 'overflow-auto': inFullscreen.value || props.maxHeight }\n    ]))\n\n    const attributes = computed(() => (\n      props.disable === true\n        ? { 'aria-disabled': 'true' }\n        : {}\n    ))\n\n    function onInput () {\n      if (contentRef.value !== null) {\n        const prop = `inner${ isViewingSource.value === true ? 'Text' : 'HTML' }`\n        const val = contentRef.value[ prop ]\n\n        if (val !== props.modelValue) {\n          lastEmit = val\n          emit('update:modelValue', val)\n        }\n      }\n    }\n\n    function onKeydown (e) {\n      emit('keydown', e)\n\n      if (e.ctrlKey !== true || shouldIgnoreKey(e) === true) {\n        refreshToolbar()\n        return\n      }\n\n      const key = e.keyCode\n      const target = keys.value[ key ]\n      if (target !== void 0) {\n        const { cmd, param } = target\n        stopAndPrevent(e)\n        runCmd(cmd, param, false)\n      }\n    }\n\n    function onClick (e) {\n      refreshToolbar()\n      emit('click', e)\n    }\n\n    function onBlur (e) {\n      if (contentRef.value !== null) {\n        const { scrollTop, scrollHeight } = contentRef.value\n        offsetBottom = scrollHeight - scrollTop\n      }\n      eVm.caret.save()\n      emit('blur', e)\n    }\n\n    function onFocus (e) {\n      nextTick(() => {\n        if (contentRef.value !== null && offsetBottom !== void 0) {\n          contentRef.value.scrollTop = contentRef.value.scrollHeight - offsetBottom\n        }\n      })\n      emit('focus', e)\n    }\n\n    function onFocusin (e) {\n      const root = rootRef.value\n\n      if (\n        root !== null\n        && root.contains(e.target) === true\n        && (\n          e.relatedTarget === null\n          || root.contains(e.relatedTarget) !== true\n        )\n      ) {\n        const prop = `inner${ isViewingSource.value === true ? 'Text' : 'HTML' }`\n        eVm.caret.restorePosition(contentRef.value[ prop ].length)\n        refreshToolbar()\n      }\n    }\n\n    function onFocusout (e) {\n      const root = rootRef.value\n\n      if (\n        root !== null\n        && root.contains(e.target) === true\n        && (\n          e.relatedTarget === null\n          || root.contains(e.relatedTarget) !== true\n        )\n      ) {\n        eVm.caret.savePosition()\n        refreshToolbar()\n      }\n    }\n\n    function onPointerStart () {\n      offsetBottom = void 0\n    }\n\n    function onSelectionchange (e) {\n      eVm.caret.save()\n    }\n\n    function setContent (v, restorePosition) {\n      if (contentRef.value !== null) {\n        if (restorePosition === true) {\n          eVm.caret.savePosition()\n        }\n\n        const prop = `inner${ isViewingSource.value === true ? 'Text' : 'HTML' }`\n        contentRef.value[ prop ] = v\n\n        if (restorePosition === true) {\n          eVm.caret.restorePosition(contentRef.value[ prop ].length)\n          refreshToolbar()\n        }\n      }\n    }\n\n    function runCmd (cmd, param, update = true) {\n      focus()\n      eVm.caret.restore()\n      eVm.caret.apply(cmd, param, () => {\n        focus()\n        eVm.caret.save()\n        if (update) {\n          refreshToolbar()\n        }\n      })\n    }\n\n    function refreshToolbar () {\n      setTimeout(() => {\n        editLinkUrl.value = null\n        proxy.$forceUpdate()\n      }, 1)\n    }\n\n    function focus () {\n      addFocusFn(() => {\n        contentRef.value !== null && contentRef.value.focus({ preventScroll: true })\n      })\n    }\n\n    function getContentEl () {\n      return contentRef.value\n    }\n\n    onMounted(() => {\n      eVm.caret = proxy.caret = new Caret(contentRef.value, eVm)\n      setContent(props.modelValue)\n      refreshToolbar()\n\n      document.addEventListener('selectionchange', onSelectionchange)\n    })\n\n    onBeforeUnmount(() => {\n      document.removeEventListener('selectionchange', onSelectionchange)\n    })\n\n    // expose public methods\n    Object.assign(proxy, {\n      runCmd, refreshToolbar, focus, getContentEl\n    })\n\n    return () => {\n      let toolbars\n\n      if (hasToolbar.value) {\n        const bars = [\n          h('div', {\n            key: 'qedt_top',\n            class: 'q-editor__toolbar row no-wrap scroll-x'\n              + toolbarBackgroundClass.value\n          }, getToolbar(eVm))\n        ]\n\n        editLinkUrl.value !== null && bars.push(\n          h('div', {\n            key: 'qedt_btm',\n            class: 'q-editor__toolbar row no-wrap items-center scroll-x'\n              + toolbarBackgroundClass.value\n          }, getLinkEditor(eVm))\n        )\n\n        toolbars = h('div', {\n          key: 'toolbar_ctainer',\n          class: 'q-editor__toolbars-container'\n        }, bars)\n      }\n\n      return h('div', {\n        ref: rootRef,\n        class: classes.value,\n        style: { height: inFullscreen.value === true ? '100%' : null },\n        ...attributes.value,\n        onFocusin,\n        onFocusout\n      }, [\n        toolbars,\n\n        h('div', {\n          ref: contentRef,\n          style: innerStyle.value,\n          class: innerClass.value,\n          contenteditable: editable.value,\n          placeholder: props.placeholder,\n          ...(__QUASAR_SSR_SERVER__\n            ? { innerHTML: props.modelValue }\n            : {}),\n          ...splitAttrs.listeners.value,\n          onInput,\n          onKeydown,\n          onClick,\n          onBlur,\n          onFocus,\n\n          // clean saved scroll position\n          onMousedown: onPointerStart,\n          onTouchstartPassive: onPointerStart\n        })\n      ])\n    }\n  }\n})\n",
      "start": 1703982896206,
      "end": 1703982896302,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896302,
      "end": 1703982896302,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896302,
      "end": 1703982896303,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896303,
      "end": 1703982896303,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896303,
      "end": 1703982896303,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896303,
      "end": 1703982896303,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896303,
      "end": 1703982896303,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { h, ref, computed, watch, onMounted, onBeforeUnmount, nextTick, getCurrentInstance } from \"vue\";\nimport Caret from \"./editor-caret.js\";\nimport { getToolbar, getFonts, getLinkEditor } from \"./editor-utils.js\";\nimport useDark, { useDarkProps } from \"../../composables/private/use-dark.js\";\nimport useFullscreen, { useFullscreenProps, useFullscreenEmits } from \"../../composables/private/use-fullscreen.js\";\nimport useSplitAttrs from \"../../composables/private/use-split-attrs.js\";\nimport { createComponent } from \"../../utils/private/create.js\";\nimport { stopAndPrevent } from \"../../utils/event.js\";\nimport extend from \"../../utils/extend.js\";\nimport { shouldIgnoreKey } from \"../../utils/private/key-composition.js\";\nimport { addFocusFn } from \"../../utils/private/focus-manager.js\";\nexport default createComponent({\n  name: \"QEditor\",\n  props: {\n    ...useDarkProps,\n    ...useFullscreenProps,\n    modelValue: {\n      type: String,\n      required: true\n    },\n    readonly: Boolean,\n    disable: Boolean,\n    minHeight: {\n      type: String,\n      default: \"10rem\"\n    },\n    maxHeight: String,\n    height: String,\n    definitions: Object,\n    fonts: Object,\n    placeholder: String,\n    toolbar: {\n      type: Array,\n      validator: (v) => v.length === 0 || v.every((group) => group.length),\n      default() {\n        return [\n          [\"left\", \"center\", \"right\", \"justify\"],\n          [\"bold\", \"italic\", \"underline\", \"strike\"],\n          [\"undo\", \"redo\"]\n        ];\n      }\n    },\n    toolbarColor: String,\n    toolbarBg: String,\n    toolbarTextColor: String,\n    toolbarToggleColor: {\n      type: String,\n      default: \"primary\"\n    },\n    toolbarOutline: Boolean,\n    toolbarPush: Boolean,\n    toolbarRounded: Boolean,\n    paragraphTag: {\n      type: String,\n      validator: (v) => [\"div\", \"p\"].includes(v),\n      default: \"div\"\n    },\n    contentStyle: Object,\n    contentClass: [Object, Array, String],\n    square: Boolean,\n    flat: Boolean,\n    dense: Boolean\n  },\n  emits: [\n    ...useFullscreenEmits,\n    \"update:modelValue\",\n    \"keydown\",\n    \"click\",\n    \"mouseup\",\n    \"keyup\",\n    \"touchend\",\n    \"focus\",\n    \"blur\",\n    \"dropdownShow\",\n    \"dropdownHide\",\n    \"dropdownBeforeShow\",\n    \"dropdownBeforeHide\",\n    \"linkShow\",\n    \"linkHide\"\n  ],\n  setup(props, { slots, emit, attrs }) {\n    const { proxy, vnode } = getCurrentInstance();\n    const { $q } = proxy;\n    const isDark = useDark(props, $q);\n    const { inFullscreen, toggleFullscreen } = useFullscreen();\n    const splitAttrs = useSplitAttrs(attrs, vnode);\n    const rootRef = ref(null);\n    const contentRef = ref(null);\n    const editLinkUrl = ref(null);\n    const isViewingSource = ref(false);\n    const editable = computed(() => !props.readonly && !props.disable);\n    let defaultFont, offsetBottom;\n    let lastEmit = props.modelValue;\n    if (true) {\n      document.execCommand(\"defaultParagraphSeparator\", false, props.paragraphTag);\n      defaultFont = window.getComputedStyle(document.body).fontFamily;\n    }\n    const toolbarBackgroundClass = computed(() => props.toolbarBg ? ` bg-${props.toolbarBg}` : \"\");\n    const buttonProps = computed(() => {\n      const flat = props.toolbarOutline !== true && props.toolbarPush !== true;\n      return {\n        type: \"a\",\n        flat,\n        noWrap: true,\n        outline: props.toolbarOutline,\n        push: props.toolbarPush,\n        rounded: props.toolbarRounded,\n        dense: true,\n        color: props.toolbarColor,\n        disable: !editable.value,\n        size: \"sm\"\n      };\n    });\n    const buttonDef = computed(() => {\n      const e = $q.lang.editor, i = $q.iconSet.editor;\n      return {\n        bold: { cmd: \"bold\", icon: i.bold, tip: e.bold, key: 66 },\n        italic: { cmd: \"italic\", icon: i.italic, tip: e.italic, key: 73 },\n        strike: { cmd: \"strikeThrough\", icon: i.strikethrough, tip: e.strikethrough, key: 83 },\n        underline: { cmd: \"underline\", icon: i.underline, tip: e.underline, key: 85 },\n        unordered: { cmd: \"insertUnorderedList\", icon: i.unorderedList, tip: e.unorderedList },\n        ordered: { cmd: \"insertOrderedList\", icon: i.orderedList, tip: e.orderedList },\n        subscript: { cmd: \"subscript\", icon: i.subscript, tip: e.subscript, htmlTip: \"x<subscript>2</subscript>\" },\n        superscript: { cmd: \"superscript\", icon: i.superscript, tip: e.superscript, htmlTip: \"x<superscript>2</superscript>\" },\n        link: { cmd: \"link\", disable: (eVm2) => eVm2.caret && !eVm2.caret.can(\"link\"), icon: i.hyperlink, tip: e.hyperlink, key: 76 },\n        fullscreen: { cmd: \"fullscreen\", icon: i.toggleFullscreen, tip: e.toggleFullscreen, key: 70 },\n        viewsource: { cmd: \"viewsource\", icon: i.viewSource, tip: e.viewSource },\n        quote: { cmd: \"formatBlock\", param: \"BLOCKQUOTE\", icon: i.quote, tip: e.quote, key: 81 },\n        left: { cmd: \"justifyLeft\", icon: i.left, tip: e.left },\n        center: { cmd: \"justifyCenter\", icon: i.center, tip: e.center },\n        right: { cmd: \"justifyRight\", icon: i.right, tip: e.right },\n        justify: { cmd: \"justifyFull\", icon: i.justify, tip: e.justify },\n        print: { type: \"no-state\", cmd: \"print\", icon: i.print, tip: e.print, key: 80 },\n        outdent: { type: \"no-state\", disable: (eVm2) => eVm2.caret && !eVm2.caret.can(\"outdent\"), cmd: \"outdent\", icon: i.outdent, tip: e.outdent },\n        indent: { type: \"no-state\", disable: (eVm2) => eVm2.caret && !eVm2.caret.can(\"indent\"), cmd: \"indent\", icon: i.indent, tip: e.indent },\n        removeFormat: { type: \"no-state\", cmd: \"removeFormat\", icon: i.removeFormat, tip: e.removeFormat },\n        hr: { type: \"no-state\", cmd: \"insertHorizontalRule\", icon: i.hr, tip: e.hr },\n        undo: { type: \"no-state\", cmd: \"undo\", icon: i.undo, tip: e.undo, key: 90 },\n        redo: { type: \"no-state\", cmd: \"redo\", icon: i.redo, tip: e.redo, key: 89 },\n        h1: { cmd: \"formatBlock\", param: \"H1\", icon: i.heading1 || i.heading, tip: e.heading1, htmlTip: `<h1 class=\"q-ma-none\">${e.heading1}</h1>` },\n        h2: { cmd: \"formatBlock\", param: \"H2\", icon: i.heading2 || i.heading, tip: e.heading2, htmlTip: `<h2 class=\"q-ma-none\">${e.heading2}</h2>` },\n        h3: { cmd: \"formatBlock\", param: \"H3\", icon: i.heading3 || i.heading, tip: e.heading3, htmlTip: `<h3 class=\"q-ma-none\">${e.heading3}</h3>` },\n        h4: { cmd: \"formatBlock\", param: \"H4\", icon: i.heading4 || i.heading, tip: e.heading4, htmlTip: `<h4 class=\"q-ma-none\">${e.heading4}</h4>` },\n        h5: { cmd: \"formatBlock\", param: \"H5\", icon: i.heading5 || i.heading, tip: e.heading5, htmlTip: `<h5 class=\"q-ma-none\">${e.heading5}</h5>` },\n        h6: { cmd: \"formatBlock\", param: \"H6\", icon: i.heading6 || i.heading, tip: e.heading6, htmlTip: `<h6 class=\"q-ma-none\">${e.heading6}</h6>` },\n        p: { cmd: \"formatBlock\", param: props.paragraphTag, icon: i.heading, tip: e.paragraph },\n        code: { cmd: \"formatBlock\", param: \"PRE\", icon: i.code, htmlTip: `<code>${e.code}</code>` },\n        \"size-1\": { cmd: \"fontSize\", param: \"1\", icon: i.size1 || i.size, tip: e.size1, htmlTip: `<font size=\"1\">${e.size1}</font>` },\n        \"size-2\": { cmd: \"fontSize\", param: \"2\", icon: i.size2 || i.size, tip: e.size2, htmlTip: `<font size=\"2\">${e.size2}</font>` },\n        \"size-3\": { cmd: \"fontSize\", param: \"3\", icon: i.size3 || i.size, tip: e.size3, htmlTip: `<font size=\"3\">${e.size3}</font>` },\n        \"size-4\": { cmd: \"fontSize\", param: \"4\", icon: i.size4 || i.size, tip: e.size4, htmlTip: `<font size=\"4\">${e.size4}</font>` },\n        \"size-5\": { cmd: \"fontSize\", param: \"5\", icon: i.size5 || i.size, tip: e.size5, htmlTip: `<font size=\"5\">${e.size5}</font>` },\n        \"size-6\": { cmd: \"fontSize\", param: \"6\", icon: i.size6 || i.size, tip: e.size6, htmlTip: `<font size=\"6\">${e.size6}</font>` },\n        \"size-7\": { cmd: \"fontSize\", param: \"7\", icon: i.size7 || i.size, tip: e.size7, htmlTip: `<font size=\"7\">${e.size7}</font>` }\n      };\n    });\n    const buttons = computed(() => {\n      const userDef = props.definitions || {};\n      const def = props.definitions || props.fonts ? extend(\n        true,\n        {},\n        buttonDef.value,\n        userDef,\n        getFonts(\n          defaultFont,\n          $q.lang.editor.defaultFont,\n          $q.iconSet.editor.font,\n          props.fonts\n        )\n      ) : buttonDef.value;\n      return props.toolbar.map(\n        (group) => group.map((token) => {\n          if (token.options) {\n            return {\n              type: \"dropdown\",\n              icon: token.icon,\n              label: token.label,\n              size: \"sm\",\n              dense: true,\n              fixedLabel: token.fixedLabel,\n              fixedIcon: token.fixedIcon,\n              highlight: token.highlight,\n              list: token.list,\n              options: token.options.map((item) => def[item])\n            };\n          }\n          const obj = def[token];\n          if (obj) {\n            return obj.type === \"no-state\" || userDef[token] && (obj.cmd === void 0 || buttonDef.value[obj.cmd] && buttonDef.value[obj.cmd].type === \"no-state\") ? obj : Object.assign({ type: \"toggle\" }, obj);\n          } else {\n            return {\n              type: \"slot\",\n              slot: token\n            };\n          }\n        })\n      );\n    });\n    const eVm = {\n      $q,\n      props,\n      slots,\n      emit,\n      // caret (will get injected after mount)\n      inFullscreen,\n      toggleFullscreen,\n      runCmd,\n      isViewingSource,\n      editLinkUrl,\n      toolbarBackgroundClass,\n      buttonProps,\n      contentRef,\n      buttons,\n      setContent\n    };\n    watch(() => props.modelValue, (v) => {\n      if (lastEmit !== v) {\n        lastEmit = v;\n        setContent(v, true);\n      }\n    });\n    watch(editLinkUrl, (v) => {\n      emit(`link${v ? \"Show\" : \"Hide\"}`);\n    });\n    const hasToolbar = computed(() => props.toolbar && props.toolbar.length !== 0);\n    const keys = computed(() => {\n      const k = {}, add = (btn) => {\n        if (btn.key) {\n          k[btn.key] = {\n            cmd: btn.cmd,\n            param: btn.param\n          };\n        }\n      };\n      buttons.value.forEach((group) => {\n        group.forEach((token) => {\n          if (token.options) {\n            token.options.forEach(add);\n          } else {\n            add(token);\n          }\n        });\n      });\n      return k;\n    });\n    const innerStyle = computed(() => inFullscreen.value ? props.contentStyle : [\n      {\n        minHeight: props.minHeight,\n        height: props.height,\n        maxHeight: props.maxHeight\n      },\n      props.contentStyle\n    ]);\n    const classes = computed(\n      () => `q-editor q-editor--${isViewingSource.value === true ? \"source\" : \"default\"}` + (props.disable === true ? \" disabled\" : \"\") + (inFullscreen.value === true ? \" fullscreen column\" : \"\") + (props.square === true ? \" q-editor--square no-border-radius\" : \"\") + (props.flat === true ? \" q-editor--flat\" : \"\") + (props.dense === true ? \" q-editor--dense\" : \"\") + (isDark.value === true ? \" q-editor--dark q-dark\" : \"\")\n    );\n    const innerClass = computed(() => [\n      props.contentClass,\n      \"q-editor__content\",\n      { col: inFullscreen.value, \"overflow-auto\": inFullscreen.value || props.maxHeight }\n    ]);\n    const attributes = computed(() => props.disable === true ? { \"aria-disabled\": \"true\" } : {});\n    function onInput() {\n      if (contentRef.value !== null) {\n        const prop = `inner${isViewingSource.value === true ? \"Text\" : \"HTML\"}`;\n        const val = contentRef.value[prop];\n        if (val !== props.modelValue) {\n          lastEmit = val;\n          emit(\"update:modelValue\", val);\n        }\n      }\n    }\n    function onKeydown(e) {\n      emit(\"keydown\", e);\n      if (e.ctrlKey !== true || shouldIgnoreKey(e) === true) {\n        refreshToolbar();\n        return;\n      }\n      const key = e.keyCode;\n      const target = keys.value[key];\n      if (target !== void 0) {\n        const { cmd, param } = target;\n        stopAndPrevent(e);\n        runCmd(cmd, param, false);\n      }\n    }\n    function onClick(e) {\n      refreshToolbar();\n      emit(\"click\", e);\n    }\n    function onBlur(e) {\n      if (contentRef.value !== null) {\n        const { scrollTop, scrollHeight } = contentRef.value;\n        offsetBottom = scrollHeight - scrollTop;\n      }\n      eVm.caret.save();\n      emit(\"blur\", e);\n    }\n    function onFocus(e) {\n      nextTick(() => {\n        if (contentRef.value !== null && offsetBottom !== void 0) {\n          contentRef.value.scrollTop = contentRef.value.scrollHeight - offsetBottom;\n        }\n      });\n      emit(\"focus\", e);\n    }\n    function onFocusin(e) {\n      const root = rootRef.value;\n      if (root !== null && root.contains(e.target) === true && (e.relatedTarget === null || root.contains(e.relatedTarget) !== true)) {\n        const prop = `inner${isViewingSource.value === true ? \"Text\" : \"HTML\"}`;\n        eVm.caret.restorePosition(contentRef.value[prop].length);\n        refreshToolbar();\n      }\n    }\n    function onFocusout(e) {\n      const root = rootRef.value;\n      if (root !== null && root.contains(e.target) === true && (e.relatedTarget === null || root.contains(e.relatedTarget) !== true)) {\n        eVm.caret.savePosition();\n        refreshToolbar();\n      }\n    }\n    function onPointerStart() {\n      offsetBottom = void 0;\n    }\n    function onSelectionchange(e) {\n      eVm.caret.save();\n    }\n    function setContent(v, restorePosition) {\n      if (contentRef.value !== null) {\n        if (restorePosition === true) {\n          eVm.caret.savePosition();\n        }\n        const prop = `inner${isViewingSource.value === true ? \"Text\" : \"HTML\"}`;\n        contentRef.value[prop] = v;\n        if (restorePosition === true) {\n          eVm.caret.restorePosition(contentRef.value[prop].length);\n          refreshToolbar();\n        }\n      }\n    }\n    function runCmd(cmd, param, update = true) {\n      focus();\n      eVm.caret.restore();\n      eVm.caret.apply(cmd, param, () => {\n        focus();\n        eVm.caret.save();\n        if (update) {\n          refreshToolbar();\n        }\n      });\n    }\n    function refreshToolbar() {\n      setTimeout(() => {\n        editLinkUrl.value = null;\n        proxy.$forceUpdate();\n      }, 1);\n    }\n    function focus() {\n      addFocusFn(() => {\n        contentRef.value !== null && contentRef.value.focus({ preventScroll: true });\n      });\n    }\n    function getContentEl() {\n      return contentRef.value;\n    }\n    onMounted(() => {\n      eVm.caret = proxy.caret = new Caret(contentRef.value, eVm);\n      setContent(props.modelValue);\n      refreshToolbar();\n      document.addEventListener(\"selectionchange\", onSelectionchange);\n    });\n    onBeforeUnmount(() => {\n      document.removeEventListener(\"selectionchange\", onSelectionchange);\n    });\n    Object.assign(proxy, {\n      runCmd,\n      refreshToolbar,\n      focus,\n      getContentEl\n    });\n    return () => {\n      let toolbars;\n      if (hasToolbar.value) {\n        const bars = [\n          h(\"div\", {\n            key: \"qedt_top\",\n            class: \"q-editor__toolbar row no-wrap scroll-x\" + toolbarBackgroundClass.value\n          }, getToolbar(eVm))\n        ];\n        editLinkUrl.value !== null && bars.push(\n          h(\"div\", {\n            key: \"qedt_btm\",\n            class: \"q-editor__toolbar row no-wrap items-center scroll-x\" + toolbarBackgroundClass.value\n          }, getLinkEditor(eVm))\n        );\n        toolbars = h(\"div\", {\n          key: \"toolbar_ctainer\",\n          class: \"q-editor__toolbars-container\"\n        }, bars);\n      }\n      return h(\"div\", {\n        ref: rootRef,\n        class: classes.value,\n        style: { height: inFullscreen.value === true ? \"100%\" : null },\n        ...attributes.value,\n        onFocusin,\n        onFocusout\n      }, [\n        toolbars,\n        h(\"div\", {\n          ref: contentRef,\n          style: innerStyle.value,\n          class: innerClass.value,\n          contenteditable: editable.value,\n          placeholder: props.placeholder,\n          ...false ? { innerHTML: props.modelValue } : {},\n          ...splitAttrs.listeners.value,\n          onInput,\n          onKeydown,\n          onClick,\n          onBlur,\n          onFocus,\n          // clean saved scroll position\n          onMousedown: onPointerStart,\n          onTouchstartPassive: onPointerStart\n        })\n      ]);\n    };\n  }\n});\n",
      "start": 1703982896303,
      "end": 1703982896373,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1703982896373,
      "end": 1703982896373,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896373,
      "end": 1703982896373,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896373,
      "end": 1703982896373,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896373,
      "end": 1703982896373,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896373,
      "end": 1703982896376,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896376,
      "end": 1703982896376,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896376,
      "end": 1703982896377,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896377,
      "end": 1703982896377,
      "order": "normal"
    }
  ]
}
