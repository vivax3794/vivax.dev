{
  "resolvedId": "/home/vivax/coding/vivax.dev/node_modules/quasar/src/directives/TouchRepeat.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { client } from '../plugins/Platform.js'\n\nimport { createDirective } from '../utils/private/create.js'\nimport { addEvt, cleanEvt, position, leftClick, stopAndPrevent, noop } from '../utils/event.js'\nimport { clearSelection } from '../utils/private/selection.js'\nimport { isKeyCode } from '../utils/private/key-composition.js'\nimport getSSRProps from '../utils/private/noop-ssr-directive-transform.js'\n\nconst\n  keyCodes = {\n    esc: 27,\n    tab: 9,\n    enter: 13,\n    space: 32,\n    up: 38,\n    left: 37,\n    right: 39,\n    down: 40,\n    delete: [ 8, 46 ]\n  },\n  keyRegex = new RegExp(`^([\\\\d+]+|${ Object.keys(keyCodes).join('|') })$`, 'i')\n\nfunction shouldEnd (evt, origin) {\n  const { top, left } = position(evt)\n\n  return Math.abs(left - origin.left) >= 7\n    || Math.abs(top - origin.top) >= 7\n}\n\nexport default createDirective(__QUASAR_SSR_SERVER__\n  ? { name: 'touch-repeat', getSSRProps }\n  : {\n      name: 'touch-repeat',\n\n      beforeMount (el, { modifiers, value, arg }) {\n        const keyboard = Object.keys(modifiers).reduce((acc, key) => {\n          if (keyRegex.test(key) === true) {\n            const keyCode = isNaN(parseInt(key, 10)) ? keyCodes[ key.toLowerCase() ] : parseInt(key, 10)\n            keyCode >= 0 && acc.push(keyCode)\n          }\n          return acc\n        }, [])\n\n        // early return, we don't need to do anything\n        if (\n          modifiers.mouse !== true\n          && client.has.touch !== true\n          && keyboard.length === 0\n        ) {\n          return\n        }\n\n        const durations = typeof arg === 'string' && arg.length !== 0\n          ? arg.split(':').map(val => parseInt(val, 10))\n          : [ 0, 600, 300 ]\n\n        const durationsLast = durations.length - 1\n\n        const ctx = {\n          keyboard,\n          handler: value,\n\n          noop,\n\n          mouseStart (evt) {\n            if (ctx.event === void 0 && typeof ctx.handler === 'function' && leftClick(evt) === true) {\n              addEvt(ctx, 'temp', [\n                [ document, 'mousemove', 'move', 'passiveCapture' ],\n                [ document, 'click', 'end', 'notPassiveCapture' ]\n              ])\n              ctx.start(evt, true)\n            }\n          },\n\n          keyboardStart (evt) {\n            if (typeof ctx.handler === 'function' && isKeyCode(evt, keyboard) === true) {\n              if (durations[ 0 ] === 0 || ctx.event !== void 0) {\n                stopAndPrevent(evt)\n                el.focus()\n                if (ctx.event !== void 0) {\n                  return\n                }\n              }\n\n              addEvt(ctx, 'temp', [\n                [ document, 'keyup', 'end', 'notPassiveCapture' ],\n                [ document, 'click', 'end', 'notPassiveCapture' ]\n              ])\n              ctx.start(evt, false, true)\n            }\n          },\n\n          touchStart (evt) {\n            if (evt.target !== void 0 && typeof ctx.handler === 'function') {\n              const target = evt.target\n              addEvt(ctx, 'temp', [\n                [ target, 'touchmove', 'move', 'passiveCapture' ],\n                [ target, 'touchcancel', 'end', 'notPassiveCapture' ],\n                [ target, 'touchend', 'end', 'notPassiveCapture' ]\n              ])\n              ctx.start(evt)\n            }\n          },\n\n          start (evt, mouseEvent, keyboardEvent) {\n            if (keyboardEvent !== true) {\n              ctx.origin = position(evt)\n            }\n\n            function styleCleanup (withDelay) {\n              ctx.styleCleanup = void 0\n\n              document.documentElement.style.cursor = ''\n\n              const remove = () => {\n                document.body.classList.remove('non-selectable')\n              }\n\n              if (withDelay === true) {\n                clearSelection()\n                setTimeout(remove, 10)\n              }\n              else { remove() }\n            }\n\n            if (client.is.mobile === true) {\n              document.body.classList.add('non-selectable')\n              clearSelection()\n              ctx.styleCleanup = styleCleanup\n            }\n\n            ctx.event = {\n              touch: mouseEvent !== true && keyboardEvent !== true,\n              mouse: mouseEvent === true,\n              keyboard: keyboardEvent === true,\n              startTime: Date.now(),\n              repeatCount: 0\n            }\n\n            const fn = () => {\n              ctx.timer = void 0\n\n              if (ctx.event === void 0) {\n                return\n              }\n\n              if (ctx.event.repeatCount === 0) {\n                ctx.event.evt = evt\n\n                if (keyboardEvent === true) {\n                  ctx.event.keyCode = evt.keyCode\n                }\n                else {\n                  ctx.event.position = position(evt)\n                }\n\n                if (client.is.mobile !== true) {\n                  document.documentElement.style.cursor = 'pointer'\n                  document.body.classList.add('non-selectable')\n                  clearSelection()\n                  ctx.styleCleanup = styleCleanup\n                }\n              }\n\n              ctx.event.duration = Date.now() - ctx.event.startTime\n              ctx.event.repeatCount += 1\n\n              ctx.handler(ctx.event)\n\n              const index = durationsLast < ctx.event.repeatCount\n                ? durationsLast\n                : ctx.event.repeatCount\n\n              ctx.timer = setTimeout(fn, durations[ index ])\n            }\n\n            if (durations[ 0 ] === 0) {\n              fn()\n            }\n            else {\n              ctx.timer = setTimeout(fn, durations[ 0 ])\n            }\n          },\n\n          move (evt) {\n            if (ctx.event !== void 0 && ctx.timer !== void 0 && shouldEnd(evt, ctx.origin) === true) {\n              clearTimeout(ctx.timer)\n              ctx.timer = void 0\n            }\n          },\n\n          end (evt) {\n            if (ctx.event === void 0) {\n              return\n            }\n\n            ctx.styleCleanup !== void 0 && ctx.styleCleanup(true)\n            evt !== void 0 && ctx.event.repeatCount > 0 && stopAndPrevent(evt)\n\n            cleanEvt(ctx, 'temp')\n\n            if (ctx.timer !== void 0) {\n              clearTimeout(ctx.timer)\n              ctx.timer = void 0\n            }\n\n            ctx.event = void 0\n          }\n        }\n\n        el.__qtouchrepeat = ctx\n\n        if (modifiers.mouse === true) {\n          // account for UMD too where modifiers will be lowercased to work\n          const capture = modifiers.mouseCapture === true || modifiers.mousecapture === true\n            ? 'Capture'\n            : ''\n\n          addEvt(ctx, 'main', [\n            [ el, 'mousedown', 'mouseStart', `passive${ capture }` ]\n          ])\n        }\n\n        client.has.touch === true && addEvt(ctx, 'main', [\n          [ el, 'touchstart', 'touchStart', `passive${ modifiers.capture === true ? 'Capture' : '' }` ],\n          [ el, 'touchend', 'noop', 'passiveCapture' ]\n        ])\n\n        if (keyboard.length !== 0) {\n          // account for UMD too where modifiers will be lowercased to work\n          const capture = modifiers.keyCapture === true || modifiers.keycapture === true\n            ? 'Capture'\n            : ''\n\n          addEvt(ctx, 'main', [\n            [ el, 'keydown', 'keyboardStart', `notPassive${ capture }` ]\n          ])\n        }\n      },\n\n      updated (el, { oldValue, value }) {\n        const ctx = el.__qtouchrepeat\n\n        if (ctx !== void 0 && oldValue !== value) {\n          typeof value !== 'function' && ctx.end()\n          ctx.handler = value\n        }\n      },\n\n      beforeUnmount (el) {\n        const ctx = el.__qtouchrepeat\n\n        if (ctx !== void 0) {\n          ctx.timer !== void 0 && clearTimeout(ctx.timer)\n\n          cleanEvt(ctx, 'main')\n          cleanEvt(ctx, 'temp')\n\n          ctx.styleCleanup !== void 0 && ctx.styleCleanup()\n\n          delete el.__qtouchrepeat\n        }\n      }\n    }\n)\n",
      "start": 1703982896651,
      "end": 1703982896709,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703982896709,
      "end": 1703982896709,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703982896710,
      "end": 1703982896710,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703982896710,
      "end": 1703982896710,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { client } from \"../plugins/Platform.js\";\nimport { createDirective } from \"../utils/private/create.js\";\nimport { addEvt, cleanEvt, position, leftClick, stopAndPrevent, noop } from \"../utils/event.js\";\nimport { clearSelection } from \"../utils/private/selection.js\";\nimport { isKeyCode } from \"../utils/private/key-composition.js\";\nimport getSSRProps from \"../utils/private/noop-ssr-directive-transform.js\";\nconst keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  delete: [8, 46]\n}, keyRegex = new RegExp(`^([\\\\d+]+|${Object.keys(keyCodes).join(\"|\")})$`, \"i\");\nfunction shouldEnd(evt, origin) {\n  const { top, left } = position(evt);\n  return Math.abs(left - origin.left) >= 7 || Math.abs(top - origin.top) >= 7;\n}\nexport default createDirective(\n  false ? { name: \"touch-repeat\", getSSRProps } : {\n    name: \"touch-repeat\",\n    beforeMount(el, { modifiers, value, arg }) {\n      const keyboard = Object.keys(modifiers).reduce((acc, key) => {\n        if (keyRegex.test(key) === true) {\n          const keyCode = isNaN(parseInt(key, 10)) ? keyCodes[key.toLowerCase()] : parseInt(key, 10);\n          keyCode >= 0 && acc.push(keyCode);\n        }\n        return acc;\n      }, []);\n      if (modifiers.mouse !== true && client.has.touch !== true && keyboard.length === 0) {\n        return;\n      }\n      const durations = typeof arg === \"string\" && arg.length !== 0 ? arg.split(\":\").map((val) => parseInt(val, 10)) : [0, 600, 300];\n      const durationsLast = durations.length - 1;\n      const ctx = {\n        keyboard,\n        handler: value,\n        noop,\n        mouseStart(evt) {\n          if (ctx.event === void 0 && typeof ctx.handler === \"function\" && leftClick(evt) === true) {\n            addEvt(ctx, \"temp\", [\n              [document, \"mousemove\", \"move\", \"passiveCapture\"],\n              [document, \"click\", \"end\", \"notPassiveCapture\"]\n            ]);\n            ctx.start(evt, true);\n          }\n        },\n        keyboardStart(evt) {\n          if (typeof ctx.handler === \"function\" && isKeyCode(evt, keyboard) === true) {\n            if (durations[0] === 0 || ctx.event !== void 0) {\n              stopAndPrevent(evt);\n              el.focus();\n              if (ctx.event !== void 0) {\n                return;\n              }\n            }\n            addEvt(ctx, \"temp\", [\n              [document, \"keyup\", \"end\", \"notPassiveCapture\"],\n              [document, \"click\", \"end\", \"notPassiveCapture\"]\n            ]);\n            ctx.start(evt, false, true);\n          }\n        },\n        touchStart(evt) {\n          if (evt.target !== void 0 && typeof ctx.handler === \"function\") {\n            const target = evt.target;\n            addEvt(ctx, \"temp\", [\n              [target, \"touchmove\", \"move\", \"passiveCapture\"],\n              [target, \"touchcancel\", \"end\", \"notPassiveCapture\"],\n              [target, \"touchend\", \"end\", \"notPassiveCapture\"]\n            ]);\n            ctx.start(evt);\n          }\n        },\n        start(evt, mouseEvent, keyboardEvent) {\n          if (keyboardEvent !== true) {\n            ctx.origin = position(evt);\n          }\n          function styleCleanup(withDelay) {\n            ctx.styleCleanup = void 0;\n            document.documentElement.style.cursor = \"\";\n            const remove = () => {\n              document.body.classList.remove(\"non-selectable\");\n            };\n            if (withDelay === true) {\n              clearSelection();\n              setTimeout(remove, 10);\n            } else {\n              remove();\n            }\n          }\n          if (client.is.mobile === true) {\n            document.body.classList.add(\"non-selectable\");\n            clearSelection();\n            ctx.styleCleanup = styleCleanup;\n          }\n          ctx.event = {\n            touch: mouseEvent !== true && keyboardEvent !== true,\n            mouse: mouseEvent === true,\n            keyboard: keyboardEvent === true,\n            startTime: Date.now(),\n            repeatCount: 0\n          };\n          const fn = () => {\n            ctx.timer = void 0;\n            if (ctx.event === void 0) {\n              return;\n            }\n            if (ctx.event.repeatCount === 0) {\n              ctx.event.evt = evt;\n              if (keyboardEvent === true) {\n                ctx.event.keyCode = evt.keyCode;\n              } else {\n                ctx.event.position = position(evt);\n              }\n              if (client.is.mobile !== true) {\n                document.documentElement.style.cursor = \"pointer\";\n                document.body.classList.add(\"non-selectable\");\n                clearSelection();\n                ctx.styleCleanup = styleCleanup;\n              }\n            }\n            ctx.event.duration = Date.now() - ctx.event.startTime;\n            ctx.event.repeatCount += 1;\n            ctx.handler(ctx.event);\n            const index = durationsLast < ctx.event.repeatCount ? durationsLast : ctx.event.repeatCount;\n            ctx.timer = setTimeout(fn, durations[index]);\n          };\n          if (durations[0] === 0) {\n            fn();\n          } else {\n            ctx.timer = setTimeout(fn, durations[0]);\n          }\n        },\n        move(evt) {\n          if (ctx.event !== void 0 && ctx.timer !== void 0 && shouldEnd(evt, ctx.origin) === true) {\n            clearTimeout(ctx.timer);\n            ctx.timer = void 0;\n          }\n        },\n        end(evt) {\n          if (ctx.event === void 0) {\n            return;\n          }\n          ctx.styleCleanup !== void 0 && ctx.styleCleanup(true);\n          evt !== void 0 && ctx.event.repeatCount > 0 && stopAndPrevent(evt);\n          cleanEvt(ctx, \"temp\");\n          if (ctx.timer !== void 0) {\n            clearTimeout(ctx.timer);\n            ctx.timer = void 0;\n          }\n          ctx.event = void 0;\n        }\n      };\n      el.__qtouchrepeat = ctx;\n      if (modifiers.mouse === true) {\n        const capture = modifiers.mouseCapture === true || modifiers.mousecapture === true ? \"Capture\" : \"\";\n        addEvt(ctx, \"main\", [\n          [el, \"mousedown\", \"mouseStart\", `passive${capture}`]\n        ]);\n      }\n      client.has.touch === true && addEvt(ctx, \"main\", [\n        [el, \"touchstart\", \"touchStart\", `passive${modifiers.capture === true ? \"Capture\" : \"\"}`],\n        [el, \"touchend\", \"noop\", \"passiveCapture\"]\n      ]);\n      if (keyboard.length !== 0) {\n        const capture = modifiers.keyCapture === true || modifiers.keycapture === true ? \"Capture\" : \"\";\n        addEvt(ctx, \"main\", [\n          [el, \"keydown\", \"keyboardStart\", `notPassive${capture}`]\n        ]);\n      }\n    },\n    updated(el, { oldValue, value }) {\n      const ctx = el.__qtouchrepeat;\n      if (ctx !== void 0 && oldValue !== value) {\n        typeof value !== \"function\" && ctx.end();\n        ctx.handler = value;\n      }\n    },\n    beforeUnmount(el) {\n      const ctx = el.__qtouchrepeat;\n      if (ctx !== void 0) {\n        ctx.timer !== void 0 && clearTimeout(ctx.timer);\n        cleanEvt(ctx, \"main\");\n        cleanEvt(ctx, \"temp\");\n        ctx.styleCleanup !== void 0 && ctx.styleCleanup();\n        delete el.__qtouchrepeat;\n      }\n    }\n  }\n);\n",
      "start": 1703982896710,
      "end": 1703982896715,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1703982896715,
      "end": 1703982896715,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703982896715,
      "end": 1703982896715,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703982896715,
      "end": 1703982896715,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703982896715,
      "end": 1703982896715,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703982896716,
      "end": 1703982896718,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703982896718,
      "end": 1703982896718,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703982896718,
      "end": 1703982896718,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703982896718,
      "end": 1703982896718,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703982896718,
      "end": 1703982896718,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703982896720,
      "end": 1703982896720,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703982896720,
      "end": 1703982896720,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703982896720,
      "end": 1703982896720,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1703982896720,
      "end": 1703982896720,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703982896720,
      "end": 1703982896720,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703982896720,
      "end": 1703982896720,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703982896720,
      "end": 1703982896721,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703982896721,
      "end": 1703982896721,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703982896721,
      "end": 1703982896721,
      "order": "normal"
    }
  ]
}
